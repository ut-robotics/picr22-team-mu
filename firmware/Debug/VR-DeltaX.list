
VR-DeltaX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e8  0800a3e8  000201b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3e8  0800a3e8  000201b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3e8  0800a3e8  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800a3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000014c4  200001b4  0800a5a4  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001678  0800a5a4  00021678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000166bb  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358e  00000000  00000000  0003689f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00039e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0003b180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020c4b  00000000  00000000  0003c358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016735  00000000  00000000  0005cfa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c6514  00000000  00000000  000736d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00139bec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  00139c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001b4 	.word	0x200001b4
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a378 	.word	0x0800a378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001b8 	.word	0x200001b8
 8000214:	0800a378 	.word	0x0800a378

08000218 <CDC_On_Receive>:
Command command = {.speed1 = 0, .speed2 = 0, .speed3 = 0, .throwerSpeed = 0, .delimiter = 0};
volatile uint8_t isCommandReceived = 0;
uint16_t timeout = 0;
uint16_t motor_enabled = 0;

void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
 8000220:	6039      	str	r1, [r7, #0]
	if (*length == sizeof(Command)) {
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b0a      	cmp	r3, #10
 8000228:	d10d      	bne.n	8000246 <CDC_On_Receive+0x2e>
    memcpy(&command, buffer, sizeof(Command));
 800022a:	220a      	movs	r2, #10
 800022c:	6879      	ldr	r1, [r7, #4]
 800022e:	4808      	ldr	r0, [pc, #32]	; (8000250 <CDC_On_Receive+0x38>)
 8000230:	f00a f88c 	bl	800a34c <memcpy>

    if (command.delimiter == 0xAAAA) {
 8000234:	4b06      	ldr	r3, [pc, #24]	; (8000250 <CDC_On_Receive+0x38>)
 8000236:	891b      	ldrh	r3, [r3, #8]
 8000238:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 800023c:	4293      	cmp	r3, r2
 800023e:	d102      	bne.n	8000246 <CDC_On_Receive+0x2e>
      isCommandReceived = 1;
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <CDC_On_Receive+0x3c>)
 8000242:	2201      	movs	r2, #1
 8000244:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8000246:	bf00      	nop
 8000248:	3708      	adds	r7, #8
 800024a:	46bd      	mov	sp, r7
 800024c:	bd80      	pop	{r7, pc}
 800024e:	bf00      	nop
 8000250:	2000047c 	.word	0x2000047c
 8000254:	20000486 	.word	0x20000486

08000258 <clamp>:

int32_t clamp(int32_t value, int32_t minValue, int32_t maxValue) {
 8000258:	b480      	push	{r7}
 800025a:	b085      	sub	sp, #20
 800025c:	af00      	add	r7, sp, #0
 800025e:	60f8      	str	r0, [r7, #12]
 8000260:	60b9      	str	r1, [r7, #8]
 8000262:	607a      	str	r2, [r7, #4]
	if (value > maxValue) {
 8000264:	68fa      	ldr	r2, [r7, #12]
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	429a      	cmp	r2, r3
 800026a:	dd01      	ble.n	8000270 <clamp+0x18>
		return maxValue;
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	e006      	b.n	800027e <clamp+0x26>
	}

	if (value < minValue) {
 8000270:	68fa      	ldr	r2, [r7, #12]
 8000272:	68bb      	ldr	r3, [r7, #8]
 8000274:	429a      	cmp	r2, r3
 8000276:	da01      	bge.n	800027c <clamp+0x24>
		return minValue;
 8000278:	68bb      	ldr	r3, [r7, #8]
 800027a:	e000      	b.n	800027e <clamp+0x26>
	}
	return value;
 800027c:	68fb      	ldr	r3, [r7, #12]
}
 800027e:	4618      	mov	r0, r3
 8000280:	3714      	adds	r7, #20
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
	...

0800028c <controlPID>:

int32_t controlPID(MotorControl* control, int16_t position) {
 800028c:	b580      	push	{r7, lr}
 800028e:	b084      	sub	sp, #16
 8000290:	af00      	add	r7, sp, #0
 8000292:	6078      	str	r0, [r7, #4]
 8000294:	460b      	mov	r3, r1
 8000296:	807b      	strh	r3, [r7, #2]
	control->positionChange = position - control->position;
 8000298:	887a      	ldrh	r2, [r7, #2]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80002a0:	b29b      	uxth	r3, r3
 80002a2:	1ad3      	subs	r3, r2, r3
 80002a4:	b29b      	uxth	r3, r3
 80002a6:	b21a      	sxth	r2, r3
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	809a      	strh	r2, [r3, #4]
	control->position = position;
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	887a      	ldrh	r2, [r7, #2]
 80002b0:	80da      	strh	r2, [r3, #6]
	int32_t error = (int32_t)control->speed - (int32_t)control->positionChange;
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002b8:	461a      	mov	r2, r3
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80002c0:	1ad3      	subs	r3, r2, r3
 80002c2:	60fb      	str	r3, [r7, #12]
	if (control->speed == 0) {
 80002c4:	687b      	ldr	r3, [r7, #4]
 80002c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d103      	bne.n	80002d6 <controlPID+0x4a>
		control->integral = 0;
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	2200      	movs	r2, #0
 80002d2:	60da      	str	r2, [r3, #12]
 80002d4:	e018      	b.n	8000308 <controlPID+0x7c>
	} else {
		control->integral = clamp(control->integral+error, -65535/control->gainI, 65535/control->gainI);
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	68da      	ldr	r2, [r3, #12]
 80002da:	68fb      	ldr	r3, [r7, #12]
 80002dc:	18d0      	adds	r0, r2, r3
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002e4:	461a      	mov	r2, r3
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <controlPID+0xa4>)
 80002e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002f2:	461a      	mov	r2, r3
 80002f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002f8:	fb93 f3f2 	sdiv	r3, r3, r2
 80002fc:	461a      	mov	r2, r3
 80002fe:	f7ff ffab 	bl	8000258 <clamp>
 8000302:	4602      	mov	r2, r0
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	60da      	str	r2, [r3, #12]
	}
	return (int32_t)control->gainP * error + (int32_t)control->gainI * control->integral;
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800030e:	461a      	mov	r2, r3
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	fb03 f202 	mul.w	r2, r3, r2
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800031c:	4619      	mov	r1, r3
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	68db      	ldr	r3, [r3, #12]
 8000322:	fb01 f303 	mul.w	r3, r1, r3
 8000326:	4413      	add	r3, r2
}
 8000328:	4618      	mov	r0, r3
 800032a:	3710      	adds	r7, #16
 800032c:	46bd      	mov	sp, r7
 800032e:	bd80      	pop	{r7, pc}
 8000330:	ffff0001 	.word	0xffff0001

08000334 <nSleep>:


void nSleep() {
 8000334:	b580      	push	{r7, lr}
 8000336:	b082      	sub	sp, #8
 8000338:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, 0);
 800033a:	2200      	movs	r2, #0
 800033c:	2101      	movs	r1, #1
 800033e:	480b      	ldr	r0, [pc, #44]	; (800036c <nSleep+0x38>)
 8000340:	f001 fbae 	bl	8001aa0 <HAL_GPIO_WritePin>
	for (int i = 0; i < 300; i++) {
 8000344:	2300      	movs	r3, #0
 8000346:	607b      	str	r3, [r7, #4]
 8000348:	e003      	b.n	8000352 <nSleep+0x1e>
		__asm("nop");
 800034a:	bf00      	nop
	for (int i = 0; i < 300; i++) {
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	3301      	adds	r3, #1
 8000350:	607b      	str	r3, [r7, #4]
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000358:	dbf7      	blt.n	800034a <nSleep+0x16>
	}
	HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, 1);
 800035a:	2201      	movs	r2, #1
 800035c:	2101      	movs	r1, #1
 800035e:	4803      	ldr	r0, [pc, #12]	; (800036c <nSleep+0x38>)
 8000360:	f001 fb9e 	bl	8001aa0 <HAL_GPIO_WritePin>
}
 8000364:	bf00      	nop
 8000366:	3708      	adds	r7, #8
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}
 800036c:	48001400 	.word	0x48001400

08000370 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b084      	sub	sp, #16
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	if (motor_enabled) {
 8000378:	4b4a      	ldr	r3, [pc, #296]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800037a:	881b      	ldrh	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	f000 808d 	beq.w	800049c <HAL_TIM_PeriodElapsedCallback+0x12c>
		int16_t position;
		position = (int16_t)TIM1->CNT;
 8000382:	4b49      	ldr	r3, [pc, #292]	; (80004a8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8000384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000386:	81fb      	strh	r3, [r7, #14]
		int32_t pwmValue = controlPID(&motor1Control, position);
 8000388:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800038c:	4619      	mov	r1, r3
 800038e:	4847      	ldr	r0, [pc, #284]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000390:	f7ff ff7c 	bl	800028c <controlPID>
 8000394:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M1_DIR_GPIO_Port, M1_DIR_Pin, (pwmValue < 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000396:	68bb      	ldr	r3, [r7, #8]
 8000398:	43db      	mvns	r3, r3
 800039a:	0fdb      	lsrs	r3, r3, #31
 800039c:	b2db      	uxtb	r3, r3
 800039e:	461a      	mov	r2, r3
 80003a0:	2102      	movs	r1, #2
 80003a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003a6:	f001 fb7b 	bl	8001aa0 <HAL_GPIO_WritePin>
		TIM15->CCR1 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80003aa:	68bb      	ldr	r3, [r7, #8]
 80003ac:	2b00      	cmp	r3, #0
 80003ae:	bfb8      	it	lt
 80003b0:	425b      	neglt	r3, r3
 80003b2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003b6:	2100      	movs	r1, #0
 80003b8:	4618      	mov	r0, r3
 80003ba:	f7ff ff4d 	bl	8000258 <clamp>
 80003be:	4603      	mov	r3, r0
 80003c0:	b29a      	uxth	r2, r3
 80003c2:	4b3b      	ldr	r3, [pc, #236]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80003c4:	635a      	str	r2, [r3, #52]	; 0x34

		position = (int16_t)TIM2->CNT;
 80003c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003cc:	81fb      	strh	r3, [r7, #14]
		pwmValue = controlPID(&motor2Control, position);
 80003ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003d2:	4619      	mov	r1, r3
 80003d4:	4837      	ldr	r0, [pc, #220]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80003d6:	f7ff ff59 	bl	800028c <controlPID>
 80003da:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M2_DIR_GPIO_Port, M2_DIR_Pin, (pwmValue < 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	43db      	mvns	r3, r3
 80003e0:	0fdb      	lsrs	r3, r3, #31
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	461a      	mov	r2, r3
 80003e6:	2101      	movs	r1, #1
 80003e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003ec:	f001 fb58 	bl	8001aa0 <HAL_GPIO_WritePin>
		TIM8->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	bfb8      	it	lt
 80003f6:	425b      	neglt	r3, r3
 80003f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003fc:	2100      	movs	r1, #0
 80003fe:	4618      	mov	r0, r3
 8000400:	f7ff ff2a 	bl	8000258 <clamp>
 8000404:	4603      	mov	r3, r0
 8000406:	b29a      	uxth	r2, r3
 8000408:	4b2b      	ldr	r3, [pc, #172]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800040a:	639a      	str	r2, [r3, #56]	; 0x38

		position = (int16_t)TIM3->CNT;
 800040c:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800040e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000410:	81fb      	strh	r3, [r7, #14]
		pwmValue = controlPID(&motor3Control, position);
 8000412:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000416:	4619      	mov	r1, r3
 8000418:	4829      	ldr	r0, [pc, #164]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 800041a:	f7ff ff37 	bl	800028c <controlPID>
 800041e:	60b8      	str	r0, [r7, #8]
		HAL_GPIO_WritePin(M3_DIR_GPIO_Port, M3_DIR_Pin, (pwmValue < 0) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8000420:	68bb      	ldr	r3, [r7, #8]
 8000422:	43db      	mvns	r3, r3
 8000424:	0fdb      	lsrs	r3, r3, #31
 8000426:	b2db      	uxtb	r3, r3
 8000428:	461a      	mov	r2, r3
 800042a:	2110      	movs	r1, #16
 800042c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000430:	f001 fb36 	bl	8001aa0 <HAL_GPIO_WritePin>
		TIM15->CCR2 = (uint16_t)clamp((pwmValue < 0) ? -pwmValue : pwmValue, 0, 65535);
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	2b00      	cmp	r3, #0
 8000438:	bfb8      	it	lt
 800043a:	425b      	neglt	r3, r3
 800043c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000440:	2100      	movs	r1, #0
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff ff08 	bl	8000258 <clamp>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800044e:	639a      	str	r2, [r3, #56]	; 0x38

		timeout += 1;
 8000450:	4b1c      	ldr	r3, [pc, #112]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	3301      	adds	r3, #1
 8000456:	b29a      	uxth	r2, r3
 8000458:	4b1a      	ldr	r3, [pc, #104]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800045a:	801a      	strh	r2, [r3, #0]
		if (timeout == 100){
 800045c:	4b19      	ldr	r3, [pc, #100]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 800045e:	881b      	ldrh	r3, [r3, #0]
 8000460:	2b64      	cmp	r3, #100	; 0x64
 8000462:	d11b      	bne.n	800049c <HAL_TIM_PeriodElapsedCallback+0x12c>
			timeout = 0;
 8000464:	4b17      	ldr	r3, [pc, #92]	; (80004c4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8000466:	2200      	movs	r2, #0
 8000468:	801a      	strh	r2, [r3, #0]
			motor_enabled = 0;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800046c:	2200      	movs	r2, #0
 800046e:	801a      	strh	r2, [r3, #0]
			motor1Control.speed = 0;
 8000470:	4b0e      	ldr	r3, [pc, #56]	; (80004ac <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8000472:	2200      	movs	r2, #0
 8000474:	801a      	strh	r2, [r3, #0]
			TIM15->CCR1 = 0;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8000478:	2200      	movs	r2, #0
 800047a:	635a      	str	r2, [r3, #52]	; 0x34
			TIM15->CCR2 = 0;
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800047e:	2200      	movs	r2, #0
 8000480:	639a      	str	r2, [r3, #56]	; 0x38
			TIM8->CCR2 = 0;
 8000482:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8000484:	2200      	movs	r2, #0
 8000486:	639a      	str	r2, [r3, #56]	; 0x38
			TIM4->CCR1 = 1000;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800048a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800048e:	635a      	str	r2, [r3, #52]	; 0x34
			motor2Control.speed = 0;
 8000490:	4b08      	ldr	r3, [pc, #32]	; (80004b4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8000492:	2200      	movs	r2, #0
 8000494:	801a      	strh	r2, [r3, #0]
			motor3Control.speed = 0;
 8000496:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8000498:	2200      	movs	r2, #0
 800049a:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800049c:	bf00      	nop
 800049e:	3710      	adds	r7, #16
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bd80      	pop	{r7, pc}
 80004a4:	2000048a 	.word	0x2000048a
 80004a8:	40012c00 	.word	0x40012c00
 80004ac:	20000000 	.word	0x20000000
 80004b0:	40014000 	.word	0x40014000
 80004b4:	20000010 	.word	0x20000010
 80004b8:	40013400 	.word	0x40013400
 80004bc:	40000400 	.word	0x40000400
 80004c0:	20000020 	.word	0x20000020
 80004c4:	20000488 	.word	0x20000488
 80004c8:	40000800 	.word	0x40000800

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 ffe2 	bl	800149a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f8b1 	bl	800063c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 fca9 	bl	8000e30 <MX_GPIO_Init>
  MX_USB_Device_Init();
 80004de:	f009 fa01 	bl	80098e4 <MX_USB_Device_Init>
  MX_TIM1_Init();
 80004e2:	f000 f8f7 	bl	80006d4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80004e6:	f000 f94f 	bl	8000788 <MX_TIM2_Init>
  MX_TIM3_Init();
 80004ea:	f000 f9a1 	bl	8000830 <MX_TIM3_Init>
  MX_TIM4_Init();
 80004ee:	f000 f9f5 	bl	80008dc <MX_TIM4_Init>
  MX_TIM8_Init();
 80004f2:	f000 fa83 	bl	80009fc <MX_TIM8_Init>
  MX_TIM15_Init();
 80004f6:	f000 fb15 	bl	8000b24 <MX_TIM15_Init>
  MX_TIM16_Init();
 80004fa:	f000 fba5 	bl	8000c48 <MX_TIM16_Init>
  MX_TIM17_Init();
 80004fe:	f000 fc1d 	bl	8000d3c <MX_TIM17_Init>
  MX_TIM6_Init();
 8000502:	f000 fa45 	bl	8000990 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000506:	2104      	movs	r1, #4
 8000508:	483a      	ldr	r0, [pc, #232]	; (80005f4 <main+0x128>)
 800050a:	f004 fa75 	bl	80049f8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800050e:	2104      	movs	r1, #4
 8000510:	4839      	ldr	r0, [pc, #228]	; (80005f8 <main+0x12c>)
 8000512:	f004 fa71 	bl	80049f8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000516:	2104      	movs	r1, #4
 8000518:	4838      	ldr	r0, [pc, #224]	; (80005fc <main+0x130>)
 800051a:	f004 fa6d 	bl	80049f8 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800051e:	2100      	movs	r1, #0
 8000520:	4837      	ldr	r0, [pc, #220]	; (8000600 <main+0x134>)
 8000522:	f004 f8c3 	bl	80046ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000526:	2104      	movs	r1, #4
 8000528:	4836      	ldr	r0, [pc, #216]	; (8000604 <main+0x138>)
 800052a:	f004 f8bf 	bl	80046ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_1);
 800052e:	2100      	movs	r1, #0
 8000530:	4835      	ldr	r0, [pc, #212]	; (8000608 <main+0x13c>)
 8000532:	f004 f8bb 	bl	80046ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 8000536:	2104      	movs	r1, #4
 8000538:	4833      	ldr	r0, [pc, #204]	; (8000608 <main+0x13c>)
 800053a:	f004 f8b7 	bl	80046ac <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 800053e:	4833      	ldr	r0, [pc, #204]	; (800060c <main+0x140>)
 8000540:	f003 fff2 	bl	8004528 <HAL_TIM_Base_Start_IT>

  TIM15->CCR1 = 0;
 8000544:	4b32      	ldr	r3, [pc, #200]	; (8000610 <main+0x144>)
 8000546:	2200      	movs	r2, #0
 8000548:	635a      	str	r2, [r3, #52]	; 0x34
  TIM15->CCR2 = 0;
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <main+0x144>)
 800054c:	2200      	movs	r2, #0
 800054e:	639a      	str	r2, [r3, #56]	; 0x38
  TIM8->CCR2 = 0;
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <main+0x148>)
 8000552:	2200      	movs	r2, #0
 8000554:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR1 = 1000;
 8000556:	4b30      	ldr	r3, [pc, #192]	; (8000618 <main+0x14c>)
 8000558:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800055c:	635a      	str	r2, [r3, #52]	; 0x34

  Feedback feedback = { // (1)
 800055e:	2300      	movs	r3, #0
 8000560:	803b      	strh	r3, [r7, #0]
 8000562:	2300      	movs	r3, #0
 8000564:	807b      	strh	r3, [r7, #2]
 8000566:	2300      	movs	r3, #0
 8000568:	80bb      	strh	r3, [r7, #4]
 800056a:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 800056e:	80fb      	strh	r3, [r7, #6]
      .speed2 = 0,
      .speed3 = 0,
      .delimiter = 0xAAAA
  };

  HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, 1);
 8000570:	2201      	movs	r2, #1
 8000572:	2101      	movs	r1, #1
 8000574:	4829      	ldr	r0, [pc, #164]	; (800061c <main+0x150>)
 8000576:	f001 fa93 	bl	8001aa0 <HAL_GPIO_WritePin>
  while (1) {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (isCommandReceived) { // (2).
 800057a:	4b29      	ldr	r3, [pc, #164]	; (8000620 <main+0x154>)
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	b2db      	uxtb	r3, r3
 8000580:	2b00      	cmp	r3, #0
 8000582:	d0fa      	beq.n	800057a <main+0xae>

	  isCommandReceived = 0;
 8000584:	4b26      	ldr	r3, [pc, #152]	; (8000620 <main+0x154>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
	  timeout = 0;
 800058a:	4b26      	ldr	r3, [pc, #152]	; (8000624 <main+0x158>)
 800058c:	2200      	movs	r2, #0
 800058e:	801a      	strh	r2, [r3, #0]
	  motor_enabled = 1;
 8000590:	4b25      	ldr	r3, [pc, #148]	; (8000628 <main+0x15c>)
 8000592:	2201      	movs	r2, #1
 8000594:	801a      	strh	r2, [r3, #0]
	  nSleep();
 8000596:	f7ff fecd 	bl	8000334 <nSleep>

	  //HAL_GPIO_TogglePin(BLUE_LED_GPIO_Port, BLUE_LED_Pin); // (3)
	  //HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_3);
	  motor1Control.speed = command.speed1;
 800059a:	4b24      	ldr	r3, [pc, #144]	; (800062c <main+0x160>)
 800059c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80005a0:	4b23      	ldr	r3, [pc, #140]	; (8000630 <main+0x164>)
 80005a2:	801a      	strh	r2, [r3, #0]
	  motor2Control.speed = command.speed2;
 80005a4:	4b21      	ldr	r3, [pc, #132]	; (800062c <main+0x160>)
 80005a6:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80005aa:	4b22      	ldr	r3, [pc, #136]	; (8000634 <main+0x168>)
 80005ac:	801a      	strh	r2, [r3, #0]
	  motor3Control.speed = command.speed3;
 80005ae:	4b1f      	ldr	r3, [pc, #124]	; (800062c <main+0x160>)
 80005b0:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 80005b4:	4b20      	ldr	r3, [pc, #128]	; (8000638 <main+0x16c>)
 80005b6:	801a      	strh	r2, [r3, #0]

	  feedback.speed1 = motor1Control.positionChange; // (4)
 80005b8:	4b1d      	ldr	r3, [pc, #116]	; (8000630 <main+0x164>)
 80005ba:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005be:	803b      	strh	r3, [r7, #0]
	  feedback.speed2 = motor2Control.positionChange;
 80005c0:	4b1c      	ldr	r3, [pc, #112]	; (8000634 <main+0x168>)
 80005c2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005c6:	807b      	strh	r3, [r7, #2]
	  feedback.speed3 = motor3Control.positionChange;
 80005c8:	4b1b      	ldr	r3, [pc, #108]	; (8000638 <main+0x16c>)
 80005ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80005ce:	80bb      	strh	r3, [r7, #4]

	  TIM4->CCR1 = clamp(command.throwerSpeed, 1000, 2000);
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <main+0x160>)
 80005d2:	88db      	ldrh	r3, [r3, #6]
 80005d4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80005d8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80005dc:	4618      	mov	r0, r3
 80005de:	f7ff fe3b 	bl	8000258 <clamp>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4b0c      	ldr	r3, [pc, #48]	; (8000618 <main+0x14c>)
 80005e6:	635a      	str	r2, [r3, #52]	; 0x34

	  CDC_Transmit_FS(&feedback, sizeof(feedback)); // (5)
 80005e8:	463b      	mov	r3, r7
 80005ea:	2108      	movs	r1, #8
 80005ec:	4618      	mov	r0, r3
 80005ee:	f009 fa3b 	bl	8009a68 <CDC_Transmit_FS>
	if (isCommandReceived) { // (2).
 80005f2:	e7c2      	b.n	800057a <main+0xae>
 80005f4:	200001d0 	.word	0x200001d0
 80005f8:	2000021c 	.word	0x2000021c
 80005fc:	20000268 	.word	0x20000268
 8000600:	200002b4 	.word	0x200002b4
 8000604:	2000034c 	.word	0x2000034c
 8000608:	20000398 	.word	0x20000398
 800060c:	20000300 	.word	0x20000300
 8000610:	40014000 	.word	0x40014000
 8000614:	40013400 	.word	0x40013400
 8000618:	40000800 	.word	0x40000800
 800061c:	48001400 	.word	0x48001400
 8000620:	20000486 	.word	0x20000486
 8000624:	20000488 	.word	0x20000488
 8000628:	2000048a 	.word	0x2000048a
 800062c:	2000047c 	.word	0x2000047c
 8000630:	20000000 	.word	0x20000000
 8000634:	20000010 	.word	0x20000010
 8000638:	20000020 	.word	0x20000020

0800063c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b094      	sub	sp, #80	; 0x50
 8000640:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000642:	f107 0318 	add.w	r3, r7, #24
 8000646:	2238      	movs	r2, #56	; 0x38
 8000648:	2100      	movs	r1, #0
 800064a:	4618      	mov	r0, r3
 800064c:	f009 fe8c 	bl	800a368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	601a      	str	r2, [r3, #0]
 8000656:	605a      	str	r2, [r3, #4]
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	60da      	str	r2, [r3, #12]
 800065c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800065e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000662:	f002 ff69 	bl	8003538 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000666:	2302      	movs	r3, #2
 8000668:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800066a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000670:	2340      	movs	r3, #64	; 0x40
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000674:	2302      	movs	r3, #2
 8000676:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000678:	2302      	movs	r3, #2
 800067a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800067c:	2301      	movs	r3, #1
 800067e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 18;
 8000680:	2312      	movs	r3, #18
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000684:	2302      	movs	r3, #2
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV6;
 8000688:	2306      	movs	r3, #6
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800068c:	2302      	movs	r3, #2
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0318 	add.w	r3, r7, #24
 8000694:	4618      	mov	r0, r3
 8000696:	f003 f803 	bl	80036a0 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x68>
  {
    Error_Handler();
 80006a0:	f000 fc36 	bl	8000f10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006a4:	230f      	movs	r3, #15
 80006a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006a8:	2303      	movs	r3, #3
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006b8:	1d3b      	adds	r3, r7, #4
 80006ba:	2104      	movs	r1, #4
 80006bc:	4618      	mov	r0, r3
 80006be:	f003 fb07 	bl	8003cd0 <HAL_RCC_ClockConfig>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80006c8:	f000 fc22 	bl	8000f10 <Error_Handler>
  }
}
 80006cc:	bf00      	nop
 80006ce:	3750      	adds	r7, #80	; 0x50
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b08c      	sub	sp, #48	; 0x30
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	2224      	movs	r2, #36	; 0x24
 80006e0:	2100      	movs	r1, #0
 80006e2:	4618      	mov	r0, r3
 80006e4:	f009 fe40 	bl	800a368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006e8:	463b      	mov	r3, r7
 80006ea:	2200      	movs	r2, #0
 80006ec:	601a      	str	r2, [r3, #0]
 80006ee:	605a      	str	r2, [r3, #4]
 80006f0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006f2:	4b23      	ldr	r3, [pc, #140]	; (8000780 <MX_TIM1_Init+0xac>)
 80006f4:	4a23      	ldr	r2, [pc, #140]	; (8000784 <MX_TIM1_Init+0xb0>)
 80006f6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <MX_TIM1_Init+0xac>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006fe:	4b20      	ldr	r3, [pc, #128]	; (8000780 <MX_TIM1_Init+0xac>)
 8000700:	2200      	movs	r2, #0
 8000702:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <MX_TIM1_Init+0xac>)
 8000706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800070a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <MX_TIM1_Init+0xac>)
 800070e:	2200      	movs	r2, #0
 8000710:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <MX_TIM1_Init+0xac>)
 8000714:	2200      	movs	r2, #0
 8000716:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000718:	4b19      	ldr	r3, [pc, #100]	; (8000780 <MX_TIM1_Init+0xac>)
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800071e:	2303      	movs	r3, #3
 8000720:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000722:	2300      	movs	r3, #0
 8000724:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000726:	2301      	movs	r3, #1
 8000728:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800072a:	2300      	movs	r3, #0
 800072c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000736:	2301      	movs	r3, #1
 8000738:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800073a:	2300      	movs	r3, #0
 800073c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000742:	f107 030c 	add.w	r3, r7, #12
 8000746:	4619      	mov	r1, r3
 8000748:	480d      	ldr	r0, [pc, #52]	; (8000780 <MX_TIM1_Init+0xac>)
 800074a:	f004 f8af 	bl	80048ac <HAL_TIM_Encoder_Init>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000754:	f000 fbdc 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000758:	2300      	movs	r3, #0
 800075a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800075c:	2300      	movs	r3, #0
 800075e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000764:	463b      	mov	r3, r7
 8000766:	4619      	mov	r1, r3
 8000768:	4805      	ldr	r0, [pc, #20]	; (8000780 <MX_TIM1_Init+0xac>)
 800076a:	f005 f83b 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000774:	f000 fbcc 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000778:	bf00      	nop
 800077a:	3730      	adds	r7, #48	; 0x30
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200001d0 	.word	0x200001d0
 8000784:	40012c00 	.word	0x40012c00

08000788 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08c      	sub	sp, #48	; 0x30
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2224      	movs	r2, #36	; 0x24
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f009 fde6 	bl	800a368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	463b      	mov	r3, r7
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]
 80007a2:	605a      	str	r2, [r3, #4]
 80007a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007a6:	4b21      	ldr	r3, [pc, #132]	; (800082c <MX_TIM2_Init+0xa4>)
 80007a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007ae:	4b1f      	ldr	r3, [pc, #124]	; (800082c <MX_TIM2_Init+0xa4>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b4:	4b1d      	ldr	r3, [pc, #116]	; (800082c <MX_TIM2_Init+0xa4>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80007ba:	4b1c      	ldr	r3, [pc, #112]	; (800082c <MX_TIM2_Init+0xa4>)
 80007bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80007c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007c2:	4b1a      	ldr	r3, [pc, #104]	; (800082c <MX_TIM2_Init+0xa4>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007c8:	4b18      	ldr	r3, [pc, #96]	; (800082c <MX_TIM2_Init+0xa4>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80007ce:	2303      	movs	r3, #3
 80007d0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80007d6:	2301      	movs	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80007da:	2300      	movs	r3, #0
 80007dc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80007de:	2300      	movs	r3, #0
 80007e0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80007e6:	2301      	movs	r3, #1
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80007ea:	2300      	movs	r3, #0
 80007ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80007f2:	f107 030c 	add.w	r3, r7, #12
 80007f6:	4619      	mov	r1, r3
 80007f8:	480c      	ldr	r0, [pc, #48]	; (800082c <MX_TIM2_Init+0xa4>)
 80007fa:	f004 f857 	bl	80048ac <HAL_TIM_Encoder_Init>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b00      	cmp	r3, #0
 8000802:	d001      	beq.n	8000808 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000804:	f000 fb84 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000808:	2300      	movs	r3, #0
 800080a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000810:	463b      	mov	r3, r7
 8000812:	4619      	mov	r1, r3
 8000814:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_TIM2_Init+0xa4>)
 8000816:	f004 ffe5 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8000820:	f000 fb76 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	3730      	adds	r7, #48	; 0x30
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	2000021c 	.word	0x2000021c

08000830 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	2224      	movs	r2, #36	; 0x24
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f009 fd92 	bl	800a368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000844:	463b      	mov	r3, r7
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800084e:	4b21      	ldr	r3, [pc, #132]	; (80008d4 <MX_TIM3_Init+0xa4>)
 8000850:	4a21      	ldr	r2, [pc, #132]	; (80008d8 <MX_TIM3_Init+0xa8>)
 8000852:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <MX_TIM3_Init+0xa4>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <MX_TIM3_Init+0xa4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <MX_TIM3_Init+0xa4>)
 8000862:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000866:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000868:	4b1a      	ldr	r3, [pc, #104]	; (80008d4 <MX_TIM3_Init+0xa4>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800086e:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <MX_TIM3_Init+0xa4>)
 8000870:	2280      	movs	r2, #128	; 0x80
 8000872:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000874:	2303      	movs	r3, #3
 8000876:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000878:	2300      	movs	r3, #0
 800087a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000884:	2300      	movs	r3, #0
 8000886:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000888:	2300      	movs	r3, #0
 800088a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800088c:	2301      	movs	r3, #1
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000894:	2300      	movs	r3, #0
 8000896:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	4619      	mov	r1, r3
 800089e:	480d      	ldr	r0, [pc, #52]	; (80008d4 <MX_TIM3_Init+0xa4>)
 80008a0:	f004 f804 	bl	80048ac <HAL_TIM_Encoder_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008aa:	f000 fb31 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	4806      	ldr	r0, [pc, #24]	; (80008d4 <MX_TIM3_Init+0xa4>)
 80008bc:	f004 ff92 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008c6:	f000 fb23 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	; 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	20000268 	.word	0x20000268
 80008d8:	40000400 	.word	0x40000400

080008dc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b08a      	sub	sp, #40	; 0x28
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	2200      	movs	r2, #0
 80008e8:	601a      	str	r2, [r3, #0]
 80008ea:	605a      	str	r2, [r3, #4]
 80008ec:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80008ee:	463b      	mov	r3, r7
 80008f0:	2200      	movs	r2, #0
 80008f2:	601a      	str	r2, [r3, #0]
 80008f4:	605a      	str	r2, [r3, #4]
 80008f6:	609a      	str	r2, [r3, #8]
 80008f8:	60da      	str	r2, [r3, #12]
 80008fa:	611a      	str	r2, [r3, #16]
 80008fc:	615a      	str	r2, [r3, #20]
 80008fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000900:	4b21      	ldr	r3, [pc, #132]	; (8000988 <MX_TIM4_Init+0xac>)
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <MX_TIM4_Init+0xb0>)
 8000904:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 144;
 8000906:	4b20      	ldr	r3, [pc, #128]	; (8000988 <MX_TIM4_Init+0xac>)
 8000908:	2290      	movs	r2, #144	; 0x90
 800090a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800090c:	4b1e      	ldr	r3, [pc, #120]	; (8000988 <MX_TIM4_Init+0xac>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20000;
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_TIM4_Init+0xac>)
 8000914:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000918:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800091a:	4b1b      	ldr	r3, [pc, #108]	; (8000988 <MX_TIM4_Init+0xac>)
 800091c:	2200      	movs	r2, #0
 800091e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_TIM4_Init+0xac>)
 8000922:	2280      	movs	r2, #128	; 0x80
 8000924:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000926:	4818      	ldr	r0, [pc, #96]	; (8000988 <MX_TIM4_Init+0xac>)
 8000928:	f003 fe68 	bl	80045fc <HAL_TIM_PWM_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000932:	f000 faed 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4810      	ldr	r0, [pc, #64]	; (8000988 <MX_TIM4_Init+0xac>)
 8000946:	f004 ff4d 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000950:	f000 fade 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000954:	2360      	movs	r3, #96	; 0x60
 8000956:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000958:	2300      	movs	r3, #0
 800095a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800095c:	2300      	movs	r3, #0
 800095e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	2200      	movs	r2, #0
 8000968:	4619      	mov	r1, r3
 800096a:	4807      	ldr	r0, [pc, #28]	; (8000988 <MX_TIM4_Init+0xac>)
 800096c:	f004 fa52 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000976:	f000 facb 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800097a:	4803      	ldr	r0, [pc, #12]	; (8000988 <MX_TIM4_Init+0xac>)
 800097c:	f000 fc4a 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000980:	bf00      	nop
 8000982:	3728      	adds	r7, #40	; 0x28
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	200002b4 	.word	0x200002b4
 800098c:	40000800 	.word	0x40000800

08000990 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_TIM6_Init+0x68>)
 80009a4:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 143;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009a8:	228f      	movs	r2, #143	; 0x8f
 80009aa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009ac:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009ae:	2200      	movs	r2, #0
 80009b0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 9999;
 80009b2:	4b10      	ldr	r3, [pc, #64]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009b4:	f242 720f 	movw	r2, #9999	; 0x270f
 80009b8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009bc:	2200      	movs	r2, #0
 80009be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009c0:	480c      	ldr	r0, [pc, #48]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009c2:	f003 fd59 	bl	8004478 <HAL_TIM_Base_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009cc:	f000 faa0 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009d8:	1d3b      	adds	r3, r7, #4
 80009da:	4619      	mov	r1, r3
 80009dc:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_TIM6_Init+0x64>)
 80009de:	f004 ff01 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009e8:	f000 fa92 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	20000300 	.word	0x20000300
 80009f8:	40001000 	.word	0x40001000

080009fc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b098      	sub	sp, #96	; 0x60
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a02:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a0e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a12:	2200      	movs	r2, #0
 8000a14:	601a      	str	r2, [r3, #0]
 8000a16:	605a      	str	r2, [r3, #4]
 8000a18:	609a      	str	r2, [r3, #8]
 8000a1a:	60da      	str	r2, [r3, #12]
 8000a1c:	611a      	str	r2, [r3, #16]
 8000a1e:	615a      	str	r2, [r3, #20]
 8000a20:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2234      	movs	r2, #52	; 0x34
 8000a26:	2100      	movs	r1, #0
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f009 fc9d 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a2e:	4b3b      	ldr	r3, [pc, #236]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a30:	4a3b      	ldr	r2, [pc, #236]	; (8000b20 <MX_TIM8_Init+0x124>)
 8000a32:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a34:	4b39      	ldr	r3, [pc, #228]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3a:	4b38      	ldr	r3, [pc, #224]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8000a40:	4b36      	ldr	r3, [pc, #216]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a46:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a48:	4b34      	ldr	r3, [pc, #208]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a4e:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a54:	4b31      	ldr	r3, [pc, #196]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000a5a:	4830      	ldr	r0, [pc, #192]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a5c:	f003 fdce 	bl	80045fc <HAL_TIM_PWM_Init>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000a66:	f000 fa53 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a72:	2300      	movs	r3, #0
 8000a74:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a76:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4827      	ldr	r0, [pc, #156]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000a7e:	f004 feb1 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8000a88:	f000 fa42 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8c:	2360      	movs	r3, #96	; 0x60
 8000a8e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a94:	2300      	movs	r3, #0
 8000a96:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000aa8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aac:	2204      	movs	r2, #4
 8000aae:	4619      	mov	r1, r3
 8000ab0:	481a      	ldr	r0, [pc, #104]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000ab2:	f004 f9af 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d001      	beq.n	8000ac0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8000abc:	f000 fa28 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ad8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ae6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000af4:	2300      	movs	r3, #0
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	4619      	mov	r1, r3
 8000afc:	4807      	ldr	r0, [pc, #28]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000afe:	f004 fef3 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8000b08:	f000 fa02 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000b0c:	4803      	ldr	r0, [pc, #12]	; (8000b1c <MX_TIM8_Init+0x120>)
 8000b0e:	f000 fb81 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000b12:	bf00      	nop
 8000b14:	3760      	adds	r7, #96	; 0x60
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bd80      	pop	{r7, pc}
 8000b1a:	bf00      	nop
 8000b1c:	2000034c 	.word	0x2000034c
 8000b20:	40013400 	.word	0x40013400

08000b24 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b098      	sub	sp, #96	; 0x60
 8000b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b2a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b2e:	2200      	movs	r2, #0
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	605a      	str	r2, [r3, #4]
 8000b34:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b36:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	605a      	str	r2, [r3, #4]
 8000b40:	609a      	str	r2, [r3, #8]
 8000b42:	60da      	str	r2, [r3, #12]
 8000b44:	611a      	str	r2, [r3, #16]
 8000b46:	615a      	str	r2, [r3, #20]
 8000b48:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b4a:	1d3b      	adds	r3, r7, #4
 8000b4c:	2234      	movs	r2, #52	; 0x34
 8000b4e:	2100      	movs	r1, #0
 8000b50:	4618      	mov	r0, r3
 8000b52:	f009 fc09 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000b56:	4b3a      	ldr	r3, [pc, #232]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b58:	4a3a      	ldr	r2, [pc, #232]	; (8000c44 <MX_TIM15_Init+0x120>)
 8000b5a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 0;
 8000b5c:	4b38      	ldr	r3, [pc, #224]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b62:	4b37      	ldr	r3, [pc, #220]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 65535;
 8000b68:	4b35      	ldr	r3, [pc, #212]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6e:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b70:	4b33      	ldr	r3, [pc, #204]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000b76:	4b32      	ldr	r3, [pc, #200]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7c:	4b30      	ldr	r3, [pc, #192]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000b82:	482f      	ldr	r0, [pc, #188]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000b84:	f003 fd3a 	bl	80045fc <HAL_TIM_PWM_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000b8e:	f000 f9bf 	bl	8000f10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b92:	2300      	movs	r3, #0
 8000b94:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4827      	ldr	r0, [pc, #156]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000ba2:	f004 fe1f 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000bac:	f000 f9b0 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000bb0:	2360      	movs	r3, #96	; 0x60
 8000bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	481a      	ldr	r0, [pc, #104]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000bd6:	f004 f91d 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000be0:	f000 f996 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000be4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000be8:	2204      	movs	r2, #4
 8000bea:	4619      	mov	r1, r3
 8000bec:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000bee:	f004 f911 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM15_Init+0xd8>
  {
    Error_Handler();
 8000bf8:	f000 f98a 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c04:	2300      	movs	r3, #0
 8000c06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000c1e:	1d3b      	adds	r3, r7, #4
 8000c20:	4619      	mov	r1, r3
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000c24:	f004 fe60 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_TIM15_Init+0x10e>
  {
    Error_Handler();
 8000c2e:	f000 f96f 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000c32:	4803      	ldr	r0, [pc, #12]	; (8000c40 <MX_TIM15_Init+0x11c>)
 8000c34:	f000 faee 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000c38:	bf00      	nop
 8000c3a:	3760      	adds	r7, #96	; 0x60
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000398 	.word	0x20000398
 8000c44:	40014000 	.word	0x40014000

08000c48 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b094      	sub	sp, #80	; 0x50
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c4e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]
 8000c5e:	615a      	str	r2, [r3, #20]
 8000c60:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c62:	463b      	mov	r3, r7
 8000c64:	2234      	movs	r2, #52	; 0x34
 8000c66:	2100      	movs	r1, #0
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f009 fb7d 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000c6e:	4b31      	ldr	r3, [pc, #196]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c70:	4a31      	ldr	r2, [pc, #196]	; (8000d38 <MX_TIM16_Init+0xf0>)
 8000c72:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8000c74:	4b2f      	ldr	r3, [pc, #188]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7a:	4b2e      	ldr	r3, [pc, #184]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8000c80:	4b2c      	ldr	r3, [pc, #176]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c86:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c88:	4b2a      	ldr	r3, [pc, #168]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000c8e:	4b29      	ldr	r3, [pc, #164]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c94:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000c9c:	f003 fbec 	bl	8004478 <HAL_TIM_Base_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000ca6:	f000 f933 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8000caa:	4822      	ldr	r0, [pc, #136]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000cac:	f003 fca6 	bl	80045fc <HAL_TIM_PWM_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000cb6:	f000 f92b 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cba:	2360      	movs	r3, #96	; 0x60
 8000cbc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cd6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cda:	2200      	movs	r2, #0
 8000cdc:	4619      	mov	r1, r3
 8000cde:	4815      	ldr	r0, [pc, #84]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000ce0:	f004 f898 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d001      	beq.n	8000cee <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 8000cea:	f000 f911 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d06:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d10:	463b      	mov	r3, r7
 8000d12:	4619      	mov	r1, r3
 8000d14:	4807      	ldr	r0, [pc, #28]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d16:	f004 fde7 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 8000d20:	f000 f8f6 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8000d24:	4803      	ldr	r0, [pc, #12]	; (8000d34 <MX_TIM16_Init+0xec>)
 8000d26:	f000 fa75 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000d2a:	bf00      	nop
 8000d2c:	3750      	adds	r7, #80	; 0x50
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200003e4 	.word	0x200003e4
 8000d38:	40014400 	.word	0x40014400

08000d3c <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b094      	sub	sp, #80	; 0x50
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d42:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]
 8000d4c:	609a      	str	r2, [r3, #8]
 8000d4e:	60da      	str	r2, [r3, #12]
 8000d50:	611a      	str	r2, [r3, #16]
 8000d52:	615a      	str	r2, [r3, #20]
 8000d54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2234      	movs	r2, #52	; 0x34
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f009 fb03 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000d62:	4b31      	ldr	r3, [pc, #196]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d64:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <MX_TIM17_Init+0xf0>)
 8000d66:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d6e:	4b2e      	ldr	r3, [pc, #184]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d7a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d7c:	4b2a      	ldr	r3, [pc, #168]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000d82:	4b29      	ldr	r3, [pc, #164]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d88:	4b27      	ldr	r3, [pc, #156]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000d8e:	4826      	ldr	r0, [pc, #152]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000d90:	f003 fb72 	bl	8004478 <HAL_TIM_Base_Init>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000d9a:	f000 f8b9 	bl	8000f10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000d9e:	4822      	ldr	r0, [pc, #136]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000da0:	f003 fc2c 	bl	80045fc <HAL_TIM_PWM_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000daa:	f000 f8b1 	bl	8000f10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000dae:	2360      	movs	r3, #96	; 0x60
 8000db0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000db2:	2300      	movs	r3, #0
 8000db4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000db6:	2300      	movs	r3, #0
 8000db8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000dce:	2200      	movs	r2, #0
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4815      	ldr	r0, [pc, #84]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000dd4:	f004 f81e 	bl	8004e14 <HAL_TIM_PWM_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000dde:	f000 f897 	bl	8000f10 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000de6:	2300      	movs	r3, #0
 8000de8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000df6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000dfa:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000e04:	463b      	mov	r3, r7
 8000e06:	4619      	mov	r1, r3
 8000e08:	4807      	ldr	r0, [pc, #28]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e0a:	f004 fd6d 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000e14:	f000 f87c 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000e18:	4803      	ldr	r0, [pc, #12]	; (8000e28 <MX_TIM17_Init+0xec>)
 8000e1a:	f000 f9fb 	bl	8001214 <HAL_TIM_MspPostInit>

}
 8000e1e:	bf00      	nop
 8000e20:	3750      	adds	r7, #80	; 0x50
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	20000430 	.word	0x20000430
 8000e2c:	40014800 	.word	0x40014800

08000e30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b088      	sub	sp, #32
 8000e34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	f107 030c 	add.w	r3, r7, #12
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
 8000e40:	609a      	str	r2, [r3, #8]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000e46:	4b2f      	ldr	r3, [pc, #188]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4a:	4a2e      	ldr	r2, [pc, #184]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e4c:	f043 0320 	orr.w	r3, r3, #32
 8000e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e52:	4b2c      	ldr	r3, [pc, #176]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e56:	f003 0320 	and.w	r3, r3, #32
 8000e5a:	60bb      	str	r3, [r7, #8]
 8000e5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5e:	4b29      	ldr	r3, [pc, #164]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e62:	4a28      	ldr	r2, [pc, #160]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e64:	f043 0301 	orr.w	r3, r3, #1
 8000e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e6a:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e6e:	f003 0301 	and.w	r3, r3, #1
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e76:	4b23      	ldr	r3, [pc, #140]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e7a:	4a22      	ldr	r2, [pc, #136]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e7c:	f043 0302 	orr.w	r3, r3, #2
 8000e80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e82:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_GPIO_Init+0xd4>)
 8000e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e86:	f003 0302 	and.w	r3, r3, #2
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSLEEP_GPIO_Port, NSLEEP_Pin, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2101      	movs	r1, #1
 8000e92:	481d      	ldr	r0, [pc, #116]	; (8000f08 <MX_GPIO_Init+0xd8>)
 8000e94:	f000 fe04 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M2_DIR_Pin|M1_DIR_Pin|M3_DIR_Pin|BLUE_LED_Pin, GPIO_PIN_RESET);
 8000e98:	2200      	movs	r2, #0
 8000e9a:	f240 4113 	movw	r1, #1043	; 0x413
 8000e9e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea2:	f000 fdfd 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSLEEP_Pin */
  GPIO_InitStruct.Pin = NSLEEP_Pin;
 8000ea6:	2301      	movs	r3, #1
 8000ea8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSLEEP_GPIO_Port, &GPIO_InitStruct);
 8000eb6:	f107 030c 	add.w	r3, r7, #12
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4812      	ldr	r0, [pc, #72]	; (8000f08 <MX_GPIO_Init+0xd8>)
 8000ebe:	f000 fc6d 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pins : M2_DIR_Pin M1_DIR_Pin M3_DIR_Pin BLUE_LED_Pin */
  GPIO_InitStruct.Pin = M2_DIR_Pin|M1_DIR_Pin|M3_DIR_Pin|BLUE_LED_Pin;
 8000ec2:	f240 4313 	movw	r3, #1043	; 0x413
 8000ec6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec8:	2301      	movs	r3, #1
 8000eca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f000 fc5d 	bl	800179c <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SENSOR_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_Pin;
 8000ee2:	2380      	movs	r3, #128	; 0x80
 8000ee4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_SENSOR_GPIO_Port, &GPIO_InitStruct);
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4805      	ldr	r0, [pc, #20]	; (8000f0c <MX_GPIO_Init+0xdc>)
 8000ef6:	f000 fc51 	bl	800179c <HAL_GPIO_Init>

}
 8000efa:	bf00      	nop
 8000efc:	3720      	adds	r7, #32
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000
 8000f08:	48001400 	.word	0x48001400
 8000f0c:	48000400 	.word	0x48000400

08000f10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f14:	b672      	cpsid	i
}
 8000f16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f18:	e7fe      	b.n	8000f18 <Error_Handler+0x8>
	...

08000f1c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f22:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <HAL_MspInit+0x44>)
 8000f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f26:	4a0e      	ldr	r2, [pc, #56]	; (8000f60 <HAL_MspInit+0x44>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2e:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <HAL_MspInit+0x44>)
 8000f30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3a:	4b09      	ldr	r3, [pc, #36]	; (8000f60 <HAL_MspInit+0x44>)
 8000f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f3e:	4a08      	ldr	r2, [pc, #32]	; (8000f60 <HAL_MspInit+0x44>)
 8000f40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f44:	6593      	str	r3, [r2, #88]	; 0x58
 8000f46:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_MspInit+0x44>)
 8000f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4e:	603b      	str	r3, [r7, #0]
 8000f50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000f52:	f002 fb95 	bl	8003680 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a55      	ldr	r2, [pc, #340]	; (80010d8 <HAL_TIM_Encoder_MspInit+0x174>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d12a      	bne.n	8000fdc <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f86:	4b55      	ldr	r3, [pc, #340]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000f88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f8a:	4a54      	ldr	r2, [pc, #336]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f90:	6613      	str	r3, [r2, #96]	; 0x60
 8000f92:	4b52      	ldr	r3, [pc, #328]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f9a:	623b      	str	r3, [r7, #32]
 8000f9c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	4b4f      	ldr	r3, [pc, #316]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa2:	4a4e      	ldr	r2, [pc, #312]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000faa:	4b4c      	ldr	r3, [pc, #304]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fae:	f003 0301 	and.w	r3, r3, #1
 8000fb2:	61fb      	str	r3, [r7, #28]
 8000fb4:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_ENC_A_Pin|M1_ENC_B_Pin;
 8000fb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000fc8:	2306      	movs	r3, #6
 8000fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f000 fbe1 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000fda:	e079      	b.n	80010d0 <HAL_TIM_Encoder_MspInit+0x16c>
  else if(htim_encoder->Instance==TIM2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fe4:	d146      	bne.n	8001074 <HAL_TIM_Encoder_MspInit+0x110>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fe6:	4b3d      	ldr	r3, [pc, #244]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fea:	4a3c      	ldr	r2, [pc, #240]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ff2:	4b3a      	ldr	r3, [pc, #232]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8000ff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffe:	4b37      	ldr	r3, [pc, #220]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001002:	4a36      	ldr	r2, [pc, #216]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	64d3      	str	r3, [r2, #76]	; 0x4c
 800100a:	4b34      	ldr	r3, [pc, #208]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 800100c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100e:	f003 0301 	and.w	r3, r3, #1
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001016:	4b31      	ldr	r3, [pc, #196]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800101a:	4a30      	ldr	r2, [pc, #192]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001022:	4b2e      	ldr	r3, [pc, #184]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_ENC_A_Pin;
 800102e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001034:	2302      	movs	r3, #2
 8001036:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001038:	2300      	movs	r3, #0
 800103a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103c:	2300      	movs	r3, #0
 800103e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001040:	2301      	movs	r3, #1
 8001042:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(M2_ENC_A_GPIO_Port, &GPIO_InitStruct);
 8001044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001048:	4619      	mov	r1, r3
 800104a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800104e:	f000 fba5 	bl	800179c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M2_ENC_B_Pin;
 8001052:	2308      	movs	r3, #8
 8001054:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001056:	2302      	movs	r3, #2
 8001058:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	2300      	movs	r3, #0
 8001060:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001062:	2301      	movs	r3, #1
 8001064:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(M2_ENC_B_GPIO_Port, &GPIO_InitStruct);
 8001066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800106a:	4619      	mov	r1, r3
 800106c:	481c      	ldr	r0, [pc, #112]	; (80010e0 <HAL_TIM_Encoder_MspInit+0x17c>)
 800106e:	f000 fb95 	bl	800179c <HAL_GPIO_Init>
}
 8001072:	e02d      	b.n	80010d0 <HAL_TIM_Encoder_MspInit+0x16c>
  else if(htim_encoder->Instance==TIM3)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a1a      	ldr	r2, [pc, #104]	; (80010e4 <HAL_TIM_Encoder_MspInit+0x180>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d128      	bne.n	80010d0 <HAL_TIM_Encoder_MspInit+0x16c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800107e:	4b17      	ldr	r3, [pc, #92]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001080:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001084:	f043 0302 	orr.w	r3, r3, #2
 8001088:	6593      	str	r3, [r2, #88]	; 0x58
 800108a:	4b14      	ldr	r3, [pc, #80]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 800108c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	4b11      	ldr	r3, [pc, #68]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	4a10      	ldr	r2, [pc, #64]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_TIM_Encoder_MspInit+0x178>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M3_ENC_A_Pin|M3_ENC_B_Pin;
 80010ae:	23c0      	movs	r3, #192	; 0xc0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010be:	2302      	movs	r3, #2
 80010c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010c6:	4619      	mov	r1, r3
 80010c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010cc:	f000 fb66 	bl	800179c <HAL_GPIO_Init>
}
 80010d0:	bf00      	nop
 80010d2:	3738      	adds	r7, #56	; 0x38
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	40012c00 	.word	0x40012c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	48000400 	.word	0x48000400
 80010e4:	40000400 	.word	0x40000400

080010e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a1c      	ldr	r2, [pc, #112]	; (8001168 <HAL_TIM_PWM_MspInit+0x80>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d10c      	bne.n	8001114 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001100:	f043 0304 	orr.w	r3, r3, #4
 8001104:	6593      	str	r3, [r2, #88]	; 0x58
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110a:	f003 0304 	and.w	r3, r3, #4
 800110e:	617b      	str	r3, [r7, #20]
 8001110:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8001112:	e022      	b.n	800115a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM8)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a15      	ldr	r2, [pc, #84]	; (8001170 <HAL_TIM_PWM_MspInit+0x88>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d10c      	bne.n	8001138 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800111e:	4b13      	ldr	r3, [pc, #76]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001120:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001122:	4a12      	ldr	r2, [pc, #72]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001124:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001128:	6613      	str	r3, [r2, #96]	; 0x60
 800112a:	4b10      	ldr	r3, [pc, #64]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 800112c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800112e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001132:	613b      	str	r3, [r7, #16]
 8001134:	693b      	ldr	r3, [r7, #16]
}
 8001136:	e010      	b.n	800115a <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM15)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0d      	ldr	r2, [pc, #52]	; (8001174 <HAL_TIM_PWM_MspInit+0x8c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d10b      	bne.n	800115a <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8001142:	4b0a      	ldr	r3, [pc, #40]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001144:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001146:	4a09      	ldr	r2, [pc, #36]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800114c:	6613      	str	r3, [r2, #96]	; 0x60
 800114e:	4b07      	ldr	r3, [pc, #28]	; (800116c <HAL_TIM_PWM_MspInit+0x84>)
 8001150:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]
}
 800115a:	bf00      	nop
 800115c:	371c      	adds	r7, #28
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	40000800 	.word	0x40000800
 800116c:	40021000 	.word	0x40021000
 8001170:	40013400 	.word	0x40013400
 8001174:	40014000 	.word	0x40014000

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4a1f      	ldr	r2, [pc, #124]	; (8001204 <HAL_TIM_Base_MspInit+0x8c>)
 8001186:	4293      	cmp	r3, r2
 8001188:	d114      	bne.n	80011b4 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800118a:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 800118c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800118e:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 8001190:	f043 0310 	orr.w	r3, r3, #16
 8001194:	6593      	str	r3, [r2, #88]	; 0x58
 8001196:	4b1c      	ldr	r3, [pc, #112]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	f003 0310 	and.w	r3, r3, #16
 800119e:	617b      	str	r3, [r7, #20]
 80011a0:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80011a2:	2200      	movs	r2, #0
 80011a4:	2100      	movs	r1, #0
 80011a6:	2036      	movs	r0, #54	; 0x36
 80011a8:	f000 fac3 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011ac:	2036      	movs	r0, #54	; 0x36
 80011ae:	f000 fada 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80011b2:	e022      	b.n	80011fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM16)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a14      	ldr	r2, [pc, #80]	; (800120c <HAL_TIM_Base_MspInit+0x94>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d10c      	bne.n	80011d8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80011be:	4b12      	ldr	r3, [pc, #72]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a11      	ldr	r2, [pc, #68]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011d2:	613b      	str	r3, [r7, #16]
 80011d4:	693b      	ldr	r3, [r7, #16]
}
 80011d6:	e010      	b.n	80011fa <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM17)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a0c      	ldr	r2, [pc, #48]	; (8001210 <HAL_TIM_Base_MspInit+0x98>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d10b      	bne.n	80011fa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80011e2:	4b09      	ldr	r3, [pc, #36]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011e6:	4a08      	ldr	r2, [pc, #32]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80011ec:	6613      	str	r3, [r2, #96]	; 0x60
 80011ee:	4b06      	ldr	r3, [pc, #24]	; (8001208 <HAL_TIM_Base_MspInit+0x90>)
 80011f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	bf00      	nop
 80011fc:	3718      	adds	r7, #24
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40001000 	.word	0x40001000
 8001208:	40021000 	.word	0x40021000
 800120c:	40014400 	.word	0x40014400
 8001210:	40014800 	.word	0x40014800

08001214 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08c      	sub	sp, #48	; 0x30
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a56      	ldr	r2, [pc, #344]	; (800138c <HAL_TIM_MspPostInit+0x178>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d11c      	bne.n	8001270 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	4b56      	ldr	r3, [pc, #344]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	4a55      	ldr	r2, [pc, #340]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 800123c:	f043 0302 	orr.w	r3, r3, #2
 8001240:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001242:	4b53      	ldr	r3, [pc, #332]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	61bb      	str	r3, [r7, #24]
 800124c:	69bb      	ldr	r3, [r7, #24]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = THR_ESC_Pin;
 800124e:	2340      	movs	r3, #64	; 0x40
 8001250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800125e:	2302      	movs	r3, #2
 8001260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THR_ESC_GPIO_Port, &GPIO_InitStruct);
 8001262:	f107 031c 	add.w	r3, r7, #28
 8001266:	4619      	mov	r1, r3
 8001268:	484a      	ldr	r0, [pc, #296]	; (8001394 <HAL_TIM_MspPostInit+0x180>)
 800126a:	f000 fa97 	bl	800179c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800126e:	e088      	b.n	8001382 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM8)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a48      	ldr	r2, [pc, #288]	; (8001398 <HAL_TIM_MspPostInit+0x184>)
 8001276:	4293      	cmp	r3, r2
 8001278:	d11d      	bne.n	80012b6 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800127a:	4b45      	ldr	r3, [pc, #276]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	4a44      	ldr	r2, [pc, #272]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001280:	f043 0302 	orr.w	r3, r3, #2
 8001284:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001286:	4b42      	ldr	r3, [pc, #264]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2_PWM_Pin;
 8001292:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001298:	2302      	movs	r3, #2
 800129a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129c:	2300      	movs	r3, #0
 800129e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a0:	2300      	movs	r3, #0
 80012a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM8;
 80012a4:	230a      	movs	r3, #10
 80012a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(M2_PWM_GPIO_Port, &GPIO_InitStruct);
 80012a8:	f107 031c 	add.w	r3, r7, #28
 80012ac:	4619      	mov	r1, r3
 80012ae:	4839      	ldr	r0, [pc, #228]	; (8001394 <HAL_TIM_MspPostInit+0x180>)
 80012b0:	f000 fa74 	bl	800179c <HAL_GPIO_Init>
}
 80012b4:	e065      	b.n	8001382 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM15)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	4a38      	ldr	r2, [pc, #224]	; (800139c <HAL_TIM_MspPostInit+0x188>)
 80012bc:	4293      	cmp	r3, r2
 80012be:	d11d      	bne.n	80012fc <HAL_TIM_MspPostInit+0xe8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a32      	ldr	r2, [pc, #200]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 80012c6:	f043 0301 	orr.w	r3, r3, #1
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b30      	ldr	r3, [pc, #192]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0301 	and.w	r3, r3, #1
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M1_PWM_Pin|M3_PWM_Pin;
 80012d8:	230c      	movs	r3, #12
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 80012e8:	2309      	movs	r3, #9
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012f6:	f000 fa51 	bl	800179c <HAL_GPIO_Init>
}
 80012fa:	e042      	b.n	8001382 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM16)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a27      	ldr	r2, [pc, #156]	; (80013a0 <HAL_TIM_MspPostInit+0x18c>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d11c      	bne.n	8001340 <HAL_TIM_MspPostInit+0x12c>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	4b22      	ldr	r3, [pc, #136]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	4a21      	ldr	r2, [pc, #132]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001312:	4b1f      	ldr	r3, [pc, #124]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = THR_SERVO_Pin;
 800131e:	2310      	movs	r3, #16
 8001320:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 800132e:	2301      	movs	r3, #1
 8001330:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THR_SERVO_GPIO_Port, &GPIO_InitStruct);
 8001332:	f107 031c 	add.w	r3, r7, #28
 8001336:	4619      	mov	r1, r3
 8001338:	4816      	ldr	r0, [pc, #88]	; (8001394 <HAL_TIM_MspPostInit+0x180>)
 800133a:	f000 fa2f 	bl	800179c <HAL_GPIO_Init>
}
 800133e:	e020      	b.n	8001382 <HAL_TIM_MspPostInit+0x16e>
  else if(htim->Instance==TIM17)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	4a17      	ldr	r2, [pc, #92]	; (80013a4 <HAL_TIM_MspPostInit+0x190>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d11b      	bne.n	8001382 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	4a10      	ldr	r2, [pc, #64]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001350:	f043 0302 	orr.w	r3, r3, #2
 8001354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <HAL_TIM_MspPostInit+0x17c>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	f003 0302 	and.w	r3, r3, #2
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = THR_ANGLE_Pin;
 8001362:	2320      	movs	r3, #32
 8001364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8001372:	230a      	movs	r3, #10
 8001374:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(THR_ANGLE_GPIO_Port, &GPIO_InitStruct);
 8001376:	f107 031c 	add.w	r3, r7, #28
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <HAL_TIM_MspPostInit+0x180>)
 800137e:	f000 fa0d 	bl	800179c <HAL_GPIO_Init>
}
 8001382:	bf00      	nop
 8001384:	3730      	adds	r7, #48	; 0x30
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40000800 	.word	0x40000800
 8001390:	40021000 	.word	0x40021000
 8001394:	48000400 	.word	0x48000400
 8001398:	40013400 	.word	0x40013400
 800139c:	40014000 	.word	0x40014000
 80013a0:	40014400 	.word	0x40014400
 80013a4:	40014800 	.word	0x40014800

080013a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013ac:	e7fe      	b.n	80013ac <NMI_Handler+0x4>

080013ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ae:	b480      	push	{r7}
 80013b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013b2:	e7fe      	b.n	80013b2 <HardFault_Handler+0x4>

080013b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013b4:	b480      	push	{r7}
 80013b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013b8:	e7fe      	b.n	80013b8 <MemManage_Handler+0x4>

080013ba <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ba:	b480      	push	{r7}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013be:	e7fe      	b.n	80013be <BusFault_Handler+0x4>

080013c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013c4:	e7fe      	b.n	80013c4 <UsageFault_Handler+0x4>

080013c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013c6:	b480      	push	{r7}
 80013c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013ca:	bf00      	nop
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr

080013e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013f4:	f000 f8a4 	bl	8001540 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013f8:	bf00      	nop
 80013fa:	bd80      	pop	{r7, pc}

080013fc <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001400:	4802      	ldr	r0, [pc, #8]	; (800140c <USB_LP_IRQHandler+0x10>)
 8001402:	f000 fc6c 	bl	8001cde <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	20001164 	.word	0x20001164

08001410 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001414:	4802      	ldr	r0, [pc, #8]	; (8001420 <TIM6_DAC_IRQHandler+0x10>)
 8001416:	f003 fb7d 	bl	8004b14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	20000300 	.word	0x20000300

08001424 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <SystemInit+0x20>)
 800142a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800142e:	4a05      	ldr	r2, [pc, #20]	; (8001444 <SystemInit+0x20>)
 8001430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001438:	bf00      	nop
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr
 8001442:	bf00      	nop
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001448:	480d      	ldr	r0, [pc, #52]	; (8001480 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800144a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490e      	ldr	r1, [pc, #56]	; (8001488 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0b      	ldr	r2, [pc, #44]	; (8001490 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0b      	ldr	r4, [pc, #44]	; (8001494 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001472:	f7ff ffd7 	bl	8001424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001476:	f008 ff45 	bl	800a304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800147a:	f7ff f827 	bl	80004cc <main>

0800147e <LoopForever>:

LoopForever:
    b LoopForever
 800147e:	e7fe      	b.n	800147e <LoopForever>
  ldr   r0, =_estack
 8001480:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001484:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001488:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 800148c:	0800a3f0 	.word	0x0800a3f0
  ldr r2, =_sbss
 8001490:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8001494:	20001678 	.word	0x20001678

08001498 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001498:	e7fe      	b.n	8001498 <ADC1_2_IRQHandler>

0800149a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800149a:	b580      	push	{r7, lr}
 800149c:	b082      	sub	sp, #8
 800149e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a4:	2003      	movs	r0, #3
 80014a6:	f000 f939 	bl	800171c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014aa:	200f      	movs	r0, #15
 80014ac:	f000 f80e 	bl	80014cc <HAL_InitTick>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
 80014b8:	71fb      	strb	r3, [r7, #7]
 80014ba:	e001      	b.n	80014c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014bc:	f7ff fd2e 	bl	8000f1c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c0:	79fb      	ldrb	r3, [r7, #7]

}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
	...

080014cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80014d4:	2300      	movs	r3, #0
 80014d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <HAL_InitTick+0x68>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d022      	beq.n	8001526 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80014e0:	4b15      	ldr	r3, [pc, #84]	; (8001538 <HAL_InitTick+0x6c>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	4b13      	ldr	r3, [pc, #76]	; (8001534 <HAL_InitTick+0x68>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80014ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80014f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014f4:	4618      	mov	r0, r3
 80014f6:	f000 f944 	bl	8001782 <HAL_SYSTICK_Config>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d10f      	bne.n	8001520 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b0f      	cmp	r3, #15
 8001504:	d809      	bhi.n	800151a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001506:	2200      	movs	r2, #0
 8001508:	6879      	ldr	r1, [r7, #4]
 800150a:	f04f 30ff 	mov.w	r0, #4294967295
 800150e:	f000 f910 	bl	8001732 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <HAL_InitTick+0x70>)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e007      	b.n	800152a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	73fb      	strb	r3, [r7, #15]
 800151e:	e004      	b.n	800152a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	73fb      	strb	r3, [r7, #15]
 8001524:	e001      	b.n	800152a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001526:	2301      	movs	r3, #1
 8001528:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800152a:	7bfb      	ldrb	r3, [r7, #15]
}
 800152c:	4618      	mov	r0, r3
 800152e:	3710      	adds	r7, #16
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}
 8001534:	20000038 	.word	0x20000038
 8001538:	20000030 	.word	0x20000030
 800153c:	20000034 	.word	0x20000034

08001540 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001544:	4b05      	ldr	r3, [pc, #20]	; (800155c <HAL_IncTick+0x1c>)
 8001546:	681a      	ldr	r2, [r3, #0]
 8001548:	4b05      	ldr	r3, [pc, #20]	; (8001560 <HAL_IncTick+0x20>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4413      	add	r3, r2
 800154e:	4a03      	ldr	r2, [pc, #12]	; (800155c <HAL_IncTick+0x1c>)
 8001550:	6013      	str	r3, [r2, #0]
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	2000048c 	.word	0x2000048c
 8001560:	20000038 	.word	0x20000038

08001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return uwTick;
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <HAL_GetTick+0x14>)
 800156a:	681b      	ldr	r3, [r3, #0]
}
 800156c:	4618      	mov	r0, r3
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	2000048c 	.word	0x2000048c

0800157c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800158c:	4b0c      	ldr	r3, [pc, #48]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001592:	68ba      	ldr	r2, [r7, #8]
 8001594:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001598:	4013      	ands	r3, r2
 800159a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	60d3      	str	r3, [r2, #12]
}
 80015b4:	bf00      	nop
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c4:	b480      	push	{r7}
 80015c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015c8:	4b04      	ldr	r3, [pc, #16]	; (80015dc <__NVIC_GetPriorityGrouping+0x18>)
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	0a1b      	lsrs	r3, r3, #8
 80015ce:	f003 0307 	and.w	r3, r3, #7
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr
 80015dc:	e000ed00 	.word	0xe000ed00

080015e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	4603      	mov	r3, r0
 80015e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	db0b      	blt.n	800160a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	f003 021f 	and.w	r2, r3, #31
 80015f8:	4907      	ldr	r1, [pc, #28]	; (8001618 <__NVIC_EnableIRQ+0x38>)
 80015fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fe:	095b      	lsrs	r3, r3, #5
 8001600:	2001      	movs	r0, #1
 8001602:	fa00 f202 	lsl.w	r2, r0, r2
 8001606:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000e100 	.word	0xe000e100

0800161c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	6039      	str	r1, [r7, #0]
 8001626:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162c:	2b00      	cmp	r3, #0
 800162e:	db0a      	blt.n	8001646 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	b2da      	uxtb	r2, r3
 8001634:	490c      	ldr	r1, [pc, #48]	; (8001668 <__NVIC_SetPriority+0x4c>)
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	b2d2      	uxtb	r2, r2
 800163e:	440b      	add	r3, r1
 8001640:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001644:	e00a      	b.n	800165c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	b2da      	uxtb	r2, r3
 800164a:	4908      	ldr	r1, [pc, #32]	; (800166c <__NVIC_SetPriority+0x50>)
 800164c:	79fb      	ldrb	r3, [r7, #7]
 800164e:	f003 030f 	and.w	r3, r3, #15
 8001652:	3b04      	subs	r3, #4
 8001654:	0112      	lsls	r2, r2, #4
 8001656:	b2d2      	uxtb	r2, r2
 8001658:	440b      	add	r3, r1
 800165a:	761a      	strb	r2, [r3, #24]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	e000e100 	.word	0xe000e100
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001670:	b480      	push	{r7}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
 8001676:	60f8      	str	r0, [r7, #12]
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	f1c3 0307 	rsb	r3, r3, #7
 800168a:	2b04      	cmp	r3, #4
 800168c:	bf28      	it	cs
 800168e:	2304      	movcs	r3, #4
 8001690:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	3304      	adds	r3, #4
 8001696:	2b06      	cmp	r3, #6
 8001698:	d902      	bls.n	80016a0 <NVIC_EncodePriority+0x30>
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	3b03      	subs	r3, #3
 800169e:	e000      	b.n	80016a2 <NVIC_EncodePriority+0x32>
 80016a0:	2300      	movs	r3, #0
 80016a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a4:	f04f 32ff 	mov.w	r2, #4294967295
 80016a8:	69bb      	ldr	r3, [r7, #24]
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	43da      	mvns	r2, r3
 80016b0:	68bb      	ldr	r3, [r7, #8]
 80016b2:	401a      	ands	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016b8:	f04f 31ff 	mov.w	r1, #4294967295
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa01 f303 	lsl.w	r3, r1, r3
 80016c2:	43d9      	mvns	r1, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c8:	4313      	orrs	r3, r2
         );
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	3724      	adds	r7, #36	; 0x24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
	...

080016d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	3b01      	subs	r3, #1
 80016e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016e8:	d301      	bcc.n	80016ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ea:	2301      	movs	r3, #1
 80016ec:	e00f      	b.n	800170e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016ee:	4a0a      	ldr	r2, [pc, #40]	; (8001718 <SysTick_Config+0x40>)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016f6:	210f      	movs	r1, #15
 80016f8:	f04f 30ff 	mov.w	r0, #4294967295
 80016fc:	f7ff ff8e 	bl	800161c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001700:	4b05      	ldr	r3, [pc, #20]	; (8001718 <SysTick_Config+0x40>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001706:	4b04      	ldr	r3, [pc, #16]	; (8001718 <SysTick_Config+0x40>)
 8001708:	2207      	movs	r2, #7
 800170a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	e000e010 	.word	0xe000e010

0800171c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff29 	bl	800157c <__NVIC_SetPriorityGrouping>
}
 800172a:	bf00      	nop
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}

08001732 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001732:	b580      	push	{r7, lr}
 8001734:	b086      	sub	sp, #24
 8001736:	af00      	add	r7, sp, #0
 8001738:	4603      	mov	r3, r0
 800173a:	60b9      	str	r1, [r7, #8]
 800173c:	607a      	str	r2, [r7, #4]
 800173e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001740:	f7ff ff40 	bl	80015c4 <__NVIC_GetPriorityGrouping>
 8001744:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	68b9      	ldr	r1, [r7, #8]
 800174a:	6978      	ldr	r0, [r7, #20]
 800174c:	f7ff ff90 	bl	8001670 <NVIC_EncodePriority>
 8001750:	4602      	mov	r2, r0
 8001752:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001756:	4611      	mov	r1, r2
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff ff5f 	bl	800161c <__NVIC_SetPriority>
}
 800175e:	bf00      	nop
 8001760:	3718      	adds	r7, #24
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	b082      	sub	sp, #8
 800176a:	af00      	add	r7, sp, #0
 800176c:	4603      	mov	r3, r0
 800176e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001770:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff ff33 	bl	80015e0 <__NVIC_EnableIRQ>
}
 800177a:	bf00      	nop
 800177c:	3708      	adds	r7, #8
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}

08001782 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001782:	b580      	push	{r7, lr}
 8001784:	b082      	sub	sp, #8
 8001786:	af00      	add	r7, sp, #0
 8001788:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f7ff ffa4 	bl	80016d8 <SysTick_Config>
 8001790:	4603      	mov	r3, r0
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800179c:	b480      	push	{r7}
 800179e:	b087      	sub	sp, #28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
 80017a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017a6:	2300      	movs	r3, #0
 80017a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80017aa:	e15a      	b.n	8001a62 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	2101      	movs	r1, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	fa01 f303 	lsl.w	r3, r1, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	f000 814c 	beq.w	8001a5c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	f003 0303 	and.w	r3, r3, #3
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d005      	beq.n	80017dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d130      	bne.n	800183e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	689b      	ldr	r3, [r3, #8]
 80017e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	2203      	movs	r2, #3
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	43db      	mvns	r3, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4013      	ands	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	68da      	ldr	r2, [r3, #12]
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	005b      	lsls	r3, r3, #1
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4313      	orrs	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	693a      	ldr	r2, [r7, #16]
 800180a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001812:	2201      	movs	r2, #1
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	fa02 f303 	lsl.w	r3, r2, r3
 800181a:	43db      	mvns	r3, r3
 800181c:	693a      	ldr	r2, [r7, #16]
 800181e:	4013      	ands	r3, r2
 8001820:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	091b      	lsrs	r3, r3, #4
 8001828:	f003 0201 	and.w	r2, r3, #1
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	4313      	orrs	r3, r2
 8001836:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f003 0303 	and.w	r3, r3, #3
 8001846:	2b03      	cmp	r3, #3
 8001848:	d017      	beq.n	800187a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	68db      	ldr	r3, [r3, #12]
 800184e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	2203      	movs	r2, #3
 8001856:	fa02 f303 	lsl.w	r3, r2, r3
 800185a:	43db      	mvns	r3, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4013      	ands	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	689a      	ldr	r2, [r3, #8]
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	005b      	lsls	r3, r3, #1
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	693a      	ldr	r2, [r7, #16]
 8001870:	4313      	orrs	r3, r2
 8001872:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	693a      	ldr	r2, [r7, #16]
 8001878:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	2b02      	cmp	r3, #2
 8001884:	d123      	bne.n	80018ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	08da      	lsrs	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	3208      	adds	r2, #8
 800188e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	220f      	movs	r2, #15
 800189e:	fa02 f303 	lsl.w	r3, r2, r3
 80018a2:	43db      	mvns	r3, r3
 80018a4:	693a      	ldr	r2, [r7, #16]
 80018a6:	4013      	ands	r3, r2
 80018a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	691a      	ldr	r2, [r3, #16]
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f003 0307 	and.w	r3, r3, #7
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ba:	693a      	ldr	r2, [r7, #16]
 80018bc:	4313      	orrs	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	08da      	lsrs	r2, r3, #3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3208      	adds	r2, #8
 80018c8:	6939      	ldr	r1, [r7, #16]
 80018ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	2203      	movs	r2, #3
 80018da:	fa02 f303 	lsl.w	r3, r2, r3
 80018de:	43db      	mvns	r3, r3
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	4013      	ands	r3, r2
 80018e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f003 0203 	and.w	r2, r3, #3
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	005b      	lsls	r3, r3, #1
 80018f2:	fa02 f303 	lsl.w	r3, r2, r3
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 80a6 	beq.w	8001a5c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001910:	4b5b      	ldr	r3, [pc, #364]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 8001912:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001914:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 8001916:	f043 0301 	orr.w	r3, r3, #1
 800191a:	6613      	str	r3, [r2, #96]	; 0x60
 800191c:	4b58      	ldr	r3, [pc, #352]	; (8001a80 <HAL_GPIO_Init+0x2e4>)
 800191e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001920:	f003 0301 	and.w	r3, r3, #1
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001928:	4a56      	ldr	r2, [pc, #344]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	f003 0303 	and.w	r3, r3, #3
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	220f      	movs	r2, #15
 8001940:	fa02 f303 	lsl.w	r3, r2, r3
 8001944:	43db      	mvns	r3, r3
 8001946:	693a      	ldr	r2, [r7, #16]
 8001948:	4013      	ands	r3, r2
 800194a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001952:	d01f      	beq.n	8001994 <HAL_GPIO_Init+0x1f8>
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x2ec>)
 8001958:	4293      	cmp	r3, r2
 800195a:	d019      	beq.n	8001990 <HAL_GPIO_Init+0x1f4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x2f0>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d013      	beq.n	800198c <HAL_GPIO_Init+0x1f0>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_GPIO_Init+0x2f4>)
 8001968:	4293      	cmp	r3, r2
 800196a:	d00d      	beq.n	8001988 <HAL_GPIO_Init+0x1ec>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	4a49      	ldr	r2, [pc, #292]	; (8001a94 <HAL_GPIO_Init+0x2f8>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d007      	beq.n	8001984 <HAL_GPIO_Init+0x1e8>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	4a48      	ldr	r2, [pc, #288]	; (8001a98 <HAL_GPIO_Init+0x2fc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d101      	bne.n	8001980 <HAL_GPIO_Init+0x1e4>
 800197c:	2305      	movs	r3, #5
 800197e:	e00a      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001980:	2306      	movs	r3, #6
 8001982:	e008      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001984:	2304      	movs	r3, #4
 8001986:	e006      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001988:	2303      	movs	r3, #3
 800198a:	e004      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 800198c:	2302      	movs	r3, #2
 800198e:	e002      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001990:	2301      	movs	r3, #1
 8001992:	e000      	b.n	8001996 <HAL_GPIO_Init+0x1fa>
 8001994:	2300      	movs	r3, #0
 8001996:	697a      	ldr	r2, [r7, #20]
 8001998:	f002 0203 	and.w	r2, r2, #3
 800199c:	0092      	lsls	r2, r2, #2
 800199e:	4093      	lsls	r3, r2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019a6:	4937      	ldr	r1, [pc, #220]	; (8001a84 <HAL_GPIO_Init+0x2e8>)
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	089b      	lsrs	r3, r3, #2
 80019ac:	3302      	adds	r3, #2
 80019ae:	693a      	ldr	r2, [r7, #16]
 80019b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019b4:	4b39      	ldr	r3, [pc, #228]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019b6:	689b      	ldr	r3, [r3, #8]
 80019b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	43db      	mvns	r3, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4013      	ands	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80019d0:	693a      	ldr	r2, [r7, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019d8:	4a30      	ldr	r2, [pc, #192]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019de:	4b2f      	ldr	r3, [pc, #188]	; (8001a9c <HAL_GPIO_Init+0x300>)
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43db      	mvns	r3, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4013      	ands	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a02:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	43db      	mvns	r3, r3
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4013      	ands	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4313      	orrs	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a2c:	4a1b      	ldr	r2, [pc, #108]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001a32:	4b1a      	ldr	r3, [pc, #104]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	43db      	mvns	r3, r3
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a56:	4a11      	ldr	r2, [pc, #68]	; (8001a9c <HAL_GPIO_Init+0x300>)
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a5c:	697b      	ldr	r3, [r7, #20]
 8001a5e:	3301      	adds	r3, #1
 8001a60:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	fa22 f303 	lsr.w	r3, r2, r3
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	f47f ae9d 	bne.w	80017ac <HAL_GPIO_Init+0x10>
  }
}
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
 8001a76:	371c      	adds	r7, #28
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	40021000 	.word	0x40021000
 8001a84:	40010000 	.word	0x40010000
 8001a88:	48000400 	.word	0x48000400
 8001a8c:	48000800 	.word	0x48000800
 8001a90:	48000c00 	.word	0x48000c00
 8001a94:	48001000 	.word	0x48001000
 8001a98:	48001400 	.word	0x48001400
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001ad2:	b08b      	sub	sp, #44	; 0x2c
 8001ad4:	af06      	add	r7, sp, #24
 8001ad6:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0d7      	b.n	8001c92 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d106      	bne.n	8001afc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f008 f8fe 	bl	8009cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2203      	movs	r2, #3
 8001b00:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 ffea 	bl	8005ae2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b0e:	2300      	movs	r3, #0
 8001b10:	73fb      	strb	r3, [r7, #15]
 8001b12:	e04c      	b.n	8001bae <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	1c5a      	adds	r2, r3, #1
 8001b1a:	4613      	mov	r3, r2
 8001b1c:	009b      	lsls	r3, r3, #2
 8001b1e:	4413      	add	r3, r2
 8001b20:	00db      	lsls	r3, r3, #3
 8001b22:	440b      	add	r3, r1
 8001b24:	3301      	adds	r3, #1
 8001b26:	2201      	movs	r2, #1
 8001b28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	6879      	ldr	r1, [r7, #4]
 8001b2e:	1c5a      	adds	r2, r3, #1
 8001b30:	4613      	mov	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4413      	add	r3, r2
 8001b36:	00db      	lsls	r3, r3, #3
 8001b38:	440b      	add	r3, r1
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b3e:	7bfa      	ldrb	r2, [r7, #15]
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	b298      	uxth	r0, r3
 8001b44:	6879      	ldr	r1, [r7, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	440b      	add	r3, r1
 8001b50:	3336      	adds	r3, #54	; 0x36
 8001b52:	4602      	mov	r2, r0
 8001b54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b56:	7bfb      	ldrb	r3, [r7, #15]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	4613      	mov	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	4413      	add	r3, r2
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	440b      	add	r3, r1
 8001b66:	3303      	adds	r3, #3
 8001b68:	2200      	movs	r2, #0
 8001b6a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b6c:	7bfa      	ldrb	r2, [r7, #15]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	00db      	lsls	r3, r3, #3
 8001b78:	440b      	add	r3, r1
 8001b7a:	3338      	adds	r3, #56	; 0x38
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b80:	7bfa      	ldrb	r2, [r7, #15]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	4413      	add	r3, r2
 8001b8a:	00db      	lsls	r3, r3, #3
 8001b8c:	440b      	add	r3, r1
 8001b8e:	333c      	adds	r3, #60	; 0x3c
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b94:	7bfa      	ldrb	r2, [r7, #15]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	009b      	lsls	r3, r3, #2
 8001b9c:	4413      	add	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3340      	adds	r3, #64	; 0x40
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
 8001baa:	3301      	adds	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	7bfa      	ldrb	r2, [r7, #15]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d3ad      	bcc.n	8001b14 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bb8:	2300      	movs	r3, #0
 8001bba:	73fb      	strb	r3, [r7, #15]
 8001bbc:	e044      	b.n	8001c48 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001bbe:	7bfa      	ldrb	r2, [r7, #15]
 8001bc0:	6879      	ldr	r1, [r7, #4]
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	4413      	add	r3, r2
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	440b      	add	r3, r1
 8001bcc:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bd4:	7bfa      	ldrb	r2, [r7, #15]
 8001bd6:	6879      	ldr	r1, [r7, #4]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	00db      	lsls	r3, r3, #3
 8001be0:	440b      	add	r3, r1
 8001be2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001be6:	7bfa      	ldrb	r2, [r7, #15]
 8001be8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bea:	7bfa      	ldrb	r2, [r7, #15]
 8001bec:	6879      	ldr	r1, [r7, #4]
 8001bee:	4613      	mov	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	4413      	add	r3, r2
 8001bf4:	00db      	lsls	r3, r3, #3
 8001bf6:	440b      	add	r3, r1
 8001bf8:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001c00:	7bfa      	ldrb	r2, [r7, #15]
 8001c02:	6879      	ldr	r1, [r7, #4]
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	440b      	add	r3, r1
 8001c0e:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	4613      	mov	r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	4413      	add	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	440b      	add	r3, r1
 8001c24:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001c28:	2200      	movs	r2, #0
 8001c2a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c2c:	7bfa      	ldrb	r2, [r7, #15]
 8001c2e:	6879      	ldr	r1, [r7, #4]
 8001c30:	4613      	mov	r3, r2
 8001c32:	009b      	lsls	r3, r3, #2
 8001c34:	4413      	add	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	440b      	add	r3, r1
 8001c3a:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c42:	7bfb      	ldrb	r3, [r7, #15]
 8001c44:	3301      	adds	r3, #1
 8001c46:	73fb      	strb	r3, [r7, #15]
 8001c48:	7bfa      	ldrb	r2, [r7, #15]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d3b5      	bcc.n	8001bbe <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	687e      	ldr	r6, [r7, #4]
 8001c5a:	466d      	mov	r5, sp
 8001c5c:	f106 0410 	add.w	r4, r6, #16
 8001c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c64:	6823      	ldr	r3, [r4, #0]
 8001c66:	602b      	str	r3, [r5, #0]
 8001c68:	1d33      	adds	r3, r6, #4
 8001c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c6c:	6838      	ldr	r0, [r7, #0]
 8001c6e:	f003 ff53 	bl	8005b18 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69db      	ldr	r3, [r3, #28]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d102      	bne.n	8001c90 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f001 fc29 	bl	80034e2 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3714      	adds	r7, #20
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ca8:	2b01      	cmp	r3, #1
 8001caa:	d101      	bne.n	8001cb0 <HAL_PCD_Start+0x16>
 8001cac:	2302      	movs	r3, #2
 8001cae:	e012      	b.n	8001cd6 <HAL_PCD_Start+0x3c>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 fef9 	bl	8005ab4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f006 f912 	bl	8007ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b084      	sub	sp, #16
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f006 f917 	bl	8007f1e <USB_ReadInterrupts>
 8001cf0:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001cfc:	6878      	ldr	r0, [r7, #4]
 8001cfe:	f000 fb26 	bl	800234e <PCD_EP_ISR_Handler>

    return;
 8001d02:	e110      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d013      	beq.n	8001d36 <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d16:	b29a      	uxth	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d20:	b292      	uxth	r2, r2
 8001d22:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001d26:	6878      	ldr	r0, [r7, #4]
 8001d28:	f008 f877 	bl	8009e1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	f000 f8fc 	bl	8001f2c <HAL_PCD_SetAddress>

    return;
 8001d34:	e0f7      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d00c      	beq.n	8001d5a <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001d52:	b292      	uxth	r2, r2
 8001d54:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d58:	e0e5      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00c      	beq.n	8001d7e <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001d6c:	b29a      	uxth	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d76:	b292      	uxth	r2, r2
 8001d78:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001d7c:	e0d3      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d034      	beq.n	8001df2 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f022 0204 	bic.w	r2, r2, #4
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f022 0208 	bic.w	r2, r2, #8
 8001db2:	b292      	uxth	r2, r2
 8001db4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d107      	bne.n	8001dd2 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001dca:	2100      	movs	r1, #0
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	f008 fa19 	bl	800a204 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001dd2:	6878      	ldr	r0, [r7, #4]
 8001dd4:	f008 f85a 	bl	8009e8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001de0:	b29a      	uxth	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001dea:	b292      	uxth	r2, r2
 8001dec:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001df0:	e099      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d027      	beq.n	8001e4c <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e04:	b29a      	uxth	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f042 0208 	orr.w	r2, r2, #8
 8001e0e:	b292      	uxth	r2, r2
 8001e10:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e1c:	b29a      	uxth	r2, r3
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e26:	b292      	uxth	r2, r2
 8001e28:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e34:	b29a      	uxth	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f042 0204 	orr.w	r2, r2, #4
 8001e3e:	b292      	uxth	r2, r2
 8001e40:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f008 f807 	bl	8009e58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001e4a:	e06c      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d040      	beq.n	8001ed8 <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e68:	b292      	uxth	r2, r2
 8001e6a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d12b      	bne.n	8001ed0 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0204 	orr.w	r2, r2, #4
 8001e8a:	b292      	uxth	r2, r2
 8001e8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001e98:	b29a      	uxth	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0208 	orr.w	r2, r2, #8
 8001ea2:	b292      	uxth	r2, r2
 8001ea4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2201      	movs	r2, #1
 8001eac:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	089b      	lsrs	r3, r3, #2
 8001ebc:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f008 f99b 	bl	800a204 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001ece:	e02a      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f007 ffc1 	bl	8009e58 <HAL_PCD_SuspendCallback>
    return;
 8001ed6:	e026      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00f      	beq.n	8001f02 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ef4:	b292      	uxth	r2, r2
 8001ef6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f007 ff7f 	bl	8009dfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001f00:	e011      	b.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d00c      	beq.n	8001f26 <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001f14:	b29a      	uxth	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f1e:	b292      	uxth	r2, r2
 8001f20:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001f24:	bf00      	nop
  }
}
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	460b      	mov	r3, r1
 8001f36:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d101      	bne.n	8001f46 <HAL_PCD_SetAddress+0x1a>
 8001f42:	2302      	movs	r3, #2
 8001f44:	e013      	b.n	8001f6e <HAL_PCD_SetAddress+0x42>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2201      	movs	r2, #1
 8001f4a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	78fa      	ldrb	r2, [r7, #3]
 8001f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	78fa      	ldrb	r2, [r7, #3]
 8001f5c:	4611      	mov	r1, r2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f005 ffb2 	bl	8007ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3708      	adds	r7, #8
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b084      	sub	sp, #16
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
 8001f7e:	4608      	mov	r0, r1
 8001f80:	4611      	mov	r1, r2
 8001f82:	461a      	mov	r2, r3
 8001f84:	4603      	mov	r3, r0
 8001f86:	70fb      	strb	r3, [r7, #3]
 8001f88:	460b      	mov	r3, r1
 8001f8a:	803b      	strh	r3, [r7, #0]
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001f90:	2300      	movs	r3, #0
 8001f92:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001f94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da0e      	bge.n	8001fba <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f9c:	78fb      	ldrb	r3, [r7, #3]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	1c5a      	adds	r2, r3, #1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	4413      	add	r3, r2
 8001faa:	00db      	lsls	r3, r3, #3
 8001fac:	687a      	ldr	r2, [r7, #4]
 8001fae:	4413      	add	r3, r2
 8001fb0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	705a      	strb	r2, [r3, #1]
 8001fb8:	e00e      	b.n	8001fd8 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fba:	78fb      	ldrb	r3, [r7, #3]
 8001fbc:	f003 0207 	and.w	r2, r3, #7
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	4413      	add	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	4413      	add	r3, r2
 8001fd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	b2da      	uxtb	r2, r3
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001fe4:	883a      	ldrh	r2, [r7, #0]
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	78ba      	ldrb	r2, [r7, #2]
 8001fee:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	785b      	ldrb	r3, [r3, #1]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	b29a      	uxth	r2, r3
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002002:	78bb      	ldrb	r3, [r7, #2]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d102      	bne.n	800200e <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2200      	movs	r2, #0
 800200c:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_PCD_EP_Open+0xa6>
 8002018:	2302      	movs	r3, #2
 800201a:	e00e      	b.n	800203a <HAL_PCD_EP_Open+0xc4>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	f003 fd96 	bl	8005b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8002038:	7afb      	ldrb	r3, [r7, #11]
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b084      	sub	sp, #16
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
 800204a:	460b      	mov	r3, r1
 800204c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800204e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002052:	2b00      	cmp	r3, #0
 8002054:	da0e      	bge.n	8002074 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002056:	78fb      	ldrb	r3, [r7, #3]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	1c5a      	adds	r2, r3, #1
 800205e:	4613      	mov	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4413      	add	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	705a      	strb	r2, [r3, #1]
 8002072:	e00e      	b.n	8002092 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	f003 0207 	and.w	r2, r3, #7
 800207a:	4613      	mov	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	4413      	add	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2200      	movs	r2, #0
 8002090:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	b2da      	uxtb	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80020a4:	2b01      	cmp	r3, #1
 80020a6:	d101      	bne.n	80020ac <HAL_PCD_EP_Close+0x6a>
 80020a8:	2302      	movs	r3, #2
 80020aa:	e00e      	b.n	80020ca <HAL_PCD_EP_Close+0x88>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2201      	movs	r2, #1
 80020b0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	68f9      	ldr	r1, [r7, #12]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f004 f8e2 	bl	8006284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80020c8:	2300      	movs	r3, #0
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	3710      	adds	r7, #16
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b086      	sub	sp, #24
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	607a      	str	r2, [r7, #4]
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	460b      	mov	r3, r1
 80020e0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020e2:	7afb      	ldrb	r3, [r7, #11]
 80020e4:	f003 0207 	and.w	r2, r3, #7
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2200      	movs	r2, #0
 8002110:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002112:	7afb      	ldrb	r3, [r7, #11]
 8002114:	f003 0307 	and.w	r3, r3, #7
 8002118:	b2da      	uxtb	r2, r3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800211e:	7afb      	ldrb	r3, [r7, #11]
 8002120:	f003 0307 	and.w	r3, r3, #7
 8002124:	2b00      	cmp	r3, #0
 8002126:	d106      	bne.n	8002136 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6979      	ldr	r1, [r7, #20]
 800212e:	4618      	mov	r0, r3
 8002130:	f004 fa95 	bl	800665e <USB_EPStartXfer>
 8002134:	e005      	b.n	8002142 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6979      	ldr	r1, [r7, #20]
 800213c:	4618      	mov	r0, r3
 800213e:	f004 fa8e 	bl	800665e <USB_EPStartXfer>
  }

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3718      	adds	r7, #24
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
 8002154:	460b      	mov	r3, r1
 8002156:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f003 0207 	and.w	r2, r3, #7
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	440b      	add	r3, r1
 800216a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800216e:	681b      	ldr	r3, [r3, #0]
}
 8002170:	4618      	mov	r0, r3
 8002172:	370c      	adds	r7, #12
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	607a      	str	r2, [r7, #4]
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	460b      	mov	r3, r1
 800218a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800218c:	7afb      	ldrb	r3, [r7, #11]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	1c5a      	adds	r2, r3, #1
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	00db      	lsls	r3, r3, #3
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	4413      	add	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	2201      	movs	r2, #1
 80021b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	2200      	movs	r2, #0
 80021c0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	2201      	movs	r2, #1
 80021c6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80021c8:	7afb      	ldrb	r3, [r7, #11]
 80021ca:	f003 0307 	and.w	r3, r3, #7
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	697b      	ldr	r3, [r7, #20]
 80021d2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80021d4:	7afb      	ldrb	r3, [r7, #11]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d106      	bne.n	80021ec <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6979      	ldr	r1, [r7, #20]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f004 fa3a 	bl	800665e <USB_EPStartXfer>
 80021ea:	e005      	b.n	80021f8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6979      	ldr	r1, [r7, #20]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f004 fa33 	bl	800665e <USB_EPStartXfer>
  }

  return HAL_OK;
 80021f8:	2300      	movs	r3, #0
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	3718      	adds	r7, #24
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b084      	sub	sp, #16
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	460b      	mov	r3, r1
 800220c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800220e:	78fb      	ldrb	r3, [r7, #3]
 8002210:	f003 0207 	and.w	r2, r3, #7
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	d901      	bls.n	8002220 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e03e      	b.n	800229e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002220:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002224:	2b00      	cmp	r3, #0
 8002226:	da0e      	bge.n	8002246 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002228:	78fb      	ldrb	r3, [r7, #3]
 800222a:	f003 0307 	and.w	r3, r3, #7
 800222e:	1c5a      	adds	r2, r3, #1
 8002230:	4613      	mov	r3, r2
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	4413      	add	r3, r2
 8002236:	00db      	lsls	r3, r3, #3
 8002238:	687a      	ldr	r2, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2201      	movs	r2, #1
 8002242:	705a      	strb	r2, [r3, #1]
 8002244:	e00c      	b.n	8002260 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002246:	78fa      	ldrb	r2, [r7, #3]
 8002248:	4613      	mov	r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	4413      	add	r3, r2
 800224e:	00db      	lsls	r3, r3, #3
 8002250:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	4413      	add	r3, r2
 8002258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2201      	movs	r2, #1
 8002264:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	b2da      	uxtb	r2, r3
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002278:	2b01      	cmp	r3, #1
 800227a:	d101      	bne.n	8002280 <HAL_PCD_EP_SetStall+0x7e>
 800227c:	2302      	movs	r3, #2
 800227e:	e00e      	b.n	800229e <HAL_PCD_EP_SetStall+0x9c>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68f9      	ldr	r1, [r7, #12]
 800228e:	4618      	mov	r0, r3
 8002290:	f005 fd1b 	bl	8007cca <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2200      	movs	r2, #0
 8002298:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800229c:	2300      	movs	r3, #0
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3710      	adds	r7, #16
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b084      	sub	sp, #16
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	6078      	str	r0, [r7, #4]
 80022ae:	460b      	mov	r3, r1
 80022b0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80022b2:	78fb      	ldrb	r3, [r7, #3]
 80022b4:	f003 020f 	and.w	r2, r3, #15
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d901      	bls.n	80022c4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e040      	b.n	8002346 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80022c4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da0e      	bge.n	80022ea <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	f003 0307 	and.w	r3, r3, #7
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	4613      	mov	r3, r2
 80022d6:	009b      	lsls	r3, r3, #2
 80022d8:	4413      	add	r3, r2
 80022da:	00db      	lsls	r3, r3, #3
 80022dc:	687a      	ldr	r2, [r7, #4]
 80022de:	4413      	add	r3, r2
 80022e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	2201      	movs	r2, #1
 80022e6:	705a      	strb	r2, [r3, #1]
 80022e8:	e00e      	b.n	8002308 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80022ea:	78fb      	ldrb	r3, [r7, #3]
 80022ec:	f003 0207 	and.w	r2, r3, #7
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80022fc:	687a      	ldr	r2, [r7, #4]
 80022fe:	4413      	add	r3, r2
 8002300:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	2200      	movs	r2, #0
 8002306:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800230e:	78fb      	ldrb	r3, [r7, #3]
 8002310:	f003 0307 	and.w	r3, r3, #7
 8002314:	b2da      	uxtb	r2, r3
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002320:	2b01      	cmp	r3, #1
 8002322:	d101      	bne.n	8002328 <HAL_PCD_EP_ClrStall+0x82>
 8002324:	2302      	movs	r3, #2
 8002326:	e00e      	b.n	8002346 <HAL_PCD_EP_ClrStall+0xa0>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	68f9      	ldr	r1, [r7, #12]
 8002336:	4618      	mov	r0, r3
 8002338:	f005 fd18 	bl	8007d6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b096      	sub	sp, #88	; 0x58
 8002352:	af00      	add	r7, sp, #0
 8002354:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002356:	e39c      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002360:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002364:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002372:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002376:	2b00      	cmp	r3, #0
 8002378:	f040 815e 	bne.w	8002638 <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800237c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002380:	f003 0310 	and.w	r3, r3, #16
 8002384:	2b00      	cmp	r3, #0
 8002386:	d150      	bne.n	800242a <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	881b      	ldrh	r3, [r3, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002394:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002398:	81fb      	strh	r3, [r7, #14]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	89fb      	ldrh	r3, [r7, #14]
 80023a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	3328      	adds	r3, #40	; 0x28
 80023b0:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	461a      	mov	r2, r3
 80023be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	00db      	lsls	r3, r3, #3
 80023c4:	4413      	add	r3, r2
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6812      	ldr	r2, [r2, #0]
 80023ca:	4413      	add	r3, r2
 80023cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80023d0:	881b      	ldrh	r3, [r3, #0]
 80023d2:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80023d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80023da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023dc:	695a      	ldr	r2, [r3, #20]
 80023de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e0:	69db      	ldr	r3, [r3, #28]
 80023e2:	441a      	add	r2, r3
 80023e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e6:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80023e8:	2100      	movs	r1, #0
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f007 fced 	bl	8009dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 834a 	beq.w	8002a92 <PCD_EP_ISR_Handler+0x744>
 80023fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	2b00      	cmp	r3, #0
 8002404:	f040 8345 	bne.w	8002a92 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002414:	b2da      	uxtb	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b292      	uxth	r2, r2
 800241c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2200      	movs	r2, #0
 8002424:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002428:	e333      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002430:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	881b      	ldrh	r3, [r3, #0]
 8002438:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800243c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002440:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002444:	2b00      	cmp	r3, #0
 8002446:	d032      	beq.n	80024ae <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002450:	b29b      	uxth	r3, r3
 8002452:	461a      	mov	r2, r3
 8002454:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	4413      	add	r3, r2
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6812      	ldr	r2, [r2, #0]
 8002460:	4413      	add	r3, r2
 8002462:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002466:	881b      	ldrh	r3, [r3, #0]
 8002468:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800246c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800246e:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6818      	ldr	r0, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800247a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800247c:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800247e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002480:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002482:	b29b      	uxth	r3, r3
 8002484:	f005 fd9d 	bl	8007fc2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	881b      	ldrh	r3, [r3, #0]
 800248e:	b29a      	uxth	r2, r3
 8002490:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002494:	4013      	ands	r3, r2
 8002496:	823b      	strh	r3, [r7, #16]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	8a3a      	ldrh	r2, [r7, #16]
 800249e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024a2:	b292      	uxth	r2, r2
 80024a4:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f007 fc62 	bl	8009d70 <HAL_PCD_SetupStageCallback>
 80024ac:	e2f1      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80024ae:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	f280 82ed 	bge.w	8002a92 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	b29a      	uxth	r2, r3
 80024c0:	f640 738f 	movw	r3, #3983	; 0xf8f
 80024c4:	4013      	ands	r3, r2
 80024c6:	83fb      	strh	r3, [r7, #30]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	8bfa      	ldrh	r2, [r7, #30]
 80024ce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80024d2:	b292      	uxth	r2, r2
 80024d4:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024de:	b29b      	uxth	r3, r3
 80024e0:	461a      	mov	r2, r3
 80024e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	00db      	lsls	r3, r3, #3
 80024e8:	4413      	add	r3, r2
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6812      	ldr	r2, [r2, #0]
 80024ee:	4413      	add	r3, r2
 80024f0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024f4:	881b      	ldrh	r3, [r3, #0]
 80024f6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80024fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d019      	beq.n	800253a <PCD_EP_ISR_Handler+0x1ec>
 8002506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d015      	beq.n	800253a <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6818      	ldr	r0, [r3, #0]
 8002512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002514:	6959      	ldr	r1, [r3, #20]
 8002516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002518:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800251a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251c:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800251e:	b29b      	uxth	r3, r3
 8002520:	f005 fd4f 	bl	8007fc2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002526:	695a      	ldr	r2, [r3, #20]
 8002528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252a:	69db      	ldr	r3, [r3, #28]
 800252c:	441a      	add	r2, r3
 800252e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002530:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002532:	2100      	movs	r1, #0
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f007 fc2d 	bl	8009d94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	881b      	ldrh	r3, [r3, #0]
 8002540:	b29b      	uxth	r3, r3
 8002542:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002546:	2b00      	cmp	r3, #0
 8002548:	f040 82a3 	bne.w	8002a92 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	61bb      	str	r3, [r7, #24]
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800255a:	b29b      	uxth	r3, r3
 800255c:	461a      	mov	r2, r3
 800255e:	69bb      	ldr	r3, [r7, #24]
 8002560:	4413      	add	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800256a:	617b      	str	r3, [r7, #20]
 800256c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	2b3e      	cmp	r3, #62	; 0x3e
 8002572:	d918      	bls.n	80025a6 <PCD_EP_ISR_Handler+0x258>
 8002574:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	095b      	lsrs	r3, r3, #5
 800257a:	647b      	str	r3, [r7, #68]	; 0x44
 800257c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800257e:	691b      	ldr	r3, [r3, #16]
 8002580:	f003 031f 	and.w	r3, r3, #31
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <PCD_EP_ISR_Handler+0x240>
 8002588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800258a:	3b01      	subs	r3, #1
 800258c:	647b      	str	r3, [r7, #68]	; 0x44
 800258e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002590:	b29b      	uxth	r3, r3
 8002592:	029b      	lsls	r3, r3, #10
 8002594:	b29b      	uxth	r3, r3
 8002596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800259a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800259e:	b29a      	uxth	r2, r3
 80025a0:	697b      	ldr	r3, [r7, #20]
 80025a2:	801a      	strh	r2, [r3, #0]
 80025a4:	e029      	b.n	80025fa <PCD_EP_ISR_Handler+0x2ac>
 80025a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d112      	bne.n	80025d4 <PCD_EP_ISR_Handler+0x286>
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	b29b      	uxth	r3, r3
 80025b4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025b8:	b29a      	uxth	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	801a      	strh	r2, [r3, #0]
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	881b      	ldrh	r3, [r3, #0]
 80025c2:	b29b      	uxth	r3, r3
 80025c4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025c8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025cc:	b29a      	uxth	r2, r3
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	801a      	strh	r2, [r3, #0]
 80025d2:	e012      	b.n	80025fa <PCD_EP_ISR_Handler+0x2ac>
 80025d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025d6:	691b      	ldr	r3, [r3, #16]
 80025d8:	085b      	lsrs	r3, r3, #1
 80025da:	647b      	str	r3, [r7, #68]	; 0x44
 80025dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025de:	691b      	ldr	r3, [r3, #16]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d002      	beq.n	80025ee <PCD_EP_ISR_Handler+0x2a0>
 80025e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025ea:	3301      	adds	r3, #1
 80025ec:	647b      	str	r3, [r7, #68]	; 0x44
 80025ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025f0:	b29b      	uxth	r3, r3
 80025f2:	029b      	lsls	r3, r3, #10
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	881b      	ldrh	r3, [r3, #0]
 8002600:	b29b      	uxth	r3, r3
 8002602:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800260a:	827b      	strh	r3, [r7, #18]
 800260c:	8a7b      	ldrh	r3, [r7, #18]
 800260e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002612:	827b      	strh	r3, [r7, #18]
 8002614:	8a7b      	ldrh	r3, [r7, #18]
 8002616:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800261a:	827b      	strh	r3, [r7, #18]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	8a7b      	ldrh	r3, [r7, #18]
 8002622:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002626:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800262a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800262e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002632:	b29b      	uxth	r3, r3
 8002634:	8013      	strh	r3, [r2, #0]
 8002636:	e22c      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	461a      	mov	r2, r3
 800263e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	4413      	add	r3, r2
 8002646:	881b      	ldrh	r3, [r3, #0]
 8002648:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800264c:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002650:	2b00      	cmp	r3, #0
 8002652:	f280 80f6 	bge.w	8002842 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	4413      	add	r3, r2
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	b29a      	uxth	r2, r3
 8002668:	f640 738f 	movw	r3, #3983	; 0xf8f
 800266c:	4013      	ands	r3, r2
 800266e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	461a      	mov	r2, r3
 8002678:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	4413      	add	r3, r2
 8002680:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002684:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002688:	b292      	uxth	r2, r2
 800268a:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800268c:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	00db      	lsls	r3, r3, #3
 8002698:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800269c:	687a      	ldr	r2, [r7, #4]
 800269e:	4413      	add	r3, r2
 80026a0:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 80026a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a4:	7b1b      	ldrb	r3, [r3, #12]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d123      	bne.n	80026f2 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b2:	b29b      	uxth	r3, r3
 80026b4:	461a      	mov	r2, r3
 80026b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	687a      	ldr	r2, [r7, #4]
 80026c0:	6812      	ldr	r2, [r2, #0]
 80026c2:	4413      	add	r3, r2
 80026c4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026c8:	881b      	ldrh	r3, [r3, #0]
 80026ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026ce:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80026d2:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	f000 808e 	beq.w	80027f8 <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6818      	ldr	r0, [r3, #0]
 80026e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e2:	6959      	ldr	r1, [r3, #20]
 80026e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026e6:	88da      	ldrh	r2, [r3, #6]
 80026e8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80026ec:	f005 fc69 	bl	8007fc2 <USB_ReadPMA>
 80026f0:	e082      	b.n	80027f8 <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80026f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026f4:	78db      	ldrb	r3, [r3, #3]
 80026f6:	2b02      	cmp	r3, #2
 80026f8:	d10a      	bne.n	8002710 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80026fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026fe:	461a      	mov	r2, r3
 8002700:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f000 f9d3 	bl	8002aae <HAL_PCD_EP_DB_Receive>
 8002708:	4603      	mov	r3, r0
 800270a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800270e:	e073      	b.n	80027f8 <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	461a      	mov	r2, r3
 8002716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	881b      	ldrh	r3, [r3, #0]
 8002720:	b29b      	uxth	r3, r3
 8002722:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800272a:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	461a      	mov	r2, r3
 8002734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	441a      	add	r2, r3
 800273c:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002740:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002744:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002748:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800274c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002750:	b29b      	uxth	r3, r3
 8002752:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	461a      	mov	r2, r3
 800275a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	b29b      	uxth	r3, r3
 8002766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800276a:	2b00      	cmp	r3, #0
 800276c:	d022      	beq.n	80027b4 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002776:	b29b      	uxth	r3, r3
 8002778:	461a      	mov	r2, r3
 800277a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	00db      	lsls	r3, r3, #3
 8002780:	4413      	add	r3, r2
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6812      	ldr	r2, [r2, #0]
 8002786:	4413      	add	r3, r2
 8002788:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800278c:	881b      	ldrh	r3, [r3, #0]
 800278e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002792:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 8002796:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800279a:	2b00      	cmp	r3, #0
 800279c:	d02c      	beq.n	80027f8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6818      	ldr	r0, [r3, #0]
 80027a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a4:	6959      	ldr	r1, [r3, #20]
 80027a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027a8:	891a      	ldrh	r2, [r3, #8]
 80027aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027ae:	f005 fc08 	bl	8007fc2 <USB_ReadPMA>
 80027b2:	e021      	b.n	80027f8 <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027bc:	b29b      	uxth	r3, r3
 80027be:	461a      	mov	r2, r3
 80027c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	00db      	lsls	r3, r3, #3
 80027c6:	4413      	add	r3, r2
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6812      	ldr	r2, [r2, #0]
 80027cc:	4413      	add	r3, r2
 80027ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80027d2:	881b      	ldrh	r3, [r3, #0]
 80027d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027d8:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80027dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d009      	beq.n	80027f8 <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6818      	ldr	r0, [r3, #0]
 80027e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ea:	6959      	ldr	r1, [r3, #20]
 80027ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ee:	895a      	ldrh	r2, [r3, #10]
 80027f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80027f4:	f005 fbe5 	bl	8007fc2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80027f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027fa:	69da      	ldr	r2, [r3, #28]
 80027fc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002800:	441a      	add	r2, r3
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002808:	695a      	ldr	r2, [r3, #20]
 800280a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800280e:	441a      	add	r2, r3
 8002810:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002812:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d005      	beq.n	8002828 <PCD_EP_ISR_Handler+0x4da>
 800281c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002820:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	429a      	cmp	r2, r3
 8002826:	d206      	bcs.n	8002836 <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800282a:	781b      	ldrb	r3, [r3, #0]
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f007 fab0 	bl	8009d94 <HAL_PCD_DataOutStageCallback>
 8002834:	e005      	b.n	8002842 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800283c:	4618      	mov	r0, r3
 800283e:	f003 ff0e 	bl	800665e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002842:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 8121 	beq.w	8002a92 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002850:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	881b      	ldrh	r3, [r3, #0]
 8002874:	b29b      	uxth	r3, r3
 8002876:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800287a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800287e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	441a      	add	r2, r3
 8002890:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800289c:	b29b      	uxth	r3, r3
 800289e:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 80028a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028a2:	78db      	ldrb	r3, [r3, #3]
 80028a4:	2b02      	cmp	r3, #2
 80028a6:	f000 80a2 	beq.w	80029ee <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 80028aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80028b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028b2:	7b1b      	ldrb	r3, [r3, #12]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 8093 	beq.w	80029e0 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80028ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d046      	beq.n	8002954 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80028c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028c8:	785b      	ldrb	r3, [r3, #1]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d126      	bne.n	800291c <PCD_EP_ISR_Handler+0x5ce>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028dc:	b29b      	uxth	r3, r3
 80028de:	461a      	mov	r2, r3
 80028e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e2:	4413      	add	r3, r2
 80028e4:	627b      	str	r3, [r7, #36]	; 0x24
 80028e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	00da      	lsls	r2, r3, #3
 80028ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ee:	4413      	add	r3, r2
 80028f0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80028f4:	623b      	str	r3, [r7, #32]
 80028f6:	6a3b      	ldr	r3, [r7, #32]
 80028f8:	881b      	ldrh	r3, [r3, #0]
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002900:	b29a      	uxth	r2, r3
 8002902:	6a3b      	ldr	r3, [r7, #32]
 8002904:	801a      	strh	r2, [r3, #0]
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	881b      	ldrh	r3, [r3, #0]
 800290a:	b29b      	uxth	r3, r3
 800290c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002910:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002914:	b29a      	uxth	r2, r3
 8002916:	6a3b      	ldr	r3, [r7, #32]
 8002918:	801a      	strh	r2, [r3, #0]
 800291a:	e061      	b.n	80029e0 <PCD_EP_ISR_Handler+0x692>
 800291c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800291e:	785b      	ldrb	r3, [r3, #1]
 8002920:	2b01      	cmp	r3, #1
 8002922:	d15d      	bne.n	80029e0 <PCD_EP_ISR_Handler+0x692>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002938:	4413      	add	r3, r2
 800293a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800293c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	00da      	lsls	r2, r3, #3
 8002942:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002944:	4413      	add	r3, r2
 8002946:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800294a:	62bb      	str	r3, [r7, #40]	; 0x28
 800294c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800294e:	2200      	movs	r2, #0
 8002950:	801a      	strh	r2, [r3, #0]
 8002952:	e045      	b.n	80029e0 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
 800295a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800295c:	785b      	ldrb	r3, [r3, #1]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d126      	bne.n	80029b0 <PCD_EP_ISR_Handler+0x662>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	637b      	str	r3, [r7, #52]	; 0x34
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002970:	b29b      	uxth	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002976:	4413      	add	r3, r2
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
 800297a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	00da      	lsls	r2, r3, #3
 8002980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002982:	4413      	add	r3, r2
 8002984:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002988:	633b      	str	r3, [r7, #48]	; 0x30
 800298a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800298c:	881b      	ldrh	r3, [r3, #0]
 800298e:	b29b      	uxth	r3, r3
 8002990:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002994:	b29a      	uxth	r2, r3
 8002996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002998:	801a      	strh	r2, [r3, #0]
 800299a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299c:	881b      	ldrh	r3, [r3, #0]
 800299e:	b29b      	uxth	r3, r3
 80029a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029ac:	801a      	strh	r2, [r3, #0]
 80029ae:	e017      	b.n	80029e0 <PCD_EP_ISR_Handler+0x692>
 80029b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029b2:	785b      	ldrb	r3, [r3, #1]
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d113      	bne.n	80029e0 <PCD_EP_ISR_Handler+0x692>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029c0:	b29b      	uxth	r3, r3
 80029c2:	461a      	mov	r2, r3
 80029c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029c6:	4413      	add	r3, r2
 80029c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	00da      	lsls	r2, r3, #3
 80029d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d2:	4413      	add	r3, r2
 80029d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80029d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80029da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029dc:	2200      	movs	r2, #0
 80029de:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80029e2:	781b      	ldrb	r3, [r3, #0]
 80029e4:	4619      	mov	r1, r3
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f007 f9ef 	bl	8009dca <HAL_PCD_DataInStageCallback>
 80029ec:	e051      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80029ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80029f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d144      	bne.n	8002a84 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	461a      	mov	r2, r3
 8002a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a08:	781b      	ldrb	r3, [r3, #0]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6812      	ldr	r2, [r2, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a18:	881b      	ldrh	r3, [r3, #0]
 8002a1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a24:	699a      	ldr	r2, [r3, #24]
 8002a26:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d907      	bls.n	8002a3e <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a36:	1ad2      	subs	r2, r2, r3
 8002a38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3a:	619a      	str	r2, [r3, #24]
 8002a3c:	e002      	b.n	8002a44 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002a3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d106      	bne.n	8002a5a <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002a4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	4619      	mov	r1, r3
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f007 f9b9 	bl	8009dca <HAL_PCD_DataInStageCallback>
 8002a58:	e01b      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8002a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a5c:	695a      	ldr	r2, [r3, #20]
 8002a5e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a62:	441a      	add	r2, r3
 8002a64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a66:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8002a68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a6a:	69da      	ldr	r2, [r3, #28]
 8002a6c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a70:	441a      	add	r2, r3
 8002a72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a74:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f003 fdee 	bl	800665e <USB_EPStartXfer>
 8002a82:	e006      	b.n	8002a92 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002a84:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002a88:	461a      	mov	r2, r3
 8002a8a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002a8c:	6878      	ldr	r0, [r7, #4]
 8002a8e:	f000 f917 	bl	8002cc0 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002a9a:	b29b      	uxth	r3, r3
 8002a9c:	b21b      	sxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	f6ff ac5a 	blt.w	8002358 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002aa4:	2300      	movs	r3, #0
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3758      	adds	r7, #88	; 0x58
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b088      	sub	sp, #32
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	60f8      	str	r0, [r7, #12]
 8002ab6:	60b9      	str	r1, [r7, #8]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d07c      	beq.n	8002bc0 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	781b      	ldrb	r3, [r3, #0]
 8002ad6:	00db      	lsls	r3, r3, #3
 8002ad8:	4413      	add	r3, r2
 8002ada:	68fa      	ldr	r2, [r7, #12]
 8002adc:	6812      	ldr	r2, [r2, #0]
 8002ade:	4413      	add	r3, r2
 8002ae0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002aea:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	699a      	ldr	r2, [r3, #24]
 8002af0:	8b7b      	ldrh	r3, [r7, #26]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d306      	bcc.n	8002b04 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	699a      	ldr	r2, [r3, #24]
 8002afa:	8b7b      	ldrh	r3, [r7, #26]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	619a      	str	r2, [r3, #24]
 8002b02:	e002      	b.n	8002b0a <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d123      	bne.n	8002b5a <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	461a      	mov	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b2c:	833b      	strh	r3, [r7, #24]
 8002b2e:	8b3b      	ldrh	r3, [r7, #24]
 8002b30:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002b34:	833b      	strh	r3, [r7, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	441a      	add	r2, r3
 8002b44:	8b3b      	ldrh	r3, [r7, #24]
 8002b46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002b5a:	88fb      	ldrh	r3, [r7, #6]
 8002b5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d01f      	beq.n	8002ba4 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	461a      	mov	r2, r3
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4413      	add	r3, r2
 8002b72:	881b      	ldrh	r3, [r3, #0]
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7e:	82fb      	strh	r3, [r7, #22]
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	441a      	add	r2, r3
 8002b8e:	8afb      	ldrh	r3, [r7, #22]
 8002b90:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b94:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b98:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b9c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002ba0:	b29b      	uxth	r3, r3
 8002ba2:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002ba4:	8b7b      	ldrh	r3, [r7, #26]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8085 	beq.w	8002cb6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	6818      	ldr	r0, [r3, #0]
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	6959      	ldr	r1, [r3, #20]
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	891a      	ldrh	r2, [r3, #8]
 8002bb8:	8b7b      	ldrh	r3, [r7, #26]
 8002bba:	f005 fa02 	bl	8007fc2 <USB_ReadPMA>
 8002bbe:	e07a      	b.n	8002cb6 <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	68fa      	ldr	r2, [r7, #12]
 8002bd6:	6812      	ldr	r2, [r2, #0]
 8002bd8:	4413      	add	r3, r2
 8002bda:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002bde:	881b      	ldrh	r3, [r3, #0]
 8002be0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002be4:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	699a      	ldr	r2, [r3, #24]
 8002bea:	8b7b      	ldrh	r3, [r7, #26]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d306      	bcc.n	8002bfe <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	699a      	ldr	r2, [r3, #24]
 8002bf4:	8b7b      	ldrh	r3, [r7, #26]
 8002bf6:	1ad2      	subs	r2, r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	619a      	str	r2, [r3, #24]
 8002bfc:	e002      	b.n	8002c04 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	2200      	movs	r2, #0
 8002c02:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d123      	bne.n	8002c54 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	461a      	mov	r2, r3
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	4413      	add	r3, r2
 8002c1a:	881b      	ldrh	r3, [r3, #0]
 8002c1c:	b29b      	uxth	r3, r3
 8002c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	83fb      	strh	r3, [r7, #30]
 8002c28:	8bfb      	ldrh	r3, [r7, #30]
 8002c2a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002c2e:	83fb      	strh	r3, [r7, #30]
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	461a      	mov	r2, r3
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	441a      	add	r2, r3
 8002c3e:	8bfb      	ldrh	r3, [r7, #30]
 8002c40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d11f      	bne.n	8002c9e <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	461a      	mov	r2, r3
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	4413      	add	r3, r2
 8002c6c:	881b      	ldrh	r3, [r3, #0]
 8002c6e:	b29b      	uxth	r3, r3
 8002c70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c78:	83bb      	strh	r3, [r7, #28]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	441a      	add	r2, r3
 8002c88:	8bbb      	ldrh	r3, [r7, #28]
 8002c8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c92:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c96:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002c9e:	8b7b      	ldrh	r3, [r7, #26]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6818      	ldr	r0, [r3, #0]
 8002ca8:	68bb      	ldr	r3, [r7, #8]
 8002caa:	6959      	ldr	r1, [r3, #20]
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	895a      	ldrh	r2, [r3, #10]
 8002cb0:	8b7b      	ldrh	r3, [r7, #26]
 8002cb2:	f005 f986 	bl	8007fc2 <USB_ReadPMA>
    }
  }

  return count;
 8002cb6:	8b7b      	ldrh	r3, [r7, #26]
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3720      	adds	r7, #32
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b0a2      	sub	sp, #136	; 0x88
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002cce:	88fb      	ldrh	r3, [r7, #6]
 8002cd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	f000 81c5 	beq.w	8003064 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	00db      	lsls	r3, r3, #3
 8002cec:	4413      	add	r3, r2
 8002cee:	68fa      	ldr	r2, [r7, #12]
 8002cf0:	6812      	ldr	r2, [r2, #0]
 8002cf2:	4413      	add	r3, r2
 8002cf4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002cf8:	881b      	ldrh	r3, [r3, #0]
 8002cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002cfe:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	699a      	ldr	r2, [r3, #24]
 8002d06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d0a:	429a      	cmp	r2, r3
 8002d0c:	d907      	bls.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	699a      	ldr	r2, [r3, #24]
 8002d12:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d16:	1ad2      	subs	r2, r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	619a      	str	r2, [r3, #24]
 8002d1c:	e002      	b.n	8002d24 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	2200      	movs	r2, #0
 8002d22:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	f040 80b9 	bne.w	8002ea0 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	785b      	ldrb	r3, [r3, #1]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d126      	bne.n	8002d84 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	461a      	mov	r2, r3
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	4413      	add	r3, r2
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d4e:	68bb      	ldr	r3, [r7, #8]
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	00da      	lsls	r2, r3, #3
 8002d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d56:	4413      	add	r3, r2
 8002d58:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8002d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d60:	881b      	ldrh	r3, [r3, #0]
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002d68:	b29a      	uxth	r2, r3
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	801a      	strh	r2, [r3, #0]
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	881b      	ldrh	r3, [r3, #0]
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d7c:	b29a      	uxth	r2, r3
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d80:	801a      	strh	r2, [r3, #0]
 8002d82:	e01a      	b.n	8002dba <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d84:	68bb      	ldr	r3, [r7, #8]
 8002d86:	785b      	ldrb	r3, [r3, #1]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d116      	bne.n	8002dba <HAL_PCD_EP_DB_Transmit+0xfa>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	633b      	str	r3, [r7, #48]	; 0x30
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d9a:	b29b      	uxth	r3, r3
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da0:	4413      	add	r3, r2
 8002da2:	633b      	str	r3, [r7, #48]	; 0x30
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	00da      	lsls	r2, r3, #3
 8002daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dac:	4413      	add	r3, r2
 8002dae:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002db2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002db4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db6:	2200      	movs	r2, #0
 8002db8:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	623b      	str	r3, [r7, #32]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	785b      	ldrb	r3, [r3, #1]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d126      	bne.n	8002e16 <HAL_PCD_EP_DB_Transmit+0x156>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	61bb      	str	r3, [r7, #24]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	69bb      	ldr	r3, [r7, #24]
 8002ddc:	4413      	add	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	00da      	lsls	r2, r3, #3
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4413      	add	r3, r2
 8002dea:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]
 8002df2:	881b      	ldrh	r3, [r3, #0]
 8002df4:	b29b      	uxth	r3, r3
 8002df6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	881b      	ldrh	r3, [r3, #0]
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e0a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e0e:	b29a      	uxth	r2, r3
 8002e10:	697b      	ldr	r3, [r7, #20]
 8002e12:	801a      	strh	r2, [r3, #0]
 8002e14:	e017      	b.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x186>
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	785b      	ldrb	r3, [r3, #1]
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d113      	bne.n	8002e46 <HAL_PCD_EP_DB_Transmit+0x186>
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e26:	b29b      	uxth	r3, r3
 8002e28:	461a      	mov	r2, r3
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	4413      	add	r3, r2
 8002e2e:	623b      	str	r3, [r7, #32]
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	00da      	lsls	r2, r3, #3
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	4413      	add	r3, r2
 8002e3a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e3e:	61fb      	str	r3, [r7, #28]
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	2200      	movs	r2, #0
 8002e44:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002e46:	68bb      	ldr	r3, [r7, #8]
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f006 ffbc 	bl	8009dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 82d2 	beq.w	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	4413      	add	r3, r2
 8002e6c:	881b      	ldrh	r3, [r3, #0]
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e78:	827b      	strh	r3, [r7, #18]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	461a      	mov	r2, r3
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	441a      	add	r2, r3
 8002e88:	8a7b      	ldrh	r3, [r7, #18]
 8002e8a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002e8e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002e92:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e96:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	8013      	strh	r3, [r2, #0]
 8002e9e:	e2b0      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002ea0:	88fb      	ldrh	r3, [r7, #6]
 8002ea2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d021      	beq.n	8002eee <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	4413      	add	r3, r2
 8002eb8:	881b      	ldrh	r3, [r3, #0]
 8002eba:	b29b      	uxth	r3, r3
 8002ebc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ec0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	461a      	mov	r2, r3
 8002ece:	68bb      	ldr	r3, [r7, #8]
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	441a      	add	r2, r3
 8002ed6:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002eda:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002ede:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002ee2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002eea:	b29b      	uxth	r3, r3
 8002eec:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	f040 8284 	bne.w	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	695a      	ldr	r2, [r3, #20]
 8002efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f02:	441a      	add	r2, r3
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	69da      	ldr	r2, [r3, #28]
 8002f0c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f10:	441a      	add	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	6a1a      	ldr	r2, [r3, #32]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d309      	bcc.n	8002f36 <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	691b      	ldr	r3, [r3, #16]
 8002f26:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	6a1a      	ldr	r2, [r3, #32]
 8002f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f2e:	1ad2      	subs	r2, r2, r3
 8002f30:	68bb      	ldr	r3, [r7, #8]
 8002f32:	621a      	str	r2, [r3, #32]
 8002f34:	e015      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	6a1b      	ldr	r3, [r3, #32]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d107      	bne.n	8002f4e <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002f3e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f42:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002f4c:	e009      	b.n	8002f62 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	2200      	movs	r2, #0
 8002f52:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	6a1b      	ldr	r3, [r3, #32]
 8002f5a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	785b      	ldrb	r3, [r3, #1]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d155      	bne.n	8003016 <HAL_PCD_EP_DB_Transmit+0x356>
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f7e:	4413      	add	r3, r2
 8002f80:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	00da      	lsls	r2, r3, #3
 8002f88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f8a:	4413      	add	r3, r2
 8002f8c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002f90:	637b      	str	r3, [r7, #52]	; 0x34
 8002f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f94:	2b3e      	cmp	r3, #62	; 0x3e
 8002f96:	d916      	bls.n	8002fc6 <HAL_PCD_EP_DB_Transmit+0x306>
 8002f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f9a:	095b      	lsrs	r3, r3, #5
 8002f9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8002f9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fa0:	f003 031f 	and.w	r3, r3, #31
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d102      	bne.n	8002fae <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002fa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002faa:	3b01      	subs	r3, #1
 8002fac:	64bb      	str	r3, [r7, #72]	; 0x48
 8002fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fb0:	b29b      	uxth	r3, r3
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	e043      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d112      	bne.n	8002ff2 <HAL_PCD_EP_DB_Transmit+0x332>
 8002fcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fce:	881b      	ldrh	r3, [r3, #0]
 8002fd0:	b29b      	uxth	r3, r3
 8002fd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002fd6:	b29a      	uxth	r2, r3
 8002fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fda:	801a      	strh	r2, [r3, #0]
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fe6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fea:	b29a      	uxth	r2, r3
 8002fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fee:	801a      	strh	r2, [r3, #0]
 8002ff0:	e02d      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ff2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ff4:	085b      	lsrs	r3, r3, #1
 8002ff6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ff8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d002      	beq.n	8003008 <HAL_PCD_EP_DB_Transmit+0x348>
 8003002:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003004:	3301      	adds	r3, #1
 8003006:	64bb      	str	r3, [r7, #72]	; 0x48
 8003008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800300a:	b29b      	uxth	r3, r3
 800300c:	029b      	lsls	r3, r3, #10
 800300e:	b29a      	uxth	r2, r3
 8003010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003012:	801a      	strh	r2, [r3, #0]
 8003014:	e01b      	b.n	800304e <HAL_PCD_EP_DB_Transmit+0x38e>
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	785b      	ldrb	r3, [r3, #1]
 800301a:	2b01      	cmp	r3, #1
 800301c:	d117      	bne.n	800304e <HAL_PCD_EP_DB_Transmit+0x38e>
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	643b      	str	r3, [r7, #64]	; 0x40
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800302c:	b29b      	uxth	r3, r3
 800302e:	461a      	mov	r2, r3
 8003030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003032:	4413      	add	r3, r2
 8003034:	643b      	str	r3, [r7, #64]	; 0x40
 8003036:	68bb      	ldr	r3, [r7, #8]
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	00da      	lsls	r2, r3, #3
 800303c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800303e:	4413      	add	r3, r2
 8003040:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8003044:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003046:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003048:	b29a      	uxth	r2, r3
 800304a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800304c:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6818      	ldr	r0, [r3, #0]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	6959      	ldr	r1, [r3, #20]
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	891a      	ldrh	r2, [r3, #8]
 800305a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800305c:	b29b      	uxth	r3, r3
 800305e:	f004 ff6e 	bl	8007f3e <USB_WritePMA>
 8003062:	e1ce      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800306c:	b29b      	uxth	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	00db      	lsls	r3, r3, #3
 8003076:	4413      	add	r3, r2
 8003078:	68fa      	ldr	r2, [r7, #12]
 800307a:	6812      	ldr	r2, [r2, #0]
 800307c:	4413      	add	r3, r2
 800307e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003082:	881b      	ldrh	r3, [r3, #0]
 8003084:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003088:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	699a      	ldr	r2, [r3, #24]
 8003090:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003094:	429a      	cmp	r2, r3
 8003096:	d307      	bcc.n	80030a8 <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	699a      	ldr	r2, [r3, #24]
 800309c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030a0:	1ad2      	subs	r2, r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	619a      	str	r2, [r3, #24]
 80030a6:	e002      	b.n	80030ae <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	2200      	movs	r2, #0
 80030ac:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 80c4 	bne.w	8003240 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	785b      	ldrb	r3, [r3, #1]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d126      	bne.n	800310e <HAL_PCD_EP_DB_Transmit+0x44e>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ce:	b29b      	uxth	r3, r3
 80030d0:	461a      	mov	r2, r3
 80030d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030d4:	4413      	add	r3, r2
 80030d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	00da      	lsls	r2, r3, #3
 80030de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80030e0:	4413      	add	r3, r2
 80030e2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80030e6:	667b      	str	r3, [r7, #100]	; 0x64
 80030e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030f6:	801a      	strh	r2, [r3, #0]
 80030f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003102:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003106:	b29a      	uxth	r2, r3
 8003108:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800310a:	801a      	strh	r2, [r3, #0]
 800310c:	e01a      	b.n	8003144 <HAL_PCD_EP_DB_Transmit+0x484>
 800310e:	68bb      	ldr	r3, [r7, #8]
 8003110:	785b      	ldrb	r3, [r3, #1]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d116      	bne.n	8003144 <HAL_PCD_EP_DB_Transmit+0x484>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	673b      	str	r3, [r7, #112]	; 0x70
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003124:	b29b      	uxth	r3, r3
 8003126:	461a      	mov	r2, r3
 8003128:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800312a:	4413      	add	r3, r2
 800312c:	673b      	str	r3, [r7, #112]	; 0x70
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	00da      	lsls	r2, r3, #3
 8003134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003136:	4413      	add	r3, r2
 8003138:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800313c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800313e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003140:	2200      	movs	r2, #0
 8003142:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	67fb      	str	r3, [r7, #124]	; 0x7c
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	785b      	ldrb	r3, [r3, #1]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d12f      	bne.n	80031b2 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003162:	b29b      	uxth	r3, r3
 8003164:	461a      	mov	r2, r3
 8003166:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800316a:	4413      	add	r3, r2
 800316c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	00da      	lsls	r2, r3, #3
 8003176:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800317a:	4413      	add	r3, r2
 800317c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003180:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003184:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	b29b      	uxth	r3, r3
 800318c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003190:	b29a      	uxth	r2, r3
 8003192:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003196:	801a      	strh	r2, [r3, #0]
 8003198:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800319c:	881b      	ldrh	r3, [r3, #0]
 800319e:	b29b      	uxth	r3, r3
 80031a0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80031a4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80031ae:	801a      	strh	r2, [r3, #0]
 80031b0:	e017      	b.n	80031e2 <HAL_PCD_EP_DB_Transmit+0x522>
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	785b      	ldrb	r3, [r3, #1]
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d113      	bne.n	80031e2 <HAL_PCD_EP_DB_Transmit+0x522>
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	461a      	mov	r2, r3
 80031c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031c8:	4413      	add	r3, r2
 80031ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	00da      	lsls	r2, r3, #3
 80031d2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80031d4:	4413      	add	r3, r2
 80031d6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80031da:	67bb      	str	r3, [r7, #120]	; 0x78
 80031dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031de:	2200      	movs	r2, #0
 80031e0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	781b      	ldrb	r3, [r3, #0]
 80031e6:	4619      	mov	r1, r3
 80031e8:	68f8      	ldr	r0, [r7, #12]
 80031ea:	f006 fdee 	bl	8009dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80031ee:	88fb      	ldrh	r3, [r7, #6]
 80031f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f040 8104 	bne.w	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	461a      	mov	r2, r3
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	4413      	add	r3, r2
 8003208:	881b      	ldrh	r3, [r3, #0]
 800320a:	b29b      	uxth	r3, r3
 800320c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003214:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	441a      	add	r2, r3
 8003226:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800322a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800322e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003232:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003236:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800323a:	b29b      	uxth	r3, r3
 800323c:	8013      	strh	r3, [r2, #0]
 800323e:	e0e0      	b.n	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003240:	88fb      	ldrh	r3, [r7, #6]
 8003242:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003246:	2b00      	cmp	r3, #0
 8003248:	d121      	bne.n	800328e <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	461a      	mov	r2, r3
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	4413      	add	r3, r2
 8003258:	881b      	ldrh	r3, [r3, #0]
 800325a:	b29b      	uxth	r3, r3
 800325c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003260:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003264:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	461a      	mov	r2, r3
 800326e:	68bb      	ldr	r3, [r7, #8]
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	441a      	add	r2, r3
 8003276:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800327a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800327e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003282:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003286:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800328a:	b29b      	uxth	r3, r3
 800328c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003294:	2b01      	cmp	r3, #1
 8003296:	f040 80b4 	bne.w	8003402 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032a2:	441a      	add	r2, r3
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	69da      	ldr	r2, [r3, #28]
 80032ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032b0:	441a      	add	r2, r3
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	6a1a      	ldr	r2, [r3, #32]
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	429a      	cmp	r2, r3
 80032c0:	d309      	bcc.n	80032d6 <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80032ce:	1ad2      	subs	r2, r2, r3
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	621a      	str	r2, [r3, #32]
 80032d4:	e015      	b.n	8003302 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d107      	bne.n	80032ee <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 80032de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80032ec:	e009      	b.n	8003302 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	2200      	movs	r2, #0
 80032f8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	663b      	str	r3, [r7, #96]	; 0x60
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	785b      	ldrb	r3, [r3, #1]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d155      	bne.n	80033bc <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	65bb      	str	r3, [r7, #88]	; 0x58
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800331e:	b29b      	uxth	r3, r3
 8003320:	461a      	mov	r2, r3
 8003322:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003324:	4413      	add	r3, r2
 8003326:	65bb      	str	r3, [r7, #88]	; 0x58
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	00da      	lsls	r2, r3, #3
 800332e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003330:	4413      	add	r3, r2
 8003332:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8003336:	657b      	str	r3, [r7, #84]	; 0x54
 8003338:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800333a:	2b3e      	cmp	r3, #62	; 0x3e
 800333c:	d916      	bls.n	800336c <HAL_PCD_EP_DB_Transmit+0x6ac>
 800333e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	677b      	str	r3, [r7, #116]	; 0x74
 8003344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003346:	f003 031f 	and.w	r3, r3, #31
 800334a:	2b00      	cmp	r3, #0
 800334c:	d102      	bne.n	8003354 <HAL_PCD_EP_DB_Transmit+0x694>
 800334e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003350:	3b01      	subs	r3, #1
 8003352:	677b      	str	r3, [r7, #116]	; 0x74
 8003354:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003356:	b29b      	uxth	r3, r3
 8003358:	029b      	lsls	r3, r3, #10
 800335a:	b29b      	uxth	r3, r3
 800335c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003360:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003364:	b29a      	uxth	r2, r3
 8003366:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003368:	801a      	strh	r2, [r3, #0]
 800336a:	e040      	b.n	80033ee <HAL_PCD_EP_DB_Transmit+0x72e>
 800336c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800336e:	2b00      	cmp	r3, #0
 8003370:	d112      	bne.n	8003398 <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003372:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003374:	881b      	ldrh	r3, [r3, #0]
 8003376:	b29b      	uxth	r3, r3
 8003378:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800337c:	b29a      	uxth	r2, r3
 800337e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003380:	801a      	strh	r2, [r3, #0]
 8003382:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003384:	881b      	ldrh	r3, [r3, #0]
 8003386:	b29b      	uxth	r3, r3
 8003388:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800338c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003390:	b29a      	uxth	r2, r3
 8003392:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003394:	801a      	strh	r2, [r3, #0]
 8003396:	e02a      	b.n	80033ee <HAL_PCD_EP_DB_Transmit+0x72e>
 8003398:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800339a:	085b      	lsrs	r3, r3, #1
 800339c:	677b      	str	r3, [r7, #116]	; 0x74
 800339e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033a0:	f003 0301 	and.w	r3, r3, #1
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d002      	beq.n	80033ae <HAL_PCD_EP_DB_Transmit+0x6ee>
 80033a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033aa:	3301      	adds	r3, #1
 80033ac:	677b      	str	r3, [r7, #116]	; 0x74
 80033ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	029b      	lsls	r3, r3, #10
 80033b4:	b29a      	uxth	r2, r3
 80033b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033b8:	801a      	strh	r2, [r3, #0]
 80033ba:	e018      	b.n	80033ee <HAL_PCD_EP_DB_Transmit+0x72e>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	2b01      	cmp	r3, #1
 80033c2:	d114      	bne.n	80033ee <HAL_PCD_EP_DB_Transmit+0x72e>
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033d2:	4413      	add	r3, r2
 80033d4:	663b      	str	r3, [r7, #96]	; 0x60
 80033d6:	68bb      	ldr	r3, [r7, #8]
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	00da      	lsls	r2, r3, #3
 80033dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80033de:	4413      	add	r3, r2
 80033e0:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80033e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033ec:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6818      	ldr	r0, [r3, #0]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	6959      	ldr	r1, [r3, #20]
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	895a      	ldrh	r2, [r3, #10]
 80033fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f004 fd9e 	bl	8007f3e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	461a      	mov	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	4413      	add	r3, r2
 8003410:	881b      	ldrh	r3, [r3, #0]
 8003412:	b29b      	uxth	r3, r3
 8003414:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003418:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800341c:	823b      	strh	r3, [r7, #16]
 800341e:	8a3b      	ldrh	r3, [r7, #16]
 8003420:	f083 0310 	eor.w	r3, r3, #16
 8003424:	823b      	strh	r3, [r7, #16]
 8003426:	8a3b      	ldrh	r3, [r7, #16]
 8003428:	f083 0320 	eor.w	r3, r3, #32
 800342c:	823b      	strh	r3, [r7, #16]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	461a      	mov	r2, r3
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	441a      	add	r2, r3
 800343c:	8a3b      	ldrh	r3, [r7, #16]
 800343e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003442:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8003446:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800344a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800344e:	b29b      	uxth	r3, r3
 8003450:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3788      	adds	r7, #136	; 0x88
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800345c:	b480      	push	{r7}
 800345e:	b087      	sub	sp, #28
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	607b      	str	r3, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	817b      	strh	r3, [r7, #10]
 800346a:	4613      	mov	r3, r2
 800346c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800346e:	897b      	ldrh	r3, [r7, #10]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d00b      	beq.n	8003492 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800347a:	897b      	ldrh	r3, [r7, #10]
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	68fa      	ldr	r2, [r7, #12]
 800348c:	4413      	add	r3, r2
 800348e:	617b      	str	r3, [r7, #20]
 8003490:	e009      	b.n	80034a6 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003492:	897a      	ldrh	r2, [r7, #10]
 8003494:	4613      	mov	r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	4413      	add	r3, r2
 80034a4:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80034a6:	893b      	ldrh	r3, [r7, #8]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d107      	bne.n	80034bc <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80034ac:	697b      	ldr	r3, [r7, #20]
 80034ae:	2200      	movs	r2, #0
 80034b0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	80da      	strh	r2, [r3, #6]
 80034ba:	e00b      	b.n	80034d4 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2201      	movs	r2, #1
 80034c0:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	0c1b      	lsrs	r3, r3, #16
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80034d4:	2300      	movs	r3, #0
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	371c      	adds	r7, #28
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003506:	b29b      	uxth	r3, r3
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800351a:	b29b      	uxth	r3, r3
 800351c:	f043 0302 	orr.w	r3, r3, #2
 8003520:	b29a      	uxth	r2, r3
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3714      	adds	r7, #20
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003538:	b480      	push	{r7}
 800353a:	b085      	sub	sp, #20
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d141      	bne.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003546:	4b4b      	ldr	r3, [pc, #300]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800354e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003552:	d131      	bne.n	80035b8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003554:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800355a:	4a46      	ldr	r2, [pc, #280]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800355c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003560:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003564:	4b43      	ldr	r3, [pc, #268]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800356c:	4a41      	ldr	r2, [pc, #260]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003574:	4b40      	ldr	r3, [pc, #256]	; (8003678 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	2232      	movs	r2, #50	; 0x32
 800357a:	fb02 f303 	mul.w	r3, r2, r3
 800357e:	4a3f      	ldr	r2, [pc, #252]	; (800367c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003580:	fba2 2303 	umull	r2, r3, r2, r3
 8003584:	0c9b      	lsrs	r3, r3, #18
 8003586:	3301      	adds	r3, #1
 8003588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800358a:	e002      	b.n	8003592 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	3b01      	subs	r3, #1
 8003590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003592:	4b38      	ldr	r3, [pc, #224]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800359a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800359e:	d102      	bne.n	80035a6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f2      	bne.n	800358c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035a6:	4b33      	ldr	r3, [pc, #204]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a8:	695b      	ldr	r3, [r3, #20]
 80035aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b2:	d158      	bne.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035b4:	2303      	movs	r3, #3
 80035b6:	e057      	b.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035b8:	4b2e      	ldr	r3, [pc, #184]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035be:	4a2d      	ldr	r2, [pc, #180]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035c4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035c8:	e04d      	b.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d0:	d141      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035d2:	4b28      	ldr	r3, [pc, #160]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035de:	d131      	bne.n	8003644 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035e0:	4b24      	ldr	r3, [pc, #144]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e6:	4a23      	ldr	r2, [pc, #140]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035f8:	4a1e      	ldr	r2, [pc, #120]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003600:	4b1d      	ldr	r3, [pc, #116]	; (8003678 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2232      	movs	r2, #50	; 0x32
 8003606:	fb02 f303 	mul.w	r3, r2, r3
 800360a:	4a1c      	ldr	r2, [pc, #112]	; (800367c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800360c:	fba2 2303 	umull	r2, r3, r2, r3
 8003610:	0c9b      	lsrs	r3, r3, #18
 8003612:	3301      	adds	r3, #1
 8003614:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003616:	e002      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	3b01      	subs	r3, #1
 800361c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800361e:	4b15      	ldr	r3, [pc, #84]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800362a:	d102      	bne.n	8003632 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f2      	bne.n	8003618 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003632:	4b10      	ldr	r3, [pc, #64]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800363a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800363e:	d112      	bne.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e011      	b.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003644:	4b0b      	ldr	r3, [pc, #44]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800364a:	4a0a      	ldr	r2, [pc, #40]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800364c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003650:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003654:	e007      	b.n	8003666 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003656:	4b07      	ldr	r3, [pc, #28]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800365e:	4a05      	ldr	r2, [pc, #20]	; (8003674 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003660:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003664:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3714      	adds	r7, #20
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr
 8003674:	40007000 	.word	0x40007000
 8003678:	20000030 	.word	0x20000030
 800367c:	431bde83 	.word	0x431bde83

08003680 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a04      	ldr	r2, [pc, #16]	; (800369c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800368a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800368e:	6093      	str	r3, [r2, #8]
}
 8003690:	bf00      	nop
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr
 800369a:	bf00      	nop
 800369c:	40007000 	.word	0x40007000

080036a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b088      	sub	sp, #32
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d101      	bne.n	80036b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e306      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f003 0301 	and.w	r3, r3, #1
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d075      	beq.n	80037aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036be:	4b97      	ldr	r3, [pc, #604]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	f003 030c 	and.w	r3, r3, #12
 80036c6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c8:	4b94      	ldr	r3, [pc, #592]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	f003 0303 	and.w	r3, r3, #3
 80036d0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	2b0c      	cmp	r3, #12
 80036d6:	d102      	bne.n	80036de <HAL_RCC_OscConfig+0x3e>
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	2b03      	cmp	r3, #3
 80036dc:	d002      	beq.n	80036e4 <HAL_RCC_OscConfig+0x44>
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	2b08      	cmp	r3, #8
 80036e2:	d10b      	bne.n	80036fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e4:	4b8d      	ldr	r3, [pc, #564]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d05b      	beq.n	80037a8 <HAL_RCC_OscConfig+0x108>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d157      	bne.n	80037a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e2e1      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003704:	d106      	bne.n	8003714 <HAL_RCC_OscConfig+0x74>
 8003706:	4b85      	ldr	r3, [pc, #532]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a84      	ldr	r2, [pc, #528]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800370c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003710:	6013      	str	r3, [r2, #0]
 8003712:	e01d      	b.n	8003750 <HAL_RCC_OscConfig+0xb0>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371c:	d10c      	bne.n	8003738 <HAL_RCC_OscConfig+0x98>
 800371e:	4b7f      	ldr	r3, [pc, #508]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a7e      	ldr	r2, [pc, #504]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003724:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003728:	6013      	str	r3, [r2, #0]
 800372a:	4b7c      	ldr	r3, [pc, #496]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a7b      	ldr	r2, [pc, #492]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003730:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003734:	6013      	str	r3, [r2, #0]
 8003736:	e00b      	b.n	8003750 <HAL_RCC_OscConfig+0xb0>
 8003738:	4b78      	ldr	r3, [pc, #480]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a77      	ldr	r2, [pc, #476]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800373e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003742:	6013      	str	r3, [r2, #0]
 8003744:	4b75      	ldr	r3, [pc, #468]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a74      	ldr	r2, [pc, #464]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800374a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800374e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd ff04 	bl	8001564 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003760:	f7fd ff00 	bl	8001564 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e2a6      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003772:	4b6a      	ldr	r3, [pc, #424]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d0f0      	beq.n	8003760 <HAL_RCC_OscConfig+0xc0>
 800377e:	e014      	b.n	80037aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fd fef0 	bl	8001564 <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003788:	f7fd feec 	bl	8001564 <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b64      	cmp	r3, #100	; 0x64
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e292      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800379a:	4b60      	ldr	r3, [pc, #384]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d1f0      	bne.n	8003788 <HAL_RCC_OscConfig+0xe8>
 80037a6:	e000      	b.n	80037aa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d075      	beq.n	80038a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b6:	4b59      	ldr	r3, [pc, #356]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 030c 	and.w	r3, r3, #12
 80037be:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037c0:	4b56      	ldr	r3, [pc, #344]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	f003 0303 	and.w	r3, r3, #3
 80037c8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80037ca:	69bb      	ldr	r3, [r7, #24]
 80037cc:	2b0c      	cmp	r3, #12
 80037ce:	d102      	bne.n	80037d6 <HAL_RCC_OscConfig+0x136>
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d002      	beq.n	80037dc <HAL_RCC_OscConfig+0x13c>
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b04      	cmp	r3, #4
 80037da:	d11f      	bne.n	800381c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_OscConfig+0x154>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68db      	ldr	r3, [r3, #12]
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d101      	bne.n	80037f4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e265      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037f4:	4b49      	ldr	r3, [pc, #292]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	691b      	ldr	r3, [r3, #16]
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	4946      	ldr	r1, [pc, #280]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003808:	4b45      	ldr	r3, [pc, #276]	; (8003920 <HAL_RCC_OscConfig+0x280>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fd fe5d 	bl	80014cc <HAL_InitTick>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d043      	beq.n	80038a0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003818:	2301      	movs	r3, #1
 800381a:	e251      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d023      	beq.n	800386c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003824:	4b3d      	ldr	r3, [pc, #244]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3c      	ldr	r2, [pc, #240]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800382a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7fd fe98 	bl	8001564 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003838:	f7fd fe94 	bl	8001564 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e23a      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003852:	2b00      	cmp	r3, #0
 8003854:	d0f0      	beq.n	8003838 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	061b      	lsls	r3, r3, #24
 8003864:	492d      	ldr	r1, [pc, #180]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 800386a:	e01a      	b.n	80038a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800386c:	4b2b      	ldr	r3, [pc, #172]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a2a      	ldr	r2, [pc, #168]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003872:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003878:	f7fd fe74 	bl	8001564 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7fd fe70 	bl	8001564 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e216      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003892:	4b22      	ldr	r3, [pc, #136]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1e0>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80038a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0308 	and.w	r3, r3, #8
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d041      	beq.n	8003932 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d01c      	beq.n	80038f0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b6:	4b19      	ldr	r3, [pc, #100]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038bc:	4a17      	ldr	r2, [pc, #92]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038be:	f043 0301 	orr.w	r3, r3, #1
 80038c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c6:	f7fd fe4d 	bl	8001564 <HAL_GetTick>
 80038ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038cc:	e008      	b.n	80038e0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ce:	f7fd fe49 	bl	8001564 <HAL_GetTick>
 80038d2:	4602      	mov	r2, r0
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	1ad3      	subs	r3, r2, r3
 80038d8:	2b02      	cmp	r3, #2
 80038da:	d901      	bls.n	80038e0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80038dc:	2303      	movs	r3, #3
 80038de:	e1ef      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038e0:	4b0e      	ldr	r3, [pc, #56]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e6:	f003 0302 	and.w	r3, r3, #2
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d0ef      	beq.n	80038ce <HAL_RCC_OscConfig+0x22e>
 80038ee:	e020      	b.n	8003932 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038f0:	4b0a      	ldr	r3, [pc, #40]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038f6:	4a09      	ldr	r2, [pc, #36]	; (800391c <HAL_RCC_OscConfig+0x27c>)
 80038f8:	f023 0301 	bic.w	r3, r3, #1
 80038fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003900:	f7fd fe30 	bl	8001564 <HAL_GetTick>
 8003904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003906:	e00d      	b.n	8003924 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003908:	f7fd fe2c 	bl	8001564 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d906      	bls.n	8003924 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e1d2      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
 800391a:	bf00      	nop
 800391c:	40021000 	.word	0x40021000
 8003920:	20000034 	.word	0x20000034
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003924:	4b8c      	ldr	r3, [pc, #560]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003926:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1ea      	bne.n	8003908 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	2b00      	cmp	r3, #0
 800393c:	f000 80a6 	beq.w	8003a8c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003940:	2300      	movs	r3, #0
 8003942:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003944:	4b84      	ldr	r3, [pc, #528]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_OscConfig+0x2b4>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <HAL_RCC_OscConfig+0x2b6>
 8003954:	2300      	movs	r3, #0
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00d      	beq.n	8003976 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800395a:	4b7f      	ldr	r3, [pc, #508]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 800395c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800395e:	4a7e      	ldr	r2, [pc, #504]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003964:	6593      	str	r3, [r2, #88]	; 0x58
 8003966:	4b7c      	ldr	r3, [pc, #496]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396e:	60fb      	str	r3, [r7, #12]
 8003970:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003972:	2301      	movs	r3, #1
 8003974:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003976:	4b79      	ldr	r3, [pc, #484]	; (8003b5c <HAL_RCC_OscConfig+0x4bc>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d118      	bne.n	80039b4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003982:	4b76      	ldr	r3, [pc, #472]	; (8003b5c <HAL_RCC_OscConfig+0x4bc>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a75      	ldr	r2, [pc, #468]	; (8003b5c <HAL_RCC_OscConfig+0x4bc>)
 8003988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800398c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800398e:	f7fd fde9 	bl	8001564 <HAL_GetTick>
 8003992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003994:	e008      	b.n	80039a8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003996:	f7fd fde5 	bl	8001564 <HAL_GetTick>
 800399a:	4602      	mov	r2, r0
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	1ad3      	subs	r3, r2, r3
 80039a0:	2b02      	cmp	r3, #2
 80039a2:	d901      	bls.n	80039a8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e18b      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039a8:	4b6c      	ldr	r3, [pc, #432]	; (8003b5c <HAL_RCC_OscConfig+0x4bc>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0f0      	beq.n	8003996 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d108      	bne.n	80039ce <HAL_RCC_OscConfig+0x32e>
 80039bc:	4b66      	ldr	r3, [pc, #408]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039c2:	4a65      	ldr	r2, [pc, #404]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039c4:	f043 0301 	orr.w	r3, r3, #1
 80039c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039cc:	e024      	b.n	8003a18 <HAL_RCC_OscConfig+0x378>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	2b05      	cmp	r3, #5
 80039d4:	d110      	bne.n	80039f8 <HAL_RCC_OscConfig+0x358>
 80039d6:	4b60      	ldr	r3, [pc, #384]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039dc:	4a5e      	ldr	r2, [pc, #376]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e6:	4b5c      	ldr	r3, [pc, #368]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ec:	4a5a      	ldr	r2, [pc, #360]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039ee:	f043 0301 	orr.w	r3, r3, #1
 80039f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039f6:	e00f      	b.n	8003a18 <HAL_RCC_OscConfig+0x378>
 80039f8:	4b57      	ldr	r3, [pc, #348]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 80039fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fe:	4a56      	ldr	r2, [pc, #344]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a00:	f023 0301 	bic.w	r3, r3, #1
 8003a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a08:	4b53      	ldr	r3, [pc, #332]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a0e:	4a52      	ldr	r2, [pc, #328]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a10:	f023 0304 	bic.w	r3, r3, #4
 8003a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d016      	beq.n	8003a4e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a20:	f7fd fda0 	bl	8001564 <HAL_GetTick>
 8003a24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a26:	e00a      	b.n	8003a3e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a28:	f7fd fd9c 	bl	8001564 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d901      	bls.n	8003a3e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e140      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a3e:	4b46      	ldr	r3, [pc, #280]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a44:	f003 0302 	and.w	r3, r3, #2
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d0ed      	beq.n	8003a28 <HAL_RCC_OscConfig+0x388>
 8003a4c:	e015      	b.n	8003a7a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a4e:	f7fd fd89 	bl	8001564 <HAL_GetTick>
 8003a52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a54:	e00a      	b.n	8003a6c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a56:	f7fd fd85 	bl	8001564 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d901      	bls.n	8003a6c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a68:	2303      	movs	r3, #3
 8003a6a:	e129      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a6c:	4b3a      	ldr	r3, [pc, #232]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1ed      	bne.n	8003a56 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a7a:	7ffb      	ldrb	r3, [r7, #31]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d105      	bne.n	8003a8c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a80:	4b35      	ldr	r3, [pc, #212]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a84:	4a34      	ldr	r2, [pc, #208]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003a86:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0320 	and.w	r3, r3, #32
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d03c      	beq.n	8003b12 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01c      	beq.n	8003ada <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003aa0:	4b2d      	ldr	r3, [pc, #180]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003aa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003aa6:	4a2c      	ldr	r2, [pc, #176]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003aa8:	f043 0301 	orr.w	r3, r3, #1
 8003aac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ab0:	f7fd fd58 	bl	8001564 <HAL_GetTick>
 8003ab4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ab6:	e008      	b.n	8003aca <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ab8:	f7fd fd54 	bl	8001564 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b02      	cmp	r3, #2
 8003ac4:	d901      	bls.n	8003aca <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e0fa      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aca:	4b23      	ldr	r3, [pc, #140]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003acc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ef      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x418>
 8003ad8:	e01b      	b.n	8003b12 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003ada:	4b1f      	ldr	r3, [pc, #124]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003adc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ae0:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003ae2:	f023 0301 	bic.w	r3, r3, #1
 8003ae6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aea:	f7fd fd3b 	bl	8001564 <HAL_GetTick>
 8003aee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003af0:	e008      	b.n	8003b04 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003af2:	f7fd fd37 	bl	8001564 <HAL_GetTick>
 8003af6:	4602      	mov	r2, r0
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0dd      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b04:	4b14      	ldr	r3, [pc, #80]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003b06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b0a:	f003 0302 	and.w	r3, r3, #2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1ef      	bne.n	8003af2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	69db      	ldr	r3, [r3, #28]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f000 80d1 	beq.w	8003cbe <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003b1c:	4b0e      	ldr	r3, [pc, #56]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 030c 	and.w	r3, r3, #12
 8003b24:	2b0c      	cmp	r3, #12
 8003b26:	f000 808b 	beq.w	8003c40 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	2b02      	cmp	r3, #2
 8003b30:	d15e      	bne.n	8003bf0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b32:	4b09      	ldr	r3, [pc, #36]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <HAL_RCC_OscConfig+0x4b8>)
 8003b38:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3e:	f7fd fd11 	bl	8001564 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b44:	e00c      	b.n	8003b60 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b46:	f7fd fd0d 	bl	8001564 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d905      	bls.n	8003b60 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e0b3      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
 8003b58:	40021000 	.word	0x40021000
 8003b5c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b60:	4b59      	ldr	r3, [pc, #356]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d1ec      	bne.n	8003b46 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b6c:	4b56      	ldr	r3, [pc, #344]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003b6e:	68da      	ldr	r2, [r3, #12]
 8003b70:	4b56      	ldr	r3, [pc, #344]	; (8003ccc <HAL_RCC_OscConfig+0x62c>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	687a      	ldr	r2, [r7, #4]
 8003b76:	6a11      	ldr	r1, [r2, #32]
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b7c:	3a01      	subs	r2, #1
 8003b7e:	0112      	lsls	r2, r2, #4
 8003b80:	4311      	orrs	r1, r2
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003b86:	0212      	lsls	r2, r2, #8
 8003b88:	4311      	orrs	r1, r2
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003b8e:	0852      	lsrs	r2, r2, #1
 8003b90:	3a01      	subs	r2, #1
 8003b92:	0552      	lsls	r2, r2, #21
 8003b94:	4311      	orrs	r1, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003b9a:	0852      	lsrs	r2, r2, #1
 8003b9c:	3a01      	subs	r2, #1
 8003b9e:	0652      	lsls	r2, r2, #25
 8003ba0:	4311      	orrs	r1, r2
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003ba6:	06d2      	lsls	r2, r2, #27
 8003ba8:	430a      	orrs	r2, r1
 8003baa:	4947      	ldr	r1, [pc, #284]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bb0:	4b45      	ldr	r3, [pc, #276]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a44      	ldr	r2, [pc, #272]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003bbc:	4b42      	ldr	r3, [pc, #264]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bbe:	68db      	ldr	r3, [r3, #12]
 8003bc0:	4a41      	ldr	r2, [pc, #260]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003bc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc8:	f7fd fccc 	bl	8001564 <HAL_GetTick>
 8003bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003bce:	e008      	b.n	8003be2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bd0:	f7fd fcc8 	bl	8001564 <HAL_GetTick>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	693b      	ldr	r3, [r7, #16]
 8003bd8:	1ad3      	subs	r3, r2, r3
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e06e      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003be2:	4b39      	ldr	r3, [pc, #228]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d0f0      	beq.n	8003bd0 <HAL_RCC_OscConfig+0x530>
 8003bee:	e066      	b.n	8003cbe <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bf0:	4b35      	ldr	r3, [pc, #212]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bf6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003bfa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	4a31      	ldr	r2, [pc, #196]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003c02:	f023 0303 	bic.w	r3, r3, #3
 8003c06:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003c08:	4b2f      	ldr	r3, [pc, #188]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a2e      	ldr	r2, [pc, #184]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003c0e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c16:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c18:	f7fd fca4 	bl	8001564 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c20:	f7fd fca0 	bl	8001564 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e046      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003c32:	4b25      	ldr	r3, [pc, #148]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0x580>
 8003c3e:	e03e      	b.n	8003cbe <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	69db      	ldr	r3, [r3, #28]
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d101      	bne.n	8003c4c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e039      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003c4c:	4b1e      	ldr	r3, [pc, #120]	; (8003cc8 <HAL_RCC_OscConfig+0x628>)
 8003c4e:	68db      	ldr	r3, [r3, #12]
 8003c50:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f003 0203 	and.w	r2, r3, #3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a1b      	ldr	r3, [r3, #32]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d12c      	bne.n	8003cba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	3b01      	subs	r3, #1
 8003c6c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	d123      	bne.n	8003cba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c7c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d11b      	bne.n	8003cba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d113      	bne.n	8003cba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c9c:	085b      	lsrs	r3, r3, #1
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d109      	bne.n	8003cba <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cb0:	085b      	lsrs	r3, r3, #1
 8003cb2:	3b01      	subs	r3, #1
 8003cb4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	d001      	beq.n	8003cbe <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e000      	b.n	8003cc0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003cbe:	2300      	movs	r3, #0
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3720      	adds	r7, #32
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	019f800c 	.word	0x019f800c

08003cd0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e11e      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003ce8:	4b91      	ldr	r3, [pc, #580]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d910      	bls.n	8003d18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cf6:	4b8e      	ldr	r3, [pc, #568]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 020f 	bic.w	r2, r3, #15
 8003cfe:	498c      	ldr	r1, [pc, #560]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d06:	4b8a      	ldr	r3, [pc, #552]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 030f 	and.w	r3, r3, #15
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d001      	beq.n	8003d18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d14:	2301      	movs	r3, #1
 8003d16:	e106      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f003 0301 	and.w	r3, r3, #1
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d073      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d129      	bne.n	8003d80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003d2c:	4b81      	ldr	r3, [pc, #516]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d101      	bne.n	8003d3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e0f4      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003d3c:	f000 f966 	bl	800400c <RCC_GetSysClockFreqFromPLLSource>
 8003d40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	4a7c      	ldr	r2, [pc, #496]	; (8003f38 <HAL_RCC_ClockConfig+0x268>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d93f      	bls.n	8003dca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d4a:	4b7a      	ldr	r3, [pc, #488]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d009      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d033      	beq.n	8003dca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d12f      	bne.n	8003dca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d6a:	4b72      	ldr	r3, [pc, #456]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003d6c:	689b      	ldr	r3, [r3, #8]
 8003d6e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d72:	4a70      	ldr	r2, [pc, #448]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003d74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003d78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d7a:	2380      	movs	r3, #128	; 0x80
 8003d7c:	617b      	str	r3, [r7, #20]
 8003d7e:	e024      	b.n	8003dca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	2b02      	cmp	r3, #2
 8003d86:	d107      	bne.n	8003d98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d88:	4b6a      	ldr	r3, [pc, #424]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d109      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0c6      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d98:	4b66      	ldr	r3, [pc, #408]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d101      	bne.n	8003da8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	e0be      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003da8:	f000 f8ce 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003dac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	4a61      	ldr	r2, [pc, #388]	; (8003f38 <HAL_RCC_ClockConfig+0x268>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d909      	bls.n	8003dca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003db6:	4b5f      	ldr	r3, [pc, #380]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dbe:	4a5d      	ldr	r2, [pc, #372]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003dc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003dc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003dc6:	2380      	movs	r3, #128	; 0x80
 8003dc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003dca:	4b5a      	ldr	r3, [pc, #360]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f023 0203 	bic.w	r2, r3, #3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	4957      	ldr	r1, [pc, #348]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ddc:	f7fd fbc2 	bl	8001564 <HAL_GetTick>
 8003de0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003de2:	e00a      	b.n	8003dfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003de4:	f7fd fbbe 	bl	8001564 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d901      	bls.n	8003dfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003df6:	2303      	movs	r3, #3
 8003df8:	e095      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dfa:	4b4e      	ldr	r3, [pc, #312]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f003 020c 	and.w	r2, r3, #12
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	685b      	ldr	r3, [r3, #4]
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d1eb      	bne.n	8003de4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f003 0302 	and.w	r3, r3, #2
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d023      	beq.n	8003e60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f003 0304 	and.w	r3, r3, #4
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003e24:	4b43      	ldr	r3, [pc, #268]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	4a42      	ldr	r2, [pc, #264]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e2a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 0308 	and.w	r3, r3, #8
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d007      	beq.n	8003e4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003e3c:	4b3d      	ldr	r3, [pc, #244]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e44:	4a3b      	ldr	r2, [pc, #236]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003e4c:	4b39      	ldr	r3, [pc, #228]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	4936      	ldr	r1, [pc, #216]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	608b      	str	r3, [r1, #8]
 8003e5e:	e008      	b.n	8003e72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2b80      	cmp	r3, #128	; 0x80
 8003e64:	d105      	bne.n	8003e72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e66:	4b33      	ldr	r3, [pc, #204]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	4a32      	ldr	r2, [pc, #200]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e72:	4b2f      	ldr	r3, [pc, #188]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	683a      	ldr	r2, [r7, #0]
 8003e7c:	429a      	cmp	r2, r3
 8003e7e:	d21d      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e80:	4b2b      	ldr	r3, [pc, #172]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f023 020f 	bic.w	r2, r3, #15
 8003e88:	4929      	ldr	r1, [pc, #164]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	4313      	orrs	r3, r2
 8003e8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e90:	f7fd fb68 	bl	8001564 <HAL_GetTick>
 8003e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e98:	f7fd fb64 	bl	8001564 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e03b      	b.n	8003f26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eae:	4b20      	ldr	r3, [pc, #128]	; (8003f30 <HAL_RCC_ClockConfig+0x260>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d1ed      	bne.n	8003e98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b1a      	ldr	r3, [pc, #104]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4917      	ldr	r1, [pc, #92]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003ee6:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003ee8:	689b      	ldr	r3, [r3, #8]
 8003eea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490f      	ldr	r1, [pc, #60]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003efa:	f000 f825 	bl	8003f48 <HAL_RCC_GetSysClockFreq>
 8003efe:	4602      	mov	r2, r0
 8003f00:	4b0c      	ldr	r3, [pc, #48]	; (8003f34 <HAL_RCC_ClockConfig+0x264>)
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	490c      	ldr	r1, [pc, #48]	; (8003f3c <HAL_RCC_ClockConfig+0x26c>)
 8003f0c:	5ccb      	ldrb	r3, [r1, r3]
 8003f0e:	f003 031f 	and.w	r3, r3, #31
 8003f12:	fa22 f303 	lsr.w	r3, r2, r3
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <HAL_RCC_ClockConfig+0x270>)
 8003f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003f1a:	4b0a      	ldr	r3, [pc, #40]	; (8003f44 <HAL_RCC_ClockConfig+0x274>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fd fad4 	bl	80014cc <HAL_InitTick>
 8003f24:	4603      	mov	r3, r0
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3718      	adds	r7, #24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	40022000 	.word	0x40022000
 8003f34:	40021000 	.word	0x40021000
 8003f38:	04c4b400 	.word	0x04c4b400
 8003f3c:	0800a3d8 	.word	0x0800a3d8
 8003f40:	20000030 	.word	0x20000030
 8003f44:	20000034 	.word	0x20000034

08003f48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b087      	sub	sp, #28
 8003f4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003f4e:	4b2c      	ldr	r3, [pc, #176]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d102      	bne.n	8003f60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f5a:	4b2a      	ldr	r3, [pc, #168]	; (8004004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f5c:	613b      	str	r3, [r7, #16]
 8003f5e:	e047      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f003 030c 	and.w	r3, r3, #12
 8003f68:	2b08      	cmp	r3, #8
 8003f6a:	d102      	bne.n	8003f72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f6c:	4b26      	ldr	r3, [pc, #152]	; (8004008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f6e:	613b      	str	r3, [r7, #16]
 8003f70:	e03e      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f72:	4b23      	ldr	r3, [pc, #140]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
 8003f7a:	2b0c      	cmp	r3, #12
 8003f7c:	d136      	bne.n	8003fec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f7e:	4b20      	ldr	r3, [pc, #128]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f88:	4b1d      	ldr	r3, [pc, #116]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f8a:	68db      	ldr	r3, [r3, #12]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 030f 	and.w	r3, r3, #15
 8003f92:	3301      	adds	r3, #1
 8003f94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2b03      	cmp	r3, #3
 8003f9a:	d10c      	bne.n	8003fb6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f9c:	4a1a      	ldr	r2, [pc, #104]	; (8004008 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fa4:	4a16      	ldr	r2, [pc, #88]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fa6:	68d2      	ldr	r2, [r2, #12]
 8003fa8:	0a12      	lsrs	r2, r2, #8
 8003faa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fae:	fb02 f303 	mul.w	r3, r2, r3
 8003fb2:	617b      	str	r3, [r7, #20]
      break;
 8003fb4:	e00c      	b.n	8003fd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003fb6:	4a13      	ldr	r2, [pc, #76]	; (8004004 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fbe:	4a10      	ldr	r2, [pc, #64]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fc0:	68d2      	ldr	r2, [r2, #12]
 8003fc2:	0a12      	lsrs	r2, r2, #8
 8003fc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003fc8:	fb02 f303 	mul.w	r3, r2, r3
 8003fcc:	617b      	str	r3, [r7, #20]
      break;
 8003fce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003fd0:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	0e5b      	lsrs	r3, r3, #25
 8003fd6:	f003 0303 	and.w	r3, r3, #3
 8003fda:	3301      	adds	r3, #1
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	e001      	b.n	8003ff0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003ff0:	693b      	ldr	r3, [r7, #16]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	371c      	adds	r7, #28
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	40021000 	.word	0x40021000
 8004004:	00f42400 	.word	0x00f42400
 8004008:	007a1200 	.word	0x007a1200

0800400c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800400c:	b480      	push	{r7}
 800400e:	b087      	sub	sp, #28
 8004010:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004012:	4b1e      	ldr	r3, [pc, #120]	; (800408c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004014:	68db      	ldr	r3, [r3, #12]
 8004016:	f003 0303 	and.w	r3, r3, #3
 800401a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800401c:	4b1b      	ldr	r3, [pc, #108]	; (800408c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800401e:	68db      	ldr	r3, [r3, #12]
 8004020:	091b      	lsrs	r3, r3, #4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	3301      	adds	r3, #1
 8004028:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	2b03      	cmp	r3, #3
 800402e:	d10c      	bne.n	800404a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004030:	4a17      	ldr	r2, [pc, #92]	; (8004090 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	fbb2 f3f3 	udiv	r3, r2, r3
 8004038:	4a14      	ldr	r2, [pc, #80]	; (800408c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800403a:	68d2      	ldr	r2, [r2, #12]
 800403c:	0a12      	lsrs	r2, r2, #8
 800403e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004042:	fb02 f303 	mul.w	r3, r2, r3
 8004046:	617b      	str	r3, [r7, #20]
    break;
 8004048:	e00c      	b.n	8004064 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800404a:	4a12      	ldr	r2, [pc, #72]	; (8004094 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004052:	4a0e      	ldr	r2, [pc, #56]	; (800408c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004054:	68d2      	ldr	r2, [r2, #12]
 8004056:	0a12      	lsrs	r2, r2, #8
 8004058:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800405c:	fb02 f303 	mul.w	r3, r2, r3
 8004060:	617b      	str	r3, [r7, #20]
    break;
 8004062:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004064:	4b09      	ldr	r3, [pc, #36]	; (800408c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	0e5b      	lsrs	r3, r3, #25
 800406a:	f003 0303 	and.w	r3, r3, #3
 800406e:	3301      	adds	r3, #1
 8004070:	005b      	lsls	r3, r3, #1
 8004072:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	fbb2 f3f3 	udiv	r3, r2, r3
 800407c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800407e:	687b      	ldr	r3, [r7, #4]
}
 8004080:	4618      	mov	r0, r3
 8004082:	371c      	adds	r7, #28
 8004084:	46bd      	mov	sp, r7
 8004086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408a:	4770      	bx	lr
 800408c:	40021000 	.word	0x40021000
 8004090:	007a1200 	.word	0x007a1200
 8004094:	00f42400 	.word	0x00f42400

08004098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80040a0:	2300      	movs	r3, #0
 80040a2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80040a4:	2300      	movs	r3, #0
 80040a6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	f000 8098 	beq.w	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040b6:	2300      	movs	r3, #0
 80040b8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040ba:	4b43      	ldr	r3, [pc, #268]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10d      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040c6:	4b40      	ldr	r3, [pc, #256]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ca:	4a3f      	ldr	r2, [pc, #252]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040d0:	6593      	str	r3, [r2, #88]	; 0x58
 80040d2:	4b3d      	ldr	r3, [pc, #244]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040da:	60bb      	str	r3, [r7, #8]
 80040dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040de:	2301      	movs	r3, #1
 80040e0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80040e2:	4b3a      	ldr	r3, [pc, #232]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a39      	ldr	r2, [pc, #228]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80040e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040ec:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80040ee:	f7fd fa39 	bl	8001564 <HAL_GetTick>
 80040f2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80040f4:	e009      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040f6:	f7fd fa35 	bl	8001564 <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d902      	bls.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004104:	2303      	movs	r3, #3
 8004106:	74fb      	strb	r3, [r7, #19]
        break;
 8004108:	e005      	b.n	8004116 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800410a:	4b30      	ldr	r3, [pc, #192]	; (80041cc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ef      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004116:	7cfb      	ldrb	r3, [r7, #19]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d159      	bne.n	80041d0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800411c:	4b2a      	ldr	r3, [pc, #168]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800411e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004126:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d01e      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	429a      	cmp	r2, r3
 8004136:	d019      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004138:	4b23      	ldr	r3, [pc, #140]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004142:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004144:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004146:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800414a:	4a1f      	ldr	r2, [pc, #124]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800414c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004150:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004154:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415a:	4a1b      	ldr	r2, [pc, #108]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800415c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004160:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004164:	4a18      	ldr	r2, [pc, #96]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	f003 0301 	and.w	r3, r3, #1
 8004172:	2b00      	cmp	r3, #0
 8004174:	d016      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004176:	f7fd f9f5 	bl	8001564 <HAL_GetTick>
 800417a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800417c:	e00b      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800417e:	f7fd f9f1 	bl	8001564 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	f241 3288 	movw	r2, #5000	; 0x1388
 800418c:	4293      	cmp	r3, r2
 800418e:	d902      	bls.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	74fb      	strb	r3, [r7, #19]
            break;
 8004194:	e006      	b.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004196:	4b0c      	ldr	r3, [pc, #48]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419c:	f003 0302 	and.w	r3, r3, #2
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d0ec      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80041a4:	7cfb      	ldrb	r3, [r7, #19]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10b      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041aa:	4b07      	ldr	r3, [pc, #28]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b8:	4903      	ldr	r1, [pc, #12]	; (80041c8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	4313      	orrs	r3, r2
 80041bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80041c0:	e008      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80041c2:	7cfb      	ldrb	r3, [r7, #19]
 80041c4:	74bb      	strb	r3, [r7, #18]
 80041c6:	e005      	b.n	80041d4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80041c8:	40021000 	.word	0x40021000
 80041cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041d0:	7cfb      	ldrb	r3, [r7, #19]
 80041d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041d4:	7c7b      	ldrb	r3, [r7, #17]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4ba6      	ldr	r3, [pc, #664]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041de:	4aa5      	ldr	r2, [pc, #660]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0301 	and.w	r3, r3, #1
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00a      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80041f2:	4ba0      	ldr	r3, [pc, #640]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80041f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041f8:	f023 0203 	bic.w	r2, r3, #3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	499c      	ldr	r1, [pc, #624]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f003 0302 	and.w	r3, r3, #2
 8004210:	2b00      	cmp	r3, #0
 8004212:	d00a      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004214:	4b97      	ldr	r3, [pc, #604]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800421a:	f023 020c 	bic.w	r2, r3, #12
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	4994      	ldr	r1, [pc, #592]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004224:	4313      	orrs	r3, r2
 8004226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 0304 	and.w	r3, r3, #4
 8004232:	2b00      	cmp	r3, #0
 8004234:	d00a      	beq.n	800424c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004236:	4b8f      	ldr	r3, [pc, #572]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800423c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	498b      	ldr	r1, [pc, #556]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004246:	4313      	orrs	r3, r2
 8004248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f003 0308 	and.w	r3, r3, #8
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004258:	4b86      	ldr	r3, [pc, #536]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800425a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800425e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	4983      	ldr	r1, [pc, #524]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004268:	4313      	orrs	r3, r2
 800426a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0320 	and.w	r3, r3, #32
 8004276:	2b00      	cmp	r3, #0
 8004278:	d00a      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800427a:	4b7e      	ldr	r3, [pc, #504]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800427c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004280:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	497a      	ldr	r1, [pc, #488]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800429c:	4b75      	ldr	r3, [pc, #468]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800429e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	4972      	ldr	r1, [pc, #456]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042be:	4b6d      	ldr	r3, [pc, #436]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4969      	ldr	r1, [pc, #420]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e0:	4b64      	ldr	r3, [pc, #400]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6a1b      	ldr	r3, [r3, #32]
 80042ee:	4961      	ldr	r1, [pc, #388]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004302:	4b5c      	ldr	r3, [pc, #368]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004310:	4958      	ldr	r1, [pc, #352]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004320:	2b00      	cmp	r3, #0
 8004322:	d015      	beq.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004324:	4b53      	ldr	r3, [pc, #332]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004326:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800432a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004332:	4950      	ldr	r1, [pc, #320]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004344:	4b4b      	ldr	r3, [pc, #300]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	4a4a      	ldr	r2, [pc, #296]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800434a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800434e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004358:	2b00      	cmp	r3, #0
 800435a:	d015      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800435c:	4b45      	ldr	r3, [pc, #276]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800435e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004362:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800436a:	4942      	ldr	r1, [pc, #264]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800436c:	4313      	orrs	r3, r2
 800436e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004376:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800437a:	d105      	bne.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800437c:	4b3d      	ldr	r3, [pc, #244]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4a3c      	ldr	r2, [pc, #240]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004382:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004386:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d015      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004394:	4b37      	ldr	r3, [pc, #220]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800439a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a2:	4934      	ldr	r1, [pc, #208]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043a4:	4313      	orrs	r3, r2
 80043a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043b2:	d105      	bne.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b4:	4b2f      	ldr	r3, [pc, #188]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	4a2e      	ldr	r2, [pc, #184]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043be:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043cc:	4b29      	ldr	r3, [pc, #164]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043da:	4926      	ldr	r1, [pc, #152]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043ea:	d105      	bne.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043ec:	4b21      	ldr	r3, [pc, #132]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	4a20      	ldr	r2, [pc, #128]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80043f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043f6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d015      	beq.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004404:	4b1b      	ldr	r3, [pc, #108]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004406:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800440a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004412:	4918      	ldr	r1, [pc, #96]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004414:	4313      	orrs	r3, r2
 8004416:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004422:	d105      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004424:	4b13      	ldr	r3, [pc, #76]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004426:	68db      	ldr	r3, [r3, #12]
 8004428:	4a12      	ldr	r2, [pc, #72]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800442a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800442e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d015      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800443c:	4b0d      	ldr	r3, [pc, #52]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800443e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004442:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800444a:	490a      	ldr	r1, [pc, #40]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004456:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800445a:	d105      	bne.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800445c:	4b05      	ldr	r3, [pc, #20]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4a04      	ldr	r2, [pc, #16]	; (8004474 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004462:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004466:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004468:	7cbb      	ldrb	r3, [r7, #18]
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	40021000 	.word	0x40021000

08004478 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b082      	sub	sp, #8
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d101      	bne.n	800448a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e049      	b.n	800451e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004490:	b2db      	uxtb	r3, r3
 8004492:	2b00      	cmp	r3, #0
 8004494:	d106      	bne.n	80044a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2200      	movs	r2, #0
 800449a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800449e:	6878      	ldr	r0, [r7, #4]
 80044a0:	f7fc fe6a 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2202      	movs	r2, #2
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681a      	ldr	r2, [r3, #0]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	3304      	adds	r3, #4
 80044b4:	4619      	mov	r1, r3
 80044b6:	4610      	mov	r0, r2
 80044b8:	f000 fde8 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2201      	movs	r2, #1
 80044f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b01      	cmp	r3, #1
 800453a:	d001      	beq.n	8004540 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e04a      	b.n	80045d6 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0201 	orr.w	r2, r2, #1
 8004556:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a21      	ldr	r2, [pc, #132]	; (80045e4 <HAL_TIM_Base_Start_IT+0xbc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d018      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x6c>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800456a:	d013      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x6c>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1d      	ldr	r2, [pc, #116]	; (80045e8 <HAL_TIM_Base_Start_IT+0xc0>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d00e      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x6c>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1c      	ldr	r2, [pc, #112]	; (80045ec <HAL_TIM_Base_Start_IT+0xc4>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d009      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x6c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1a      	ldr	r2, [pc, #104]	; (80045f0 <HAL_TIM_Base_Start_IT+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d004      	beq.n	8004594 <HAL_TIM_Base_Start_IT+0x6c>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a19      	ldr	r2, [pc, #100]	; (80045f4 <HAL_TIM_Base_Start_IT+0xcc>)
 8004590:	4293      	cmp	r3, r2
 8004592:	d115      	bne.n	80045c0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	4b17      	ldr	r3, [pc, #92]	; (80045f8 <HAL_TIM_Base_Start_IT+0xd0>)
 800459c:	4013      	ands	r3, r2
 800459e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b06      	cmp	r3, #6
 80045a4:	d015      	beq.n	80045d2 <HAL_TIM_Base_Start_IT+0xaa>
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045ac:	d011      	beq.n	80045d2 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f042 0201 	orr.w	r2, r2, #1
 80045bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	e008      	b.n	80045d2 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f042 0201 	orr.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
 80045d0:	e000      	b.n	80045d4 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045d2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045d4:	2300      	movs	r3, #0
}
 80045d6:	4618      	mov	r0, r3
 80045d8:	3714      	adds	r7, #20
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40012c00 	.word	0x40012c00
 80045e8:	40000400 	.word	0x40000400
 80045ec:	40000800 	.word	0x40000800
 80045f0:	40013400 	.word	0x40013400
 80045f4:	40014000 	.word	0x40014000
 80045f8:	00010007 	.word	0x00010007

080045fc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e049      	b.n	80046a2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc fd60 	bl	80010e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	3304      	adds	r3, #4
 8004638:	4619      	mov	r1, r3
 800463a:	4610      	mov	r0, r2
 800463c:	f000 fd26 	bl	800508c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2201      	movs	r2, #1
 8004654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2201      	movs	r2, #1
 800465c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2201      	movs	r2, #1
 800466c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2201      	movs	r2, #1
 8004674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2201      	movs	r2, #1
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2201      	movs	r2, #1
 800468c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3708      	adds	r7, #8
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}
	...

080046ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b084      	sub	sp, #16
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d109      	bne.n	80046d0 <HAL_TIM_PWM_Start+0x24>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046c2:	b2db      	uxtb	r3, r3
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	bf14      	ite	ne
 80046c8:	2301      	movne	r3, #1
 80046ca:	2300      	moveq	r3, #0
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	e03c      	b.n	800474a <HAL_TIM_PWM_Start+0x9e>
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	2b04      	cmp	r3, #4
 80046d4:	d109      	bne.n	80046ea <HAL_TIM_PWM_Start+0x3e>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b01      	cmp	r3, #1
 80046e0:	bf14      	ite	ne
 80046e2:	2301      	movne	r3, #1
 80046e4:	2300      	moveq	r3, #0
 80046e6:	b2db      	uxtb	r3, r3
 80046e8:	e02f      	b.n	800474a <HAL_TIM_PWM_Start+0x9e>
 80046ea:	683b      	ldr	r3, [r7, #0]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d109      	bne.n	8004704 <HAL_TIM_PWM_Start+0x58>
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	bf14      	ite	ne
 80046fc:	2301      	movne	r3, #1
 80046fe:	2300      	moveq	r3, #0
 8004700:	b2db      	uxtb	r3, r3
 8004702:	e022      	b.n	800474a <HAL_TIM_PWM_Start+0x9e>
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	2b0c      	cmp	r3, #12
 8004708:	d109      	bne.n	800471e <HAL_TIM_PWM_Start+0x72>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b01      	cmp	r3, #1
 8004714:	bf14      	ite	ne
 8004716:	2301      	movne	r3, #1
 8004718:	2300      	moveq	r3, #0
 800471a:	b2db      	uxtb	r3, r3
 800471c:	e015      	b.n	800474a <HAL_TIM_PWM_Start+0x9e>
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b10      	cmp	r3, #16
 8004722:	d109      	bne.n	8004738 <HAL_TIM_PWM_Start+0x8c>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800472a:	b2db      	uxtb	r3, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	bf14      	ite	ne
 8004730:	2301      	movne	r3, #1
 8004732:	2300      	moveq	r3, #0
 8004734:	b2db      	uxtb	r3, r3
 8004736:	e008      	b.n	800474a <HAL_TIM_PWM_Start+0x9e>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e097      	b.n	8004882 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_TIM_PWM_Start+0xb6>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2202      	movs	r2, #2
 800475c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004760:	e023      	b.n	80047aa <HAL_TIM_PWM_Start+0xfe>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d104      	bne.n	8004772 <HAL_TIM_PWM_Start+0xc6>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004770:	e01b      	b.n	80047aa <HAL_TIM_PWM_Start+0xfe>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0xd6>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004780:	e013      	b.n	80047aa <HAL_TIM_PWM_Start+0xfe>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xe6>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004790:	e00b      	b.n	80047aa <HAL_TIM_PWM_Start+0xfe>
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b10      	cmp	r3, #16
 8004796:	d104      	bne.n	80047a2 <HAL_TIM_PWM_Start+0xf6>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a0:	e003      	b.n	80047aa <HAL_TIM_PWM_Start+0xfe>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	2201      	movs	r2, #1
 80047b0:	6839      	ldr	r1, [r7, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f000 fff0 	bl	8005798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a33      	ldr	r2, [pc, #204]	; (800488c <HAL_TIM_PWM_Start+0x1e0>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_TIM_PWM_Start+0x13e>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a32      	ldr	r2, [pc, #200]	; (8004890 <HAL_TIM_PWM_Start+0x1e4>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_TIM_PWM_Start+0x13e>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a30      	ldr	r2, [pc, #192]	; (8004894 <HAL_TIM_PWM_Start+0x1e8>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_TIM_PWM_Start+0x13e>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a2f      	ldr	r2, [pc, #188]	; (8004898 <HAL_TIM_PWM_Start+0x1ec>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_TIM_PWM_Start+0x13e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a2d      	ldr	r2, [pc, #180]	; (800489c <HAL_TIM_PWM_Start+0x1f0>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d101      	bne.n	80047ee <HAL_TIM_PWM_Start+0x142>
 80047ea:	2301      	movs	r3, #1
 80047ec:	e000      	b.n	80047f0 <HAL_TIM_PWM_Start+0x144>
 80047ee:	2300      	movs	r3, #0
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d007      	beq.n	8004804 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004802:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a20      	ldr	r2, [pc, #128]	; (800488c <HAL_TIM_PWM_Start+0x1e0>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d018      	beq.n	8004840 <HAL_TIM_PWM_Start+0x194>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004816:	d013      	beq.n	8004840 <HAL_TIM_PWM_Start+0x194>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <HAL_TIM_PWM_Start+0x1f4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d00e      	beq.n	8004840 <HAL_TIM_PWM_Start+0x194>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a1f      	ldr	r2, [pc, #124]	; (80048a4 <HAL_TIM_PWM_Start+0x1f8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d009      	beq.n	8004840 <HAL_TIM_PWM_Start+0x194>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a17      	ldr	r2, [pc, #92]	; (8004890 <HAL_TIM_PWM_Start+0x1e4>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d004      	beq.n	8004840 <HAL_TIM_PWM_Start+0x194>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a16      	ldr	r2, [pc, #88]	; (8004894 <HAL_TIM_PWM_Start+0x1e8>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d115      	bne.n	800486c <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689a      	ldr	r2, [r3, #8]
 8004846:	4b18      	ldr	r3, [pc, #96]	; (80048a8 <HAL_TIM_PWM_Start+0x1fc>)
 8004848:	4013      	ands	r3, r2
 800484a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b06      	cmp	r3, #6
 8004850:	d015      	beq.n	800487e <HAL_TIM_PWM_Start+0x1d2>
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d011      	beq.n	800487e <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0201 	orr.w	r2, r2, #1
 8004868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	e008      	b.n	800487e <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f042 0201 	orr.w	r2, r2, #1
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e000      	b.n	8004880 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800487e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3710      	adds	r7, #16
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40012c00 	.word	0x40012c00
 8004890:	40013400 	.word	0x40013400
 8004894:	40014000 	.word	0x40014000
 8004898:	40014400 	.word	0x40014400
 800489c:	40014800 	.word	0x40014800
 80048a0:	40000400 	.word	0x40000400
 80048a4:	40000800 	.word	0x40000800
 80048a8:	00010007 	.word	0x00010007

080048ac <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
 80048b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d101      	bne.n	80048c0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048bc:	2301      	movs	r3, #1
 80048be:	e097      	b.n	80049f0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c6:	b2db      	uxtb	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d106      	bne.n	80048da <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2200      	movs	r2, #0
 80048d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7fc fb45 	bl	8000f64 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2202      	movs	r2, #2
 80048de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	687a      	ldr	r2, [r7, #4]
 80048ea:	6812      	ldr	r2, [r2, #0]
 80048ec:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80048f0:	f023 0307 	bic.w	r3, r3, #7
 80048f4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	3304      	adds	r3, #4
 80048fe:	4619      	mov	r1, r3
 8004900:	4610      	mov	r0, r2
 8004902:	f000 fbc3 	bl	800508c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	699b      	ldr	r3, [r3, #24]
 8004914:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	4313      	orrs	r3, r2
 8004926:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800492e:	f023 0303 	bic.w	r3, r3, #3
 8004932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	699b      	ldr	r3, [r3, #24]
 800493c:	021b      	lsls	r3, r3, #8
 800493e:	4313      	orrs	r3, r2
 8004940:	693a      	ldr	r2, [r7, #16]
 8004942:	4313      	orrs	r3, r2
 8004944:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800494c:	f023 030c 	bic.w	r3, r3, #12
 8004950:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004958:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800495c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68da      	ldr	r2, [r3, #12]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	69db      	ldr	r3, [r3, #28]
 8004966:	021b      	lsls	r3, r3, #8
 8004968:	4313      	orrs	r3, r2
 800496a:	693a      	ldr	r2, [r7, #16]
 800496c:	4313      	orrs	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691b      	ldr	r3, [r3, #16]
 8004974:	011a      	lsls	r2, r3, #4
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	6a1b      	ldr	r3, [r3, #32]
 800497a:	031b      	lsls	r3, r3, #12
 800497c:	4313      	orrs	r3, r2
 800497e:	693a      	ldr	r2, [r7, #16]
 8004980:	4313      	orrs	r3, r2
 8004982:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800498a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004992:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	685a      	ldr	r2, [r3, #4]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	011b      	lsls	r3, r3, #4
 800499e:	4313      	orrs	r3, r2
 80049a0:	68fa      	ldr	r2, [r7, #12]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	697a      	ldr	r2, [r7, #20]
 80049ac:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	693a      	ldr	r2, [r7, #16]
 80049b4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2201      	movs	r2, #1
 80049c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2201      	movs	r2, #1
 80049ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2201      	movs	r2, #1
 80049d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2201      	movs	r2, #1
 80049da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2201      	movs	r2, #1
 80049e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3718      	adds	r7, #24
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a08:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004a10:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a18:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a20:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d110      	bne.n	8004a4a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d102      	bne.n	8004a34 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a2e:	7b7b      	ldrb	r3, [r7, #13]
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d001      	beq.n	8004a38 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e069      	b.n	8004b0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a48:	e031      	b.n	8004aae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b04      	cmp	r3, #4
 8004a4e:	d110      	bne.n	8004a72 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a50:	7bbb      	ldrb	r3, [r7, #14]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d102      	bne.n	8004a5c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a56:	7b3b      	ldrb	r3, [r7, #12]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d001      	beq.n	8004a60 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	e055      	b.n	8004b0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2202      	movs	r2, #2
 8004a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a70:	e01d      	b.n	8004aae <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a72:	7bfb      	ldrb	r3, [r7, #15]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d108      	bne.n	8004a8a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a78:	7bbb      	ldrb	r3, [r7, #14]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a7e:	7b7b      	ldrb	r3, [r7, #13]
 8004a80:	2b01      	cmp	r3, #1
 8004a82:	d102      	bne.n	8004a8a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a84:	7b3b      	ldrb	r3, [r7, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e03e      	b.n	8004b0c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2202      	movs	r2, #2
 8004a92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2202      	movs	r2, #2
 8004a9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2202      	movs	r2, #2
 8004aa2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2202      	movs	r2, #2
 8004aaa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_TIM_Encoder_Start+0xc4>
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d008      	beq.n	8004acc <HAL_TIM_Encoder_Start+0xd4>
 8004aba:	e00f      	b.n	8004adc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2201      	movs	r2, #1
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f000 fe67 	bl	8005798 <TIM_CCxChannelCmd>
      break;
 8004aca:	e016      	b.n	8004afa <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f000 fe5f 	bl	8005798 <TIM_CCxChannelCmd>
      break;
 8004ada:	e00e      	b.n	8004afa <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	2100      	movs	r1, #0
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f000 fe57 	bl	8005798 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	2201      	movs	r2, #1
 8004af0:	2104      	movs	r1, #4
 8004af2:	4618      	mov	r0, r3
 8004af4:	f000 fe50 	bl	8005798 <TIM_CCxChannelCmd>
      break;
 8004af8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f042 0201 	orr.w	r2, r2, #1
 8004b08:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3710      	adds	r7, #16
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}

08004b14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b082      	sub	sp, #8
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d122      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	68db      	ldr	r3, [r3, #12]
 8004b30:	f003 0302 	and.w	r3, r3, #2
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d11b      	bne.n	8004b70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f06f 0202 	mvn.w	r2, #2
 8004b40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2201      	movs	r2, #1
 8004b46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f003 0303 	and.w	r3, r3, #3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d003      	beq.n	8004b5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fa7a 	bl	8005050 <HAL_TIM_IC_CaptureCallback>
 8004b5c:	e005      	b.n	8004b6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b5e:	6878      	ldr	r0, [r7, #4]
 8004b60:	f000 fa6c 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fa7d 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0304 	and.w	r3, r3, #4
 8004b7a:	2b04      	cmp	r3, #4
 8004b7c:	d122      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0304 	and.w	r3, r3, #4
 8004b88:	2b04      	cmp	r3, #4
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f06f 0204 	mvn.w	r2, #4
 8004b94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d003      	beq.n	8004bb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 fa50 	bl	8005050 <HAL_TIM_IC_CaptureCallback>
 8004bb0:	e005      	b.n	8004bbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb2:	6878      	ldr	r0, [r7, #4]
 8004bb4:	f000 fa42 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f000 fa53 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	691b      	ldr	r3, [r3, #16]
 8004bca:	f003 0308 	and.w	r3, r3, #8
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d122      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	68db      	ldr	r3, [r3, #12]
 8004bd8:	f003 0308 	and.w	r3, r3, #8
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d11b      	bne.n	8004c18 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f06f 0208 	mvn.w	r2, #8
 8004be8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2204      	movs	r2, #4
 8004bee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	69db      	ldr	r3, [r3, #28]
 8004bf6:	f003 0303 	and.w	r3, r3, #3
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d003      	beq.n	8004c06 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa26 	bl	8005050 <HAL_TIM_IC_CaptureCallback>
 8004c04:	e005      	b.n	8004c12 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 fa18 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 fa29 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	691b      	ldr	r3, [r3, #16]
 8004c1e:	f003 0310 	and.w	r3, r3, #16
 8004c22:	2b10      	cmp	r3, #16
 8004c24:	d122      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68db      	ldr	r3, [r3, #12]
 8004c2c:	f003 0310 	and.w	r3, r3, #16
 8004c30:	2b10      	cmp	r3, #16
 8004c32:	d11b      	bne.n	8004c6c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f06f 0210 	mvn.w	r2, #16
 8004c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2208      	movs	r2, #8
 8004c42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	69db      	ldr	r3, [r3, #28]
 8004c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 f9fc 	bl	8005050 <HAL_TIM_IC_CaptureCallback>
 8004c58:	e005      	b.n	8004c66 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 f9ee 	bl	800503c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 f9ff 	bl	8005064 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d10e      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	68db      	ldr	r3, [r3, #12]
 8004c80:	f003 0301 	and.w	r3, r3, #1
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d107      	bne.n	8004c98 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f06f 0201 	mvn.w	r2, #1
 8004c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c92:	6878      	ldr	r0, [r7, #4]
 8004c94:	f7fb fb6c 	bl	8000370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ca2:	2b80      	cmp	r3, #128	; 0x80
 8004ca4:	d10e      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb0:	2b80      	cmp	r3, #128	; 0x80
 8004cb2:	d107      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 febc 	bl	8005a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004cd2:	d10e      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68db      	ldr	r3, [r3, #12]
 8004cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cde:	2b80      	cmp	r3, #128	; 0x80
 8004ce0:	d107      	bne.n	8004cf2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004cea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 feaf 	bl	8005a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cfc:	2b40      	cmp	r3, #64	; 0x40
 8004cfe:	d10e      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d107      	bne.n	8004d1e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d18:	6878      	ldr	r0, [r7, #4]
 8004d1a:	f000 f9ad 	bl	8005078 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d10e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0320 	and.w	r3, r3, #32
 8004d36:	2b20      	cmp	r3, #32
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f06f 0220 	mvn.w	r2, #32
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fe6f 	bl	8005a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d58:	d10f      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d68:	d107      	bne.n	8004d7a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	f000 fe75 	bl	8005a64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d88:	d10f      	bne.n	8004daa <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d94:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d98:	d107      	bne.n	8004daa <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f000 fe67 	bl	8005a78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004db4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004db8:	d10f      	bne.n	8004dda <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dc4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004dc8:	d107      	bne.n	8004dda <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004dd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f000 fe59 	bl	8005a8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004de4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004de8:	d10f      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004df4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004df8:	d107      	bne.n	8004e0a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fe4b 	bl	8005aa0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}
	...

08004e14 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	60f8      	str	r0, [r7, #12]
 8004e1c:	60b9      	str	r1, [r7, #8]
 8004e1e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e20:	2300      	movs	r3, #0
 8004e22:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d101      	bne.n	8004e32 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e2e:	2302      	movs	r3, #2
 8004e30:	e0ff      	b.n	8005032 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2201      	movs	r2, #1
 8004e36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2b14      	cmp	r3, #20
 8004e3e:	f200 80f0 	bhi.w	8005022 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e42:	a201      	add	r2, pc, #4	; (adr r2, 8004e48 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e48:	08004e9d 	.word	0x08004e9d
 8004e4c:	08005023 	.word	0x08005023
 8004e50:	08005023 	.word	0x08005023
 8004e54:	08005023 	.word	0x08005023
 8004e58:	08004edd 	.word	0x08004edd
 8004e5c:	08005023 	.word	0x08005023
 8004e60:	08005023 	.word	0x08005023
 8004e64:	08005023 	.word	0x08005023
 8004e68:	08004f1f 	.word	0x08004f1f
 8004e6c:	08005023 	.word	0x08005023
 8004e70:	08005023 	.word	0x08005023
 8004e74:	08005023 	.word	0x08005023
 8004e78:	08004f5f 	.word	0x08004f5f
 8004e7c:	08005023 	.word	0x08005023
 8004e80:	08005023 	.word	0x08005023
 8004e84:	08005023 	.word	0x08005023
 8004e88:	08004fa1 	.word	0x08004fa1
 8004e8c:	08005023 	.word	0x08005023
 8004e90:	08005023 	.word	0x08005023
 8004e94:	08005023 	.word	0x08005023
 8004e98:	08004fe1 	.word	0x08004fe1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 f982 	bl	80051ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	699a      	ldr	r2, [r3, #24]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	699a      	ldr	r2, [r3, #24]
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6999      	ldr	r1, [r3, #24]
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	619a      	str	r2, [r3, #24]
      break;
 8004eda:	e0a5      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 f9f2 	bl	80052cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	699a      	ldr	r2, [r3, #24]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	699a      	ldr	r2, [r3, #24]
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6999      	ldr	r1, [r3, #24]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	021a      	lsls	r2, r3, #8
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	619a      	str	r2, [r3, #24]
      break;
 8004f1c:	e084      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	68b9      	ldr	r1, [r7, #8]
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fa5b 	bl	80053e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	69da      	ldr	r2, [r3, #28]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f042 0208 	orr.w	r2, r2, #8
 8004f38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	69da      	ldr	r2, [r3, #28]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0204 	bic.w	r2, r2, #4
 8004f48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	69d9      	ldr	r1, [r3, #28]
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	430a      	orrs	r2, r1
 8004f5a:	61da      	str	r2, [r3, #28]
      break;
 8004f5c:	e064      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	68b9      	ldr	r1, [r7, #8]
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fac3 	bl	80054f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	69da      	ldr	r2, [r3, #28]
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69da      	ldr	r2, [r3, #28]
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69d9      	ldr	r1, [r3, #28]
 8004f90:	68bb      	ldr	r3, [r7, #8]
 8004f92:	691b      	ldr	r3, [r3, #16]
 8004f94:	021a      	lsls	r2, r3, #8
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	61da      	str	r2, [r3, #28]
      break;
 8004f9e:	e043      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f000 fb2c 	bl	8005604 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0208 	orr.w	r2, r2, #8
 8004fba:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0204 	bic.w	r2, r2, #4
 8004fca:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	691a      	ldr	r2, [r3, #16]
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	430a      	orrs	r2, r1
 8004fdc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004fde:	e023      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68b9      	ldr	r1, [r7, #8]
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f000 fb70 	bl	80056cc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ffa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800500a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8005012:	68bb      	ldr	r3, [r7, #8]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	021a      	lsls	r2, r3, #8
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	430a      	orrs	r2, r1
 800501e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005020:	e002      	b.n	8005028 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005022:	2301      	movs	r3, #1
 8005024:	75fb      	strb	r3, [r7, #23]
      break;
 8005026:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	2200      	movs	r2, #0
 800502c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005030:	7dfb      	ldrb	r3, [r7, #23]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop

0800503c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005044:	bf00      	nop
 8005046:	370c      	adds	r7, #12
 8005048:	46bd      	mov	sp, r7
 800504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504e:	4770      	bx	lr

08005050 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005050:	b480      	push	{r7}
 8005052:	b083      	sub	sp, #12
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005058:	bf00      	nop
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr

08005064 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005064:	b480      	push	{r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800506c:	bf00      	nop
 800506e:	370c      	adds	r7, #12
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr

08005078 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005080:	bf00      	nop
 8005082:	370c      	adds	r7, #12
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	4a3c      	ldr	r2, [pc, #240]	; (8005190 <TIM_Base_SetConfig+0x104>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d00f      	beq.n	80050c4 <TIM_Base_SetConfig+0x38>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050aa:	d00b      	beq.n	80050c4 <TIM_Base_SetConfig+0x38>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	4a39      	ldr	r2, [pc, #228]	; (8005194 <TIM_Base_SetConfig+0x108>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d007      	beq.n	80050c4 <TIM_Base_SetConfig+0x38>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	4a38      	ldr	r2, [pc, #224]	; (8005198 <TIM_Base_SetConfig+0x10c>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d003      	beq.n	80050c4 <TIM_Base_SetConfig+0x38>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4a37      	ldr	r2, [pc, #220]	; (800519c <TIM_Base_SetConfig+0x110>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d108      	bne.n	80050d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	4a2d      	ldr	r2, [pc, #180]	; (8005190 <TIM_Base_SetConfig+0x104>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d01b      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e4:	d017      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	4a2a      	ldr	r2, [pc, #168]	; (8005194 <TIM_Base_SetConfig+0x108>)
 80050ea:	4293      	cmp	r3, r2
 80050ec:	d013      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a29      	ldr	r2, [pc, #164]	; (8005198 <TIM_Base_SetConfig+0x10c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d00f      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a28      	ldr	r2, [pc, #160]	; (800519c <TIM_Base_SetConfig+0x110>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d00b      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a27      	ldr	r2, [pc, #156]	; (80051a0 <TIM_Base_SetConfig+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d007      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a26      	ldr	r2, [pc, #152]	; (80051a4 <TIM_Base_SetConfig+0x118>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d003      	beq.n	8005116 <TIM_Base_SetConfig+0x8a>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a25      	ldr	r2, [pc, #148]	; (80051a8 <TIM_Base_SetConfig+0x11c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d108      	bne.n	8005128 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800511c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	68fa      	ldr	r2, [r7, #12]
 8005124:	4313      	orrs	r3, r2
 8005126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	695b      	ldr	r3, [r3, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	689a      	ldr	r2, [r3, #8]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681a      	ldr	r2, [r3, #0]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a10      	ldr	r2, [pc, #64]	; (8005190 <TIM_Base_SetConfig+0x104>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d00f      	beq.n	8005174 <TIM_Base_SetConfig+0xe8>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a11      	ldr	r2, [pc, #68]	; (800519c <TIM_Base_SetConfig+0x110>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d00b      	beq.n	8005174 <TIM_Base_SetConfig+0xe8>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a10      	ldr	r2, [pc, #64]	; (80051a0 <TIM_Base_SetConfig+0x114>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d007      	beq.n	8005174 <TIM_Base_SetConfig+0xe8>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a0f      	ldr	r2, [pc, #60]	; (80051a4 <TIM_Base_SetConfig+0x118>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d003      	beq.n	8005174 <TIM_Base_SetConfig+0xe8>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <TIM_Base_SetConfig+0x11c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d103      	bne.n	800517c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	615a      	str	r2, [r3, #20]
}
 8005182:	bf00      	nop
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	40012c00 	.word	0x40012c00
 8005194:	40000400 	.word	0x40000400
 8005198:	40000800 	.word	0x40000800
 800519c:	40013400 	.word	0x40013400
 80051a0:	40014000 	.word	0x40014000
 80051a4:	40014400 	.word	0x40014400
 80051a8:	40014800 	.word	0x40014800

080051ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b087      	sub	sp, #28
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a1b      	ldr	r3, [r3, #32]
 80051ba:	f023 0201 	bic.w	r2, r3, #1
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	699b      	ldr	r3, [r3, #24]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 0303 	bic.w	r3, r3, #3
 80051e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68fa      	ldr	r2, [r7, #12]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	f023 0302 	bic.w	r3, r3, #2
 80051f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	689b      	ldr	r3, [r3, #8]
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a2c      	ldr	r2, [pc, #176]	; (80052b8 <TIM_OC1_SetConfig+0x10c>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d00f      	beq.n	800522c <TIM_OC1_SetConfig+0x80>
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a2b      	ldr	r2, [pc, #172]	; (80052bc <TIM_OC1_SetConfig+0x110>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00b      	beq.n	800522c <TIM_OC1_SetConfig+0x80>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a2a      	ldr	r2, [pc, #168]	; (80052c0 <TIM_OC1_SetConfig+0x114>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_OC1_SetConfig+0x80>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a29      	ldr	r2, [pc, #164]	; (80052c4 <TIM_OC1_SetConfig+0x118>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC1_SetConfig+0x80>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a28      	ldr	r2, [pc, #160]	; (80052c8 <TIM_OC1_SetConfig+0x11c>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10c      	bne.n	8005246 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f023 0308 	bic.w	r3, r3, #8
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	4313      	orrs	r3, r2
 800523c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	f023 0304 	bic.w	r3, r3, #4
 8005244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a1b      	ldr	r2, [pc, #108]	; (80052b8 <TIM_OC1_SetConfig+0x10c>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d00f      	beq.n	800526e <TIM_OC1_SetConfig+0xc2>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a1a      	ldr	r2, [pc, #104]	; (80052bc <TIM_OC1_SetConfig+0x110>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d00b      	beq.n	800526e <TIM_OC1_SetConfig+0xc2>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a19      	ldr	r2, [pc, #100]	; (80052c0 <TIM_OC1_SetConfig+0x114>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d007      	beq.n	800526e <TIM_OC1_SetConfig+0xc2>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	4a18      	ldr	r2, [pc, #96]	; (80052c4 <TIM_OC1_SetConfig+0x118>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d003      	beq.n	800526e <TIM_OC1_SetConfig+0xc2>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	4a17      	ldr	r2, [pc, #92]	; (80052c8 <TIM_OC1_SetConfig+0x11c>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d111      	bne.n	8005292 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005274:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	695b      	ldr	r3, [r3, #20]
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4313      	orrs	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	699b      	ldr	r3, [r3, #24]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	4313      	orrs	r3, r2
 8005290:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	693a      	ldr	r2, [r7, #16]
 8005296:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	621a      	str	r2, [r3, #32]
}
 80052ac:	bf00      	nop
 80052ae:	371c      	adds	r7, #28
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	40013400 	.word	0x40013400
 80052c0:	40014000 	.word	0x40014000
 80052c4:	40014400 	.word	0x40014400
 80052c8:	40014800 	.word	0x40014800

080052cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b087      	sub	sp, #28
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a1b      	ldr	r3, [r3, #32]
 80052da:	f023 0210 	bic.w	r2, r3, #16
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	f023 0320 	bic.w	r3, r3, #32
 800531a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800531c:	683b      	ldr	r3, [r7, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	011b      	lsls	r3, r3, #4
 8005322:	697a      	ldr	r2, [r7, #20]
 8005324:	4313      	orrs	r3, r2
 8005326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	4a28      	ldr	r2, [pc, #160]	; (80053cc <TIM_OC2_SetConfig+0x100>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d003      	beq.n	8005338 <TIM_OC2_SetConfig+0x6c>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a27      	ldr	r2, [pc, #156]	; (80053d0 <TIM_OC2_SetConfig+0x104>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d10d      	bne.n	8005354 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005338:	697b      	ldr	r3, [r7, #20]
 800533a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800533e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	011b      	lsls	r3, r3, #4
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	4313      	orrs	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800534c:	697b      	ldr	r3, [r7, #20]
 800534e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005352:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <TIM_OC2_SetConfig+0x100>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d00f      	beq.n	800537c <TIM_OC2_SetConfig+0xb0>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a1c      	ldr	r2, [pc, #112]	; (80053d0 <TIM_OC2_SetConfig+0x104>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d00b      	beq.n	800537c <TIM_OC2_SetConfig+0xb0>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a1b      	ldr	r2, [pc, #108]	; (80053d4 <TIM_OC2_SetConfig+0x108>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d007      	beq.n	800537c <TIM_OC2_SetConfig+0xb0>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a1a      	ldr	r2, [pc, #104]	; (80053d8 <TIM_OC2_SetConfig+0x10c>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d003      	beq.n	800537c <TIM_OC2_SetConfig+0xb0>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a19      	ldr	r2, [pc, #100]	; (80053dc <TIM_OC2_SetConfig+0x110>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d113      	bne.n	80053a4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005382:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800538a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	695b      	ldr	r3, [r3, #20]
 8005390:	009b      	lsls	r3, r3, #2
 8005392:	693a      	ldr	r2, [r7, #16]
 8005394:	4313      	orrs	r3, r2
 8005396:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	699b      	ldr	r3, [r3, #24]
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	693a      	ldr	r2, [r7, #16]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	685a      	ldr	r2, [r3, #4]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	621a      	str	r2, [r3, #32]
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40013400 	.word	0x40013400
 80053d4:	40014000 	.word	0x40014000
 80053d8:	40014400 	.word	0x40014400
 80053dc:	40014800 	.word	0x40014800

080053e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b087      	sub	sp, #28
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800540e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005412:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	f023 0303 	bic.w	r3, r3, #3
 800541a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800542c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	021b      	lsls	r3, r3, #8
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	4313      	orrs	r3, r2
 8005438:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a27      	ldr	r2, [pc, #156]	; (80054dc <TIM_OC3_SetConfig+0xfc>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d003      	beq.n	800544a <TIM_OC3_SetConfig+0x6a>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4a26      	ldr	r2, [pc, #152]	; (80054e0 <TIM_OC3_SetConfig+0x100>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d10d      	bne.n	8005466 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005450:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	021b      	lsls	r3, r3, #8
 8005458:	697a      	ldr	r2, [r7, #20]
 800545a:	4313      	orrs	r3, r2
 800545c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005464:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <TIM_OC3_SetConfig+0xfc>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00f      	beq.n	800548e <TIM_OC3_SetConfig+0xae>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <TIM_OC3_SetConfig+0x100>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d00b      	beq.n	800548e <TIM_OC3_SetConfig+0xae>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a1a      	ldr	r2, [pc, #104]	; (80054e4 <TIM_OC3_SetConfig+0x104>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d007      	beq.n	800548e <TIM_OC3_SetConfig+0xae>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a19      	ldr	r2, [pc, #100]	; (80054e8 <TIM_OC3_SetConfig+0x108>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d003      	beq.n	800548e <TIM_OC3_SetConfig+0xae>
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	4a18      	ldr	r2, [pc, #96]	; (80054ec <TIM_OC3_SetConfig+0x10c>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d113      	bne.n	80054b6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005494:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800549c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	011b      	lsls	r3, r3, #4
 80054a4:	693a      	ldr	r2, [r7, #16]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	699b      	ldr	r3, [r3, #24]
 80054ae:	011b      	lsls	r3, r3, #4
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685a      	ldr	r2, [r3, #4]
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	697a      	ldr	r2, [r7, #20]
 80054ce:	621a      	str	r2, [r3, #32]
}
 80054d0:	bf00      	nop
 80054d2:	371c      	adds	r7, #28
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr
 80054dc:	40012c00 	.word	0x40012c00
 80054e0:	40013400 	.word	0x40013400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40014400 	.word	0x40014400
 80054ec:	40014800 	.word	0x40014800

080054f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054f0:	b480      	push	{r7}
 80054f2:	b087      	sub	sp, #28
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6a1b      	ldr	r3, [r3, #32]
 80054fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	69db      	ldr	r3, [r3, #28]
 8005516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800551e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005522:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800552a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	021b      	lsls	r3, r3, #8
 8005532:	68fa      	ldr	r2, [r7, #12]
 8005534:	4313      	orrs	r3, r2
 8005536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800553e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	031b      	lsls	r3, r3, #12
 8005546:	697a      	ldr	r2, [r7, #20]
 8005548:	4313      	orrs	r3, r2
 800554a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	4a28      	ldr	r2, [pc, #160]	; (80055f0 <TIM_OC4_SetConfig+0x100>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d003      	beq.n	800555c <TIM_OC4_SetConfig+0x6c>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a27      	ldr	r2, [pc, #156]	; (80055f4 <TIM_OC4_SetConfig+0x104>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d10d      	bne.n	8005578 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005562:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	031b      	lsls	r3, r3, #12
 800556a:	697a      	ldr	r2, [r7, #20]
 800556c:	4313      	orrs	r3, r2
 800556e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005576:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	4a1d      	ldr	r2, [pc, #116]	; (80055f0 <TIM_OC4_SetConfig+0x100>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d00f      	beq.n	80055a0 <TIM_OC4_SetConfig+0xb0>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	4a1c      	ldr	r2, [pc, #112]	; (80055f4 <TIM_OC4_SetConfig+0x104>)
 8005584:	4293      	cmp	r3, r2
 8005586:	d00b      	beq.n	80055a0 <TIM_OC4_SetConfig+0xb0>
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	4a1b      	ldr	r2, [pc, #108]	; (80055f8 <TIM_OC4_SetConfig+0x108>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d007      	beq.n	80055a0 <TIM_OC4_SetConfig+0xb0>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	4a1a      	ldr	r2, [pc, #104]	; (80055fc <TIM_OC4_SetConfig+0x10c>)
 8005594:	4293      	cmp	r3, r2
 8005596:	d003      	beq.n	80055a0 <TIM_OC4_SetConfig+0xb0>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	4a19      	ldr	r2, [pc, #100]	; (8005600 <TIM_OC4_SetConfig+0x110>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d113      	bne.n	80055c8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80055a6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80055a8:	693b      	ldr	r3, [r7, #16]
 80055aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80055ae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	019b      	lsls	r3, r3, #6
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	699b      	ldr	r3, [r3, #24]
 80055c0:	019b      	lsls	r3, r3, #6
 80055c2:	693a      	ldr	r2, [r7, #16]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	693a      	ldr	r2, [r7, #16]
 80055cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	685a      	ldr	r2, [r3, #4]
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	697a      	ldr	r2, [r7, #20]
 80055e0:	621a      	str	r2, [r3, #32]
}
 80055e2:	bf00      	nop
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
 80055ee:	bf00      	nop
 80055f0:	40012c00 	.word	0x40012c00
 80055f4:	40013400 	.word	0x40013400
 80055f8:	40014000 	.word	0x40014000
 80055fc:	40014400 	.word	0x40014400
 8005600:	40014800 	.word	0x40014800

08005604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005604:	b480      	push	{r7}
 8005606:	b087      	sub	sp, #28
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6a1b      	ldr	r3, [r3, #32]
 8005612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6a1b      	ldr	r3, [r3, #32]
 800561e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800562a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	4313      	orrs	r3, r2
 8005640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	041b      	lsls	r3, r3, #16
 8005650:	693a      	ldr	r2, [r7, #16]
 8005652:	4313      	orrs	r3, r2
 8005654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a17      	ldr	r2, [pc, #92]	; (80056b8 <TIM_OC5_SetConfig+0xb4>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d00f      	beq.n	800567e <TIM_OC5_SetConfig+0x7a>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	4a16      	ldr	r2, [pc, #88]	; (80056bc <TIM_OC5_SetConfig+0xb8>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d00b      	beq.n	800567e <TIM_OC5_SetConfig+0x7a>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	4a15      	ldr	r2, [pc, #84]	; (80056c0 <TIM_OC5_SetConfig+0xbc>)
 800566a:	4293      	cmp	r3, r2
 800566c:	d007      	beq.n	800567e <TIM_OC5_SetConfig+0x7a>
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a14      	ldr	r2, [pc, #80]	; (80056c4 <TIM_OC5_SetConfig+0xc0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_OC5_SetConfig+0x7a>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a13      	ldr	r2, [pc, #76]	; (80056c8 <TIM_OC5_SetConfig+0xc4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d109      	bne.n	8005692 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005684:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	021b      	lsls	r3, r3, #8
 800568c:	697a      	ldr	r2, [r7, #20]
 800568e:	4313      	orrs	r3, r2
 8005690:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	697a      	ldr	r2, [r7, #20]
 8005696:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	685a      	ldr	r2, [r3, #4]
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	621a      	str	r2, [r3, #32]
}
 80056ac:	bf00      	nop
 80056ae:	371c      	adds	r7, #28
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40012c00 	.word	0x40012c00
 80056bc:	40013400 	.word	0x40013400
 80056c0:	40014000 	.word	0x40014000
 80056c4:	40014400 	.word	0x40014400
 80056c8:	40014800 	.word	0x40014800

080056cc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a1b      	ldr	r3, [r3, #32]
 80056da:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	021b      	lsls	r3, r3, #8
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005712:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	051b      	lsls	r3, r3, #20
 800571a:	693a      	ldr	r2, [r7, #16]
 800571c:	4313      	orrs	r3, r2
 800571e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a18      	ldr	r2, [pc, #96]	; (8005784 <TIM_OC6_SetConfig+0xb8>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d00f      	beq.n	8005748 <TIM_OC6_SetConfig+0x7c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a17      	ldr	r2, [pc, #92]	; (8005788 <TIM_OC6_SetConfig+0xbc>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00b      	beq.n	8005748 <TIM_OC6_SetConfig+0x7c>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	4a16      	ldr	r2, [pc, #88]	; (800578c <TIM_OC6_SetConfig+0xc0>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d007      	beq.n	8005748 <TIM_OC6_SetConfig+0x7c>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a15      	ldr	r2, [pc, #84]	; (8005790 <TIM_OC6_SetConfig+0xc4>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d003      	beq.n	8005748 <TIM_OC6_SetConfig+0x7c>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a14      	ldr	r2, [pc, #80]	; (8005794 <TIM_OC6_SetConfig+0xc8>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d109      	bne.n	800575c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800574e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	029b      	lsls	r3, r3, #10
 8005756:	697a      	ldr	r2, [r7, #20]
 8005758:	4313      	orrs	r3, r2
 800575a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68fa      	ldr	r2, [r7, #12]
 8005766:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005768:	683b      	ldr	r3, [r7, #0]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	693a      	ldr	r2, [r7, #16]
 8005774:	621a      	str	r2, [r3, #32]
}
 8005776:	bf00      	nop
 8005778:	371c      	adds	r7, #28
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40012c00 	.word	0x40012c00
 8005788:	40013400 	.word	0x40013400
 800578c:	40014000 	.word	0x40014000
 8005790:	40014400 	.word	0x40014400
 8005794:	40014800 	.word	0x40014800

08005798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2201      	movs	r2, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e065      	b.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d018      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d013      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10c      	bne.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40013400 	.word	0x40013400
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40014000 	.word	0x40014000

080058e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005900:	2302      	movs	r3, #2
 8005902:	e087      	b.n	8005a14 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d106      	bne.n	80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d126      	bne.n	8005a02 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	051b      	lsls	r3, r3, #20
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d106      	bne.n	8005a02 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400

08005a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ac4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ac8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005aee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4013      	ands	r3, r2
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 0014 	add.w	r0, r7, #20
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	b004      	add	sp, #16
 8005b58:	4770      	bx	lr
	...

08005b5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b09d      	sub	sp, #116	; 0x74
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d81f      	bhi.n	8005bce <USB_ActivateEndpoint+0x72>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <USB_ActivateEndpoint+0x38>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bd7 	.word	0x08005bd7
 8005ba0:	08005bb3 	.word	0x08005bb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ba4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005bb0:	e012      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005bb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005bb6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005bba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005bbe:	e00b      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005bcc:	e004      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005bd4:	e000      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>
      break;
 8005bd6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	b21a      	sxth	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b21b      	sxth	r3, r3
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	b21b      	sxth	r3, r3
 8005c1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8149 	bne.w	8005ee0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8084 	beq.w	8005d60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	4413      	add	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	88db      	ldrh	r3, [r3, #6]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	827b      	strh	r3, [r7, #18]
 8005c9a:	8a7b      	ldrh	r3, [r7, #18]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01b      	beq.n	8005cdc <USB_ActivateEndpoint+0x180>
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	823b      	strh	r3, [r7, #16]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	8a3b      	ldrh	r3, [r7, #16]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d020      	beq.n	8005d26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfa:	81bb      	strh	r3, [r7, #12]
 8005cfc:	89bb      	ldrh	r3, [r7, #12]
 8005cfe:	f083 0320 	eor.w	r3, r3, #32
 8005d02:	81bb      	strh	r3, [r7, #12]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	89bb      	ldrh	r3, [r7, #12]
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
 8005d24:	e2a6      	b.n	8006274 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	81fb      	strh	r3, [r7, #14]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
 8005d5e:	e289      	b.n	8006274 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	4413      	add	r3, r2
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	88db      	ldrh	r3, [r3, #6]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	4413      	add	r3, r2
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbe:	d918      	bls.n	8005df2 <USB_ActivateEndpoint+0x296>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <USB_ActivateEndpoint+0x27e>
 8005dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e029      	b.n	8005e46 <USB_ActivateEndpoint+0x2ea>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <USB_ActivateEndpoint+0x2c4>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e012      	b.n	8005e46 <USB_ActivateEndpoint+0x2ea>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <USB_ActivateEndpoint+0x2de>
 8005e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e36:	3301      	adds	r3, #1
 8005e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01b      	beq.n	8005e96 <USB_ActivateEndpoint+0x33a>
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	843b      	strh	r3, [r7, #32]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	8c3b      	ldrh	r3, [r7, #32]
 8005e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eac:	83fb      	strh	r3, [r7, #30]
 8005eae:	8bfb      	ldrh	r3, [r7, #30]
 8005eb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eb4:	83fb      	strh	r3, [r7, #30]
 8005eb6:	8bfb      	ldrh	r3, [r7, #30]
 8005eb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ebc:	83fb      	strh	r3, [r7, #30]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
 8005ede:	e1c9      	b.n	8006274 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d11e      	bne.n	8005f26 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
 8005f24:	e01d      	b.n	8005f62 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f72:	4413      	add	r3, r2
 8005f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	00da      	lsls	r2, r3, #3
 8005f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	891b      	ldrh	r3, [r3, #8]
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	657b      	str	r3, [r7, #84]	; 0x54
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	4413      	add	r3, r2
 8005fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	00da      	lsls	r2, r3, #3
 8005fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	895b      	ldrh	r3, [r3, #10]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 8093 	bne.w	80060fa <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_ActivateEndpoint+0x4cc>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006036:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01b      	beq.n	8006078 <USB_ActivateEndpoint+0x51c>
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006090:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006092:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006096:	873b      	strh	r3, [r7, #56]	; 0x38
 8006098:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800609a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800609e:	873b      	strh	r3, [r7, #56]	; 0x38
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]
 80060f8:	e0bc      	b.n	8006274 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800610a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800610e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01d      	beq.n	8006152 <USB_ActivateEndpoint+0x5f6>
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006162:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01d      	beq.n	80061aa <USB_ActivateEndpoint+0x64e>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d024      	beq.n	80061fc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061d0:	f083 0320 	eor.w	r3, r3, #32
 80061d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]
 80061fa:	e01d      	b.n	8006238 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006278:	4618      	mov	r0, r3
 800627a:	3774      	adds	r7, #116	; 0x74
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b08d      	sub	sp, #52	; 0x34
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	7b1b      	ldrb	r3, [r3, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 808e 	bne.w	80063b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d044      	beq.n	800632a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	81bb      	strh	r3, [r7, #12]
 80062ae:	89bb      	ldrh	r3, [r7, #12]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <USB_DeactivateEndpoint+0x6c>
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	817b      	strh	r3, [r7, #10]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	897b      	ldrh	r3, [r7, #10]
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	813b      	strh	r3, [r7, #8]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	893b      	ldrh	r3, [r7, #8]
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
 8006328:	e192      	b.n	8006650 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	827b      	strh	r3, [r7, #18]
 8006338:	8a7b      	ldrh	r3, [r7, #18]
 800633a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01b      	beq.n	800637a <USB_DeactivateEndpoint+0xf6>
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	823b      	strh	r3, [r7, #16]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	8a3b      	ldrh	r3, [r7, #16]
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	81fb      	strh	r3, [r7, #14]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	89fb      	ldrh	r3, [r7, #14]
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
 80063b2:	e14d      	b.n	8006650 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 80a5 	bne.w	8006508 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	843b      	strh	r3, [r7, #32]
 80063cc:	8c3b      	ldrh	r3, [r7, #32]
 80063ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01b      	beq.n	800640e <USB_DeactivateEndpoint+0x18a>
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	83fb      	strh	r3, [r7, #30]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8bfb      	ldrh	r3, [r7, #30]
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	83bb      	strh	r3, [r7, #28]
 800641c:	8bbb      	ldrh	r3, [r7, #28]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01b      	beq.n	800645e <USB_DeactivateEndpoint+0x1da>
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	837b      	strh	r3, [r7, #26]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006474:	833b      	strh	r3, [r7, #24]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	8b3b      	ldrh	r3, [r7, #24]
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	82fb      	strh	r3, [r7, #22]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	8afb      	ldrh	r3, [r7, #22]
 80064ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e4:	82bb      	strh	r3, [r7, #20]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	441a      	add	r2, r3
 80064f0:	8abb      	ldrh	r3, [r7, #20]
 80064f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006502:	b29b      	uxth	r3, r3
 8006504:	8013      	strh	r3, [r2, #0]
 8006506:	e0a3      	b.n	8006650 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <USB_DeactivateEndpoint+0x2d4>
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006566:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01b      	beq.n	80065a8 <USB_DeactivateEndpoint+0x324>
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	853b      	strh	r3, [r7, #40]	; 0x28
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	441a      	add	r2, r3
 8006592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	b29b      	uxth	r3, r3
 80065de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3734      	adds	r7, #52	; 0x34
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b0c2      	sub	sp, #264	; 0x108
 8006662:	af00      	add	r7, sp, #0
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666c:	6018      	str	r0, [r3, #0]
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b01      	cmp	r3, #1
 8006686:	f040 867b 	bne.w	8007380 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d908      	bls.n	80066b8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066b6:	e007      	b.n	80066c8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	7b1b      	ldrb	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13a      	bne.n	800674e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6959      	ldr	r1, [r3, #20]
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	88da      	ldrh	r2, [r3, #6]
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	f001 fc1d 	bl	8007f3e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	00da      	lsls	r2, r3, #3
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	f000 bde3 	b.w	8007314 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	78db      	ldrb	r3, [r3, #3]
 800675a:	2b02      	cmp	r3, #2
 800675c:	f040 843a 	bne.w	8006fd4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	429a      	cmp	r2, r3
 800677a:	f240 83b7 	bls.w	8006eec <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 81b3 	beq.w	8006b86 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d16d      	bne.n	8006918 <USB_EPStartXfer+0x2ba>
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006856:	b29b      	uxth	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	4413      	add	r3, r2
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	4413      	add	r3, r2
 8006872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687c:	2b3e      	cmp	r3, #62	; 0x3e
 800687e:	d91c      	bls.n	80068ba <USB_EPStartXfer+0x25c>
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <USB_EPStartXfer+0x242>
 8006896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800689a:	3b01      	subs	r3, #1
 800689c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e053      	b.n	8006962 <USB_EPStartXfer+0x304>
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d112      	bne.n	80068e8 <USB_EPStartXfer+0x28a>
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	e03c      	b.n	8006962 <USB_EPStartXfer+0x304>
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <USB_EPStartXfer+0x2aa>
 80068fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006902:	3301      	adds	r3, #1
 8006904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006908:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800690c:	b29b      	uxth	r3, r3
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	b29a      	uxth	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	e024      	b.n	8006962 <USB_EPStartXfer+0x304>
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d11c      	bne.n	8006962 <USB_EPStartXfer+0x304>
 8006928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	4413      	add	r3, r2
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	00da      	lsls	r2, r3, #3
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	4413      	add	r3, r2
 8006952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	b29a      	uxth	r2, r3
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	895b      	ldrh	r3, [r3, #10]
 800696e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6959      	ldr	r1, [r3, #20]
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006982:	b29b      	uxth	r3, r3
 8006984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006988:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800698c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006990:	6800      	ldr	r0, [r0, #0]
 8006992:	f001 fad4 	bl	8007f3e <USB_WritePMA>
            ep->xfer_buff += len;
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	441a      	add	r2, r3
 80069a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d90f      	bls.n	80069f0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80069d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	1ad2      	subs	r2, r2, r3
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	621a      	str	r2, [r3, #32]
 80069ee:	e00e      	b.n	8006a0e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d16d      	bne.n	8006afa <USB_EPStartXfer+0x49c>
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	4413      	add	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	00da      	lsls	r2, r3, #3
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	4413      	add	r3, r2
 8006a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d91c      	bls.n	8006a9c <USB_EPStartXfer+0x43e>
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <USB_EPStartXfer+0x424>
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	e059      	b.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d112      	bne.n	8006aca <USB_EPStartXfer+0x46c>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e042      	b.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <USB_EPStartXfer+0x48c>
 8006ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	029b      	lsls	r3, r3, #10
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e02a      	b.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d122      	bne.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	00da      	lsls	r2, r3, #3
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	891b      	ldrh	r3, [r3, #8]
 8006b5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f001 f9dd 	bl	8007f3e <USB_WritePMA>
 8006b84:	e3c6      	b.n	8007314 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d16d      	bne.n	8006c72 <USB_EPStartXfer+0x614>
 8006b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb6:	4413      	add	r3, r2
 8006bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	00da      	lsls	r2, r3, #3
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bca:	4413      	add	r3, r2
 8006bcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd8:	d91c      	bls.n	8006c14 <USB_EPStartXfer+0x5b6>
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USB_EPStartXfer+0x59c>
 8006bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	029b      	lsls	r3, r3, #10
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e059      	b.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d112      	bne.n	8006c42 <USB_EPStartXfer+0x5e4>
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e042      	b.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <USB_EPStartXfer+0x604>
 8006c58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e02a      	b.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d122      	bne.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca2:	4413      	add	r3, r2
 8006ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	00da      	lsls	r2, r3, #3
 8006cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	891b      	ldrh	r3, [r3, #8]
 8006cd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6959      	ldr	r1, [r3, #20]
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cf2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cf6:	6800      	ldr	r0, [r0, #0]
 8006cf8:	f001 f921 	bl	8007f3e <USB_WritePMA>
            ep->xfer_buff += len;
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695a      	ldr	r2, [r3, #20]
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	441a      	add	r2, r3
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d90f      	bls.n	8006d56 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d46:	1ad2      	subs	r2, r2, r3
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	621a      	str	r2, [r3, #32]
 8006d54:	e00e      	b.n	8006d74 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2200      	movs	r2, #0
 8006d72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d16d      	bne.n	8006e6c <USB_EPStartXfer+0x80e>
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	4413      	add	r3, r2
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00da      	lsls	r2, r3, #3
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd2:	d91c      	bls.n	8006e0e <USB_EPStartXfer+0x7b0>
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <USB_EPStartXfer+0x796>
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dee:	3b01      	subs	r3, #1
 8006df0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	029b      	lsls	r3, r3, #10
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e053      	b.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d112      	bne.n	8006e3c <USB_EPStartXfer+0x7de>
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e03c      	b.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <USB_EPStartXfer+0x7fe>
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e024      	b.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d11c      	bne.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e90:	4413      	add	r3, r2
 8006e92:	643b      	str	r3, [r7, #64]	; 0x40
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	00da      	lsls	r2, r3, #3
 8006ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	895b      	ldrh	r3, [r3, #10]
 8006ec2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6959      	ldr	r1, [r3, #20]
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006edc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ee0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ee4:	6800      	ldr	r0, [r0, #0]
 8006ee6:	f001 f82a 	bl	8007f3e <USB_WritePMA>
 8006eea:	e213      	b.n	8007314 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	4413      	add	r3, r2
 8006f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00da      	lsls	r2, r3, #3
 8006f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	891b      	ldrh	r3, [r3, #8]
 8006faa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f000 ffb6 	bl	8007f3e <USB_WritePMA>
 8006fd2:	e19f      	b.n	8007314 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe4:	1ad2      	subs	r2, r2, r3
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80bc 	beq.w	8007192 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	673b      	str	r3, [r7, #112]	; 0x70
 8007026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d16d      	bne.n	8007112 <USB_EPStartXfer+0xab4>
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	66bb      	str	r3, [r7, #104]	; 0x68
 8007042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007056:	4413      	add	r3, r2
 8007058:	66bb      	str	r3, [r7, #104]	; 0x68
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00da      	lsls	r2, r3, #3
 8007068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800706a:	4413      	add	r3, r2
 800706c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007070:	667b      	str	r3, [r7, #100]	; 0x64
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007076:	2b3e      	cmp	r3, #62	; 0x3e
 8007078:	d91c      	bls.n	80070b4 <USB_EPStartXfer+0xa56>
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <USB_EPStartXfer+0xa3c>
 8007090:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007094:	3b01      	subs	r3, #1
 8007096:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800709a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800709e:	b29b      	uxth	r3, r3
 80070a0:	029b      	lsls	r3, r3, #10
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e053      	b.n	800715c <USB_EPStartXfer+0xafe>
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d112      	bne.n	80070e2 <USB_EPStartXfer+0xa84>
 80070bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e03c      	b.n	800715c <USB_EPStartXfer+0xafe>
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <USB_EPStartXfer+0xaa4>
 80070f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070fc:	3301      	adds	r3, #1
 80070fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007102:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29a      	uxth	r2, r3
 800710c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e024      	b.n	800715c <USB_EPStartXfer+0xafe>
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d11c      	bne.n	800715c <USB_EPStartXfer+0xafe>
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007136:	4413      	add	r3, r2
 8007138:	673b      	str	r3, [r7, #112]	; 0x70
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800714a:	4413      	add	r3, r2
 800714c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	b29a      	uxth	r2, r3
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	895b      	ldrh	r3, [r3, #10]
 8007168:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6959      	ldr	r1, [r3, #20]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	b29b      	uxth	r3, r3
 800717e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007182:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007186:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	f000 fed7 	bl	8007f3e <USB_WritePMA>
 8007190:	e0c0      	b.n	8007314 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d16d      	bne.n	800727e <USB_EPStartXfer+0xc20>
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071c2:	4413      	add	r3, r2
 80071c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	2b3e      	cmp	r3, #62	; 0x3e
 80071e4:	d91c      	bls.n	8007220 <USB_EPStartXfer+0xbc2>
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <USB_EPStartXfer+0xba8>
 80071fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007200:	3b01      	subs	r3, #1
 8007202:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800720a:	b29b      	uxth	r3, r3
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	b29b      	uxth	r3, r3
 8007210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007218:	b29a      	uxth	r2, r3
 800721a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	e05f      	b.n	80072e0 <USB_EPStartXfer+0xc82>
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007224:	2b00      	cmp	r3, #0
 8007226:	d112      	bne.n	800724e <USB_EPStartXfer+0xbf0>
 8007228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007232:	b29a      	uxth	r2, r3
 8007234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007246:	b29a      	uxth	r2, r3
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e048      	b.n	80072e0 <USB_EPStartXfer+0xc82>
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <USB_EPStartXfer+0xc10>
 8007264:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007268:	3301      	adds	r3, #1
 800726a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800726e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007272:	b29b      	uxth	r3, r3
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	b29a      	uxth	r2, r3
 8007278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e030      	b.n	80072e0 <USB_EPStartXfer+0xc82>
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d128      	bne.n	80072e0 <USB_EPStartXfer+0xc82>
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072b2:	4413      	add	r3, r2
 80072b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	00da      	lsls	r2, r3, #3
 80072c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	891b      	ldrh	r3, [r3, #8]
 80072ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6959      	ldr	r1, [r3, #20]
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	b29b      	uxth	r3, r3
 8007302:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007306:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800730a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800730e:	6800      	ldr	r0, [r0, #0]
 8007310:	f000 fe15 	bl	8007f3e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733a:	817b      	strh	r3, [r7, #10]
 800733c:	897b      	ldrh	r3, [r7, #10]
 800733e:	f083 0310 	eor.w	r3, r3, #16
 8007342:	817b      	strh	r3, [r7, #10]
 8007344:	897b      	ldrh	r3, [r7, #10]
 8007346:	f083 0320 	eor.w	r3, r3, #32
 800734a:	817b      	strh	r3, [r7, #10]
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	897b      	ldrh	r3, [r7, #10]
 8007368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007378:	b29b      	uxth	r3, r3
 800737a:	8013      	strh	r3, [r2, #0]
 800737c:	f000 bc9f 	b.w	8007cbe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	7b1b      	ldrb	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 80ae 	bne.w	80074ee <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d917      	bls.n	80073de <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	619a      	str	r2, [r3, #24]
 80073dc:	e00e      	b.n	80073fc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2200      	movs	r2, #0
 80073fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007420:	4413      	add	r3, r2
 8007422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	00da      	lsls	r2, r3, #3
 8007434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007438:	4413      	add	r3, r2
 800743a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800743e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007446:	2b3e      	cmp	r3, #62	; 0x3e
 8007448:	d91d      	bls.n	8007486 <USB_EPStartXfer+0xe28>
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USB_EPStartXfer+0xe0c>
 8007460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007464:	3b01      	subs	r3, #1
 8007466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800746a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e3e1      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <USB_EPStartXfer+0xe5e>
 800748e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800749a:	b29a      	uxth	r2, r3
 800749c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e3c6      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <USB_EPStartXfer+0xe7e>
 80074d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	029b      	lsls	r3, r3, #10
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	e3ad      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	78db      	ldrb	r3, [r3, #3]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	f040 8200 	bne.w	8007900 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 8091 	bne.w	8007634 <USB_EPStartXfer+0xfd6>
 8007512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800752e:	b29b      	uxth	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007536:	4413      	add	r3, r2
 8007538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800753c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	00da      	lsls	r2, r3, #3
 800754a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800754e:	4413      	add	r3, r2
 8007550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b3e      	cmp	r3, #62	; 0x3e
 8007566:	d925      	bls.n	80075b4 <USB_EPStartXfer+0xf56>
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800757a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <USB_EPStartXfer+0xf3a>
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	3b01      	subs	r3, #1
 8007594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	b29b      	uxth	r3, r3
 800759e:	029b      	lsls	r3, r3, #10
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e074      	b.n	800769e <USB_EPStartXfer+0x1040>
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d116      	bne.n	80075f2 <USB_EPStartXfer+0xf94>
 80075c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e055      	b.n	800769e <USB_EPStartXfer+0x1040>
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <USB_EPStartXfer+0xfc4>
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	3301      	adds	r3, #1
 800761e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	e034      	b.n	800769e <USB_EPStartXfer+0x1040>
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d12c      	bne.n	800769e <USB_EPStartXfer+0x1040>
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	00da      	lsls	r2, r3, #3
 800767c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007680:	4413      	add	r3, r2
 8007682:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800768a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 8091 	bne.w	80077e0 <USB_EPStartXfer+0x1182>
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e2:	4413      	add	r3, r2
 80076e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	00da      	lsls	r2, r3, #3
 80076f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fa:	4413      	add	r3, r2
 80076fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b3e      	cmp	r3, #62	; 0x3e
 8007712:	d925      	bls.n	8007760 <USB_EPStartXfer+0x1102>
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <USB_EPStartXfer+0x10e6>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	3b01      	subs	r3, #1
 8007740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29b      	uxth	r3, r3
 800774e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007756:	b29a      	uxth	r2, r3
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e06d      	b.n	800783c <USB_EPStartXfer+0x11de>
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d116      	bne.n	800779e <USB_EPStartXfer+0x1140>
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007794:	b29a      	uxth	r2, r3
 8007796:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e04e      	b.n	800783c <USB_EPStartXfer+0x11de>
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USB_EPStartXfer+0x1170>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	3301      	adds	r3, #1
 80077ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	e02d      	b.n	800783c <USB_EPStartXfer+0x11de>
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d125      	bne.n	800783c <USB_EPStartXfer+0x11de>
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007806:	4413      	add	r3, r2
 8007808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	00da      	lsls	r2, r3, #3
 800781a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800781e:	4413      	add	r3, r2
 8007820:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800783a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 81fe 	beq.w	8007c4a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800786e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <USB_EPStartXfer+0x1228>
 800787a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007886:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 81db 	bne.w	8007c4a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007894:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 81d4 	bne.w	8007c4a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80078a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	441a      	add	r2, r3
 80078e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]
 80078fe:	e1a4      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	78db      	ldrb	r3, [r3, #3]
 800790c:	2b01      	cmp	r3, #1
 800790e:	f040 819a 	bne.w	8007c46 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	429a      	cmp	r2, r3
 800792c:	d917      	bls.n	800795e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800792e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	619a      	str	r2, [r3, #24]
 800795c:	e00e      	b.n	800797c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800796e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2200      	movs	r2, #0
 800797a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d178      	bne.n	8007a7e <USB_EPStartXfer+0x1420>
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079b0:	4413      	add	r3, r2
 80079b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00da      	lsls	r2, r3, #3
 80079c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079c8:	4413      	add	r3, r2
 80079ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d6:	2b3e      	cmp	r3, #62	; 0x3e
 80079d8:	d91d      	bls.n	8007a16 <USB_EPStartXfer+0x13b8>
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USB_EPStartXfer+0x139c>
 80079f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f4:	3b01      	subs	r3, #1
 80079f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e064      	b.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d116      	bne.n	8007a4c <USB_EPStartXfer+0x13ee>
 8007a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	e049      	b.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <USB_EPStartXfer+0x140e>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	029b      	lsls	r3, r3, #10
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e030      	b.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d128      	bne.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	00da      	lsls	r2, r3, #3
 8007ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d178      	bne.n	8007bf0 <USB_EPStartXfer+0x1592>
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b22:	4413      	add	r3, r2
 8007b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	00da      	lsls	r2, r3, #3
 8007b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b48:	2b3e      	cmp	r3, #62	; 0x3e
 8007b4a:	d91d      	bls.n	8007b88 <USB_EPStartXfer+0x152a>
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USB_EPStartXfer+0x150e>
 8007b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	029b      	lsls	r3, r3, #10
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	e060      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d116      	bne.n	8007bbe <USB_EPStartXfer+0x1560>
 8007b90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e045      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USB_EPStartXfer+0x1580>
 8007bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	e02c      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d124      	bne.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c16:	4413      	add	r3, r2
 8007c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	00da      	lsls	r2, r3, #3
 8007c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c2e:	4413      	add	r3, r2
 8007c30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e001      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e03a      	b.n	8007cc0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf2:	81bb      	strh	r3, [r7, #12]
 8007cf4:	89bb      	ldrh	r3, [r7, #12]
 8007cf6:	f083 0310 	eor.w	r3, r3, #16
 8007cfa:	81bb      	strh	r3, [r7, #12]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	441a      	add	r2, r3
 8007d06:	89bb      	ldrh	r3, [r7, #12]
 8007d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]
 8007d1c:	e01f      	b.n	8007d5e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d34:	81fb      	strh	r3, [r7, #14]
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d3c:	81fb      	strh	r3, [r7, #14]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	89fb      	ldrh	r3, [r7, #14]
 8007d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	7b1b      	ldrb	r3, [r3, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 809d 	bne.w	8007eba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d04c      	beq.n	8007e22 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	823b      	strh	r3, [r7, #16]
 8007d96:	8a3b      	ldrh	r3, [r7, #16]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <USB_EPClearStall+0x6c>
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	81fb      	strh	r3, [r7, #14]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	441a      	add	r2, r3
 8007dc2:	89fb      	ldrh	r3, [r7, #14]
 8007dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	78db      	ldrb	r3, [r3, #3]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d06c      	beq.n	8007eba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df6:	81bb      	strh	r3, [r7, #12]
 8007df8:	89bb      	ldrh	r3, [r7, #12]
 8007dfa:	f083 0320 	eor.w	r3, r3, #32
 8007dfe:	81bb      	strh	r3, [r7, #12]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	89bb      	ldrh	r3, [r7, #12]
 8007e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	8013      	strh	r3, [r2, #0]
 8007e20:	e04b      	b.n	8007eba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	82fb      	strh	r3, [r7, #22]
 8007e30:	8afb      	ldrh	r3, [r7, #22]
 8007e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01b      	beq.n	8007e72 <USB_EPClearStall+0x106>
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e50:	82bb      	strh	r3, [r7, #20]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	8abb      	ldrh	r3, [r7, #20]
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	827b      	strh	r3, [r7, #18]
 8007e8a:	8a7b      	ldrh	r3, [r7, #18]
 8007e8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e90:	827b      	strh	r3, [r7, #18]
 8007e92:	8a7b      	ldrh	r3, [r7, #18]
 8007e94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e98:	827b      	strh	r3, [r7, #18]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	441a      	add	r2, r3
 8007ea4:	8a7b      	ldrh	r3, [r7, #18]
 8007ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2280      	movs	r2, #128	; 0x80
 8007ede:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f30:	68fb      	ldr	r3, [r7, #12]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b08d      	sub	sp, #52	; 0x34
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	80fb      	strh	r3, [r7, #6]
 8007f50:	4613      	mov	r3, r2
 8007f52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f54:	88bb      	ldrh	r3, [r7, #4]
 8007f56:	3301      	adds	r3, #1
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f74:	e01b      	b.n	8007fae <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	3301      	adds	r3, #1
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	3b01      	subs	r3, #1
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e0      	bne.n	8007f76 <USB_WritePMA+0x38>
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	3734      	adds	r7, #52	; 0x34
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b08b      	sub	sp, #44	; 0x2c
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	80fb      	strh	r3, [r7, #6]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007fd8:	88bb      	ldrh	r3, [r7, #4]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff8:	e018      	b.n	800802c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	3302      	adds	r3, #2
 8008006:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	3301      	adds	r3, #1
 8008014:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	b2da      	uxtb	r2, r3
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	3b01      	subs	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e3      	bne.n	8007ffa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008032:	88bb      	ldrh	r3, [r7, #4]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	701a      	strb	r2, [r3, #0]
  }
}
 800804e:	bf00      	nop
 8008050:	372c      	adds	r7, #44	; 0x2c
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008066:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800806a:	f002 f901 	bl	800a270 <USBD_static_malloc>
 800806e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800807e:	2302      	movs	r3, #2
 8008080:	e066      	b.n	8008150 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7c1b      	ldrb	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d119      	bne.n	80080c6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008096:	2202      	movs	r2, #2
 8008098:	2181      	movs	r1, #129	; 0x81
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 ff8d 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080aa:	2202      	movs	r2, #2
 80080ac:	2101      	movs	r1, #1
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 ff83 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2210      	movs	r2, #16
 80080c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80080c4:	e016      	b.n	80080f4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080c6:	2340      	movs	r3, #64	; 0x40
 80080c8:	2202      	movs	r2, #2
 80080ca:	2181      	movs	r1, #129	; 0x81
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 ff74 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	2202      	movs	r2, #2
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 ff6b 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2210      	movs	r2, #16
 80080f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080f4:	2308      	movs	r3, #8
 80080f6:	2203      	movs	r2, #3
 80080f8:	2182      	movs	r1, #130	; 0x82
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 ff5d 	bl	8009fba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7c1b      	ldrb	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008134:	2101      	movs	r1, #1
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f002 f82f 	bl	800a19a <USBD_LL_PrepareReceive>
 800813c:	e007      	b.n	800814e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	2101      	movs	r1, #1
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f002 f826 	bl	800a19a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008164:	2181      	movs	r1, #129	; 0x81
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 ff4d 	bl	800a006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008172:	2101      	movs	r1, #1
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 ff46 	bl	800a006 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008182:	2182      	movs	r1, #130	; 0x82
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 ff3e 	bl	800a006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b4:	4618      	mov	r0, r3
 80081b6:	f002 f869 	bl	800a28c <USBD_static_free>
    pdev->pClassData = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e0af      	b.n	8008354 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d03f      	beq.n	8008280 <USBD_CDC_Setup+0xb4>
 8008200:	2b20      	cmp	r3, #32
 8008202:	f040 809f 	bne.w	8008344 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	88db      	ldrh	r3, [r3, #6]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d02e      	beq.n	800826c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b25b      	sxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	da16      	bge.n	8008246 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008224:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	88d2      	ldrh	r2, [r2, #6]
 800822a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b07      	cmp	r3, #7
 8008232:	bf28      	it	cs
 8008234:	2307      	movcs	r3, #7
 8008236:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	89fa      	ldrh	r2, [r7, #14]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 facf 	bl	80097e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008244:	e085      	b.n	8008352 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	785a      	ldrb	r2, [r3, #1]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	88db      	ldrh	r3, [r3, #6]
 8008254:	b2da      	uxtb	r2, r3
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800825c:	6939      	ldr	r1, [r7, #16]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	88db      	ldrh	r3, [r3, #6]
 8008262:	461a      	mov	r2, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 fae8 	bl	800983a <USBD_CtlPrepareRx>
      break;
 800826a:	e072      	b.n	8008352 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	7850      	ldrb	r0, [r2, #1]
 8008278:	2200      	movs	r2, #0
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	4798      	blx	r3
      break;
 800827e:	e068      	b.n	8008352 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b0b      	cmp	r3, #11
 8008286:	d852      	bhi.n	800832e <USBD_CDC_Setup+0x162>
 8008288:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBD_CDC_Setup+0xc4>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082c1 	.word	0x080082c1
 8008294:	0800833d 	.word	0x0800833d
 8008298:	0800832f 	.word	0x0800832f
 800829c:	0800832f 	.word	0x0800832f
 80082a0:	0800832f 	.word	0x0800832f
 80082a4:	0800832f 	.word	0x0800832f
 80082a8:	0800832f 	.word	0x0800832f
 80082ac:	0800832f 	.word	0x0800832f
 80082b0:	0800832f 	.word	0x0800832f
 80082b4:	0800832f 	.word	0x0800832f
 80082b8:	080082eb 	.word	0x080082eb
 80082bc:	08008315 	.word	0x08008315
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d107      	bne.n	80082dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082cc:	f107 030a 	add.w	r3, r7, #10
 80082d0:	2202      	movs	r2, #2
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fa84 	bl	80097e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082da:	e032      	b.n	8008342 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fa0e 	bl	8009700 <USBD_CtlError>
            ret = USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	75fb      	strb	r3, [r7, #23]
          break;
 80082e8:	e02b      	b.n	8008342 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d107      	bne.n	8008306 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082f6:	f107 030d 	add.w	r3, r7, #13
 80082fa:	2201      	movs	r2, #1
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fa6f 	bl	80097e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008304:	e01d      	b.n	8008342 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f9f9 	bl	8009700 <USBD_CtlError>
            ret = USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	75fb      	strb	r3, [r7, #23]
          break;
 8008312:	e016      	b.n	8008342 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b03      	cmp	r3, #3
 800831e:	d00f      	beq.n	8008340 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f9ec 	bl	8009700 <USBD_CtlError>
            ret = USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800832c:	e008      	b.n	8008340 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f9e5 	bl	8009700 <USBD_CtlError>
          ret = USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	75fb      	strb	r3, [r7, #23]
          break;
 800833a:	e002      	b.n	8008342 <USBD_CDC_Setup+0x176>
          break;
 800833c:	bf00      	nop
 800833e:	e008      	b.n	8008352 <USBD_CDC_Setup+0x186>
          break;
 8008340:	bf00      	nop
      }
      break;
 8008342:	e006      	b.n	8008352 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f9da 	bl	8009700 <USBD_CtlError>
      ret = USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	75fb      	strb	r3, [r7, #23]
      break;
 8008350:	bf00      	nop
  }

  return (uint8_t)ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800836e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	e04f      	b.n	800841e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008384:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	3318      	adds	r3, #24
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d029      	beq.n	80083f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	3318      	adds	r3, #24
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	78f9      	ldrb	r1, [r7, #3]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	460b      	mov	r3, r1
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4403      	add	r3, r0
 80083bc:	3338      	adds	r3, #56	; 0x38
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d110      	bne.n	80083f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	3318      	adds	r3, #24
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083e2:	78f9      	ldrb	r1, [r7, #3]
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 feb5 	bl	800a158 <USBD_LL_Transmit>
 80083ee:	e015      	b.n	800841c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008438:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	e015      	b.n	8008474 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fec5 	bl	800a1dc <USBD_LL_GetRxDataSize>
 8008452:	4602      	mov	r2, r0
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800846e:	4611      	mov	r1, r2
 8008470:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800848a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	e01b      	b.n	80084ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d015      	beq.n	80084cc <USBD_CDC_EP0_RxReady+0x50>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084a6:	2bff      	cmp	r3, #255	; 0xff
 80084a8:	d010      	beq.n	80084cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80084b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084c0:	b292      	uxth	r2, r2
 80084c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	22ff      	movs	r2, #255	; 0xff
 80084c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2243      	movs	r2, #67	; 0x43
 80084e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80084e6:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200000c4 	.word	0x200000c4

080084f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2243      	movs	r2, #67	; 0x43
 8008504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000080 	.word	0x20000080

08008518 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2243      	movs	r2, #67	; 0x43
 8008524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008526:	4b03      	ldr	r3, [pc, #12]	; (8008534 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	20000108 	.word	0x20000108

08008538 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	220a      	movs	r2, #10
 8008544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008546:	4b03      	ldr	r3, [pc, #12]	; (8008554 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	2000003c 	.word	0x2000003c

08008558 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e004      	b.n	8008576 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008582:	b480      	push	{r7}
 8008584:	b087      	sub	sp, #28
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008594:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	e008      	b.n	80085b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e004      	b.n	80085e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008600:	2301      	movs	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	e01a      	b.n	8008648 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008618:	2b00      	cmp	r3, #0
 800861a:	d114      	bne.n	8008646 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2201      	movs	r2, #1
 8008620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800863a:	2181      	movs	r1, #129	; 0x81
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fd8b 	bl	800a158 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800865e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	e016      	b.n	800869c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7c1b      	ldrb	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800867c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008680:	2101      	movs	r1, #1
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fd89 	bl	800a19a <USBD_LL_PrepareReceive>
 8008688:	e007      	b.n	800869a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	2101      	movs	r1, #1
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fd80 	bl	800a19a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e01f      	b.n	80086fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	79fa      	ldrb	r2, [r7, #7]
 80086ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f001 fbe7 	bl	8009ec4 <USBD_LL_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008718:	2303      	movs	r3, #3
 800871a:	e016      	b.n	800874a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	f107 020e 	add.w	r2, r7, #14
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	4602      	mov	r2, r0
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fc12 	bl	8009f84 <USBD_LL_Start>
 8008760:	4603      	mov	r3, r0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	4611      	mov	r1, r2
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	4611      	mov	r1, r2
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	4798      	blx	r3
  }

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 ff46 	bl	800968c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	2b02      	cmp	r3, #2
 8008822:	d01a      	beq.n	800885a <USBD_LL_SetupStage+0x72>
 8008824:	2b02      	cmp	r3, #2
 8008826:	d822      	bhi.n	800886e <USBD_LL_SetupStage+0x86>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <USBD_LL_SetupStage+0x4a>
 800882c:	2b01      	cmp	r3, #1
 800882e:	d00a      	beq.n	8008846 <USBD_LL_SetupStage+0x5e>
 8008830:	e01d      	b.n	800886e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9ee 	bl	8008c1c <USBD_StdDevReq>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e020      	b.n	8008888 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa52 	bl	8008cf8 <USBD_StdItfReq>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e016      	b.n	8008888 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa91 	bl	8008d8a <USBD_StdEPReq>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
      break;
 800886c:	e00c      	b.n	8008888 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008874:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008878:	b2db      	uxtb	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fbe1 	bl	800a044 <USBD_LL_StallEP>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
      break;
 8008886:	bf00      	nop
  }

  return ret;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	60f8      	str	r0, [r7, #12]
 800889a:	460b      	mov	r3, r1
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d138      	bne.n	8008918 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80088ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d14a      	bne.n	800894e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d913      	bls.n	80088ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	4293      	cmp	r3, r2
 80088dc:	bf28      	it	cs
 80088de:	4613      	movcs	r3, r2
 80088e0:	461a      	mov	r2, r3
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 ffc5 	bl	8009874 <USBD_CtlContinueRx>
 80088ea:	e030      	b.n	800894e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d10b      	bne.n	8008910 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 ffc0 	bl	8009896 <USBD_CtlSendStatus>
 8008916:	e01a      	b.n	800894e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b03      	cmp	r3, #3
 8008922:	d114      	bne.n	800894e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00e      	beq.n	800894e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	7afa      	ldrb	r2, [r7, #11]
 800893a:	4611      	mov	r1, r2
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	4798      	blx	r3
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	e000      	b.n	8008950 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008966:	7afb      	ldrb	r3, [r7, #11]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d16b      	bne.n	8008a44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3314      	adds	r3, #20
 8008970:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008978:	2b02      	cmp	r3, #2
 800897a:	d156      	bne.n	8008a2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d914      	bls.n	80089b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	1ad2      	subs	r2, r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	461a      	mov	r2, r3
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 ff3a 	bl	8009818 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a4:	2300      	movs	r3, #0
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f001 fbf5 	bl	800a19a <USBD_LL_PrepareReceive>
 80089b0:	e03b      	b.n	8008a2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d11c      	bne.n	80089f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d316      	bcc.n	80089f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d20f      	bcs.n	80089f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089d8:	2200      	movs	r2, #0
 80089da:	2100      	movs	r1, #0
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 ff1b 	bl	8009818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ea:	2300      	movs	r3, #0
 80089ec:	2200      	movs	r2, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 fbd2 	bl	800a19a <USBD_LL_PrepareReceive>
 80089f6:	e018      	b.n	8008a2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d10b      	bne.n	8008a1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f001 fb10 	bl	800a044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 ff49 	bl	80098bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d122      	bne.n	8008a7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff fe98 	bl	800876a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a42:	e01a      	b.n	8008a7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d114      	bne.n	8008a7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00e      	beq.n	8008a7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	7afa      	ldrb	r2, [r7, #11]
 8008a66:	4611      	mov	r1, r2
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	4798      	blx	r3
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	e000      	b.n	8008a7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e02f      	b.n	8008b18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00f      	beq.n	8008ae2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6852      	ldr	r2, [r2, #4]
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	4611      	mov	r1, r2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fa66 	bl	8009fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2240      	movs	r2, #64	; 0x40
 8008afa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	2200      	movs	r2, #0
 8008b02:	2180      	movs	r1, #128	; 0x80
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 fa58 	bl	8009fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2240      	movs	r2, #64	; 0x40
 8008b14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2204      	movs	r2, #4
 8008b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d106      	bne.n	8008b8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e012      	b.n	8008bd8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d10b      	bne.n	8008bd6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bfe:	8a3b      	ldrh	r3, [r7, #16]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	b21a      	sxth	r2, r3
 8008c04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	b21b      	sxth	r3, r3
 8008c0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c0e:	89fb      	ldrh	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d005      	beq.n	8008c42 <USBD_StdDevReq+0x26>
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d853      	bhi.n	8008ce2 <USBD_StdDevReq+0xc6>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <USBD_StdDevReq+0x3a>
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d14f      	bne.n	8008ce2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
      break;
 8008c54:	e04a      	b.n	8008cec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d83b      	bhi.n	8008cd6 <USBD_StdDevReq+0xba>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <USBD_StdDevReq+0x48>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008ccd 	.word	0x08008ccd
 8008c6c:	08008cd7 	.word	0x08008cd7
 8008c70:	08008cc3 	.word	0x08008cc3
 8008c74:	08008cd7 	.word	0x08008cd7
 8008c78:	08008c97 	.word	0x08008c97
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008cd7 	.word	0x08008cd7
 8008c84:	08008caf 	.word	0x08008caf
 8008c88:	08008ca1 	.word	0x08008ca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9de 	bl	8009050 <USBD_GetDescriptor>
          break;
 8008c94:	e024      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fb6d 	bl	8009378 <USBD_SetAddress>
          break;
 8008c9e:	e01f      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fbac 	bl	8009400 <USBD_SetConfig>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
          break;
 8008cac:	e018      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fc4b 	bl	800954c <USBD_GetConfig>
          break;
 8008cb6:	e013      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fc7c 	bl	80095b8 <USBD_GetStatus>
          break;
 8008cc0:	e00e      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fcab 	bl	8009620 <USBD_SetFeature>
          break;
 8008cca:	e009      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fcba 	bl	8009648 <USBD_ClrFeature>
          break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fd11 	bl	8009700 <USBD_CtlError>
          break;
 8008cde:	bf00      	nop
      }
      break;
 8008ce0:	e004      	b.n	8008cec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fd0b 	bl	8009700 <USBD_CtlError>
      break;
 8008cea:	bf00      	nop
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop

08008cf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d005      	beq.n	8008d1e <USBD_StdItfReq+0x26>
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d82f      	bhi.n	8008d76 <USBD_StdItfReq+0x7e>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <USBD_StdItfReq+0x26>
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d12b      	bne.n	8008d76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d81d      	bhi.n	8008d68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	889b      	ldrh	r3, [r3, #4]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d813      	bhi.n	8008d5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	88db      	ldrh	r3, [r3, #6]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d110      	bne.n	8008d72 <USBD_StdItfReq+0x7a>
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10d      	bne.n	8008d72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fd9d 	bl	8009896 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d5c:	e009      	b.n	8008d72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fccd 	bl	8009700 <USBD_CtlError>
          break;
 8008d66:	e004      	b.n	8008d72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fcc8 	bl	8009700 <USBD_CtlError>
          break;
 8008d70:	e000      	b.n	8008d74 <USBD_StdItfReq+0x7c>
          break;
 8008d72:	bf00      	nop
      }
      break;
 8008d74:	e004      	b.n	8008d80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fcc1 	bl	8009700 <USBD_CtlError>
      break;
 8008d7e:	bf00      	nop
  }

  return ret;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	889b      	ldrh	r3, [r3, #4]
 8008d9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d007      	beq.n	8008dba <USBD_StdEPReq+0x30>
 8008daa:	2b40      	cmp	r3, #64	; 0x40
 8008dac:	f200 8145 	bhi.w	800903a <USBD_StdEPReq+0x2b0>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00c      	beq.n	8008dce <USBD_StdEPReq+0x44>
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	f040 8140 	bne.w	800903a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e13a      	b.n	8009044 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d007      	beq.n	8008de6 <USBD_StdEPReq+0x5c>
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	f300 8129 	bgt.w	800902e <USBD_StdEPReq+0x2a4>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d07f      	beq.n	8008ee0 <USBD_StdEPReq+0x156>
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d03c      	beq.n	8008e5e <USBD_StdEPReq+0xd4>
 8008de4:	e123      	b.n	800902e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d002      	beq.n	8008df8 <USBD_StdEPReq+0x6e>
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d016      	beq.n	8008e24 <USBD_StdEPReq+0x9a>
 8008df6:	e02c      	b.n	8008e52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00d      	beq.n	8008e1a <USBD_StdEPReq+0x90>
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b80      	cmp	r3, #128	; 0x80
 8008e02:	d00a      	beq.n	8008e1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f91b 	bl	800a044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 f917 	bl	800a044 <USBD_LL_StallEP>
 8008e16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e18:	e020      	b.n	8008e5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fc6f 	bl	8009700 <USBD_CtlError>
              break;
 8008e22:	e01b      	b.n	8008e5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10e      	bne.n	8008e4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <USBD_StdEPReq+0xc0>
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d008      	beq.n	8008e4a <USBD_StdEPReq+0xc0>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 f8fd 	bl	800a044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fd23 	bl	8009896 <USBD_CtlSendStatus>

              break;
 8008e50:	e004      	b.n	8008e5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc53 	bl	8009700 <USBD_CtlError>
              break;
 8008e5a:	bf00      	nop
          }
          break;
 8008e5c:	e0ec      	b.n	8009038 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d002      	beq.n	8008e70 <USBD_StdEPReq+0xe6>
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d016      	beq.n	8008e9c <USBD_StdEPReq+0x112>
 8008e6e:	e030      	b.n	8008ed2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00d      	beq.n	8008e92 <USBD_StdEPReq+0x108>
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	d00a      	beq.n	8008e92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f8df 	bl	800a044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f8db 	bl	800a044 <USBD_LL_StallEP>
 8008e8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e90:	e025      	b.n	8008ede <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fc33 	bl	8009700 <USBD_CtlError>
              break;
 8008e9a:	e020      	b.n	8008ede <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d11b      	bne.n	8008edc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f8e5 	bl	800a082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fcec 	bl	8009896 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fc13 	bl	8009700 <USBD_CtlError>
              break;
 8008eda:	e000      	b.n	8008ede <USBD_StdEPReq+0x154>
              break;
 8008edc:	bf00      	nop
          }
          break;
 8008ede:	e0ab      	b.n	8009038 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d002      	beq.n	8008ef2 <USBD_StdEPReq+0x168>
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d032      	beq.n	8008f56 <USBD_StdEPReq+0x1cc>
 8008ef0:	e097      	b.n	8009022 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <USBD_StdEPReq+0x17e>
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b80      	cmp	r3, #128	; 0x80
 8008efc:	d004      	beq.n	8008f08 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fbfd 	bl	8009700 <USBD_CtlError>
                break;
 8008f06:	e091      	b.n	800902c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	da0b      	bge.n	8008f28 <USBD_StdEPReq+0x19e>
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	3310      	adds	r3, #16
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
 8008f26:	e00b      	b.n	8008f40 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3304      	adds	r3, #4
 8008f40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fc47 	bl	80097e2 <USBD_CtlSendData>
              break;
 8008f54:	e06a      	b.n	800902c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	da11      	bge.n	8008f82 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	f003 020f 	and.w	r2, r3, #15
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	3324      	adds	r3, #36	; 0x24
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d117      	bne.n	8008fa8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fbc0 	bl	8009700 <USBD_CtlError>
                  break;
 8008f80:	e054      	b.n	800902c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	f003 020f 	and.w	r2, r3, #15
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fbad 	bl	8009700 <USBD_CtlError>
                  break;
 8008fa6:	e041      	b.n	800902c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da0b      	bge.n	8008fc8 <USBD_StdEPReq+0x23e>
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	3310      	adds	r3, #16
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	e00b      	b.n	8008fe0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	3304      	adds	r3, #4
 8008fe0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <USBD_StdEPReq+0x264>
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b80      	cmp	r3, #128	; 0x80
 8008fec:	d103      	bne.n	8008ff6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	e00e      	b.n	8009014 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 f860 	bl	800a0c0 <USBD_LL_IsStallEP>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	e002      	b.n	8009014 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2202      	movs	r2, #2
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fbe1 	bl	80097e2 <USBD_CtlSendData>
              break;
 8009020:	e004      	b.n	800902c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fb6b 	bl	8009700 <USBD_CtlError>
              break;
 800902a:	bf00      	nop
          }
          break;
 800902c:	e004      	b.n	8009038 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fb65 	bl	8009700 <USBD_CtlError>
          break;
 8009036:	bf00      	nop
      }
      break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb5f 	bl	8009700 <USBD_CtlError>
      break;
 8009042:	bf00      	nop
  }

  return ret;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	2b0e      	cmp	r3, #14
 8009072:	f200 8152 	bhi.w	800931a <USBD_GetDescriptor+0x2ca>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <USBD_GetDescriptor+0x2c>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090ed 	.word	0x080090ed
 8009080:	08009105 	.word	0x08009105
 8009084:	08009145 	.word	0x08009145
 8009088:	0800931b 	.word	0x0800931b
 800908c:	0800931b 	.word	0x0800931b
 8009090:	080092bb 	.word	0x080092bb
 8009094:	080092e7 	.word	0x080092e7
 8009098:	0800931b 	.word	0x0800931b
 800909c:	0800931b 	.word	0x0800931b
 80090a0:	0800931b 	.word	0x0800931b
 80090a4:	0800931b 	.word	0x0800931b
 80090a8:	0800931b 	.word	0x0800931b
 80090ac:	0800931b 	.word	0x0800931b
 80090b0:	0800931b 	.word	0x0800931b
 80090b4:	080090b9 	.word	0x080090b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090da:	e126      	b.n	800932a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fb0e 	bl	8009700 <USBD_CtlError>
        err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
      break;
 80090ea:	e11e      	b.n	800932a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
      break;
 8009102:	e112      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10d      	bne.n	8009128 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009114:	f107 0208 	add.w	r2, r7, #8
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	2202      	movs	r2, #2
 8009124:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009126:	e100      	b.n	800932a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	f107 0208 	add.w	r2, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3301      	adds	r3, #1
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
      break;
 8009142:	e0f2      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	885b      	ldrh	r3, [r3, #2]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b05      	cmp	r3, #5
 800914c:	f200 80ac 	bhi.w	80092a8 <USBD_GetDescriptor+0x258>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <USBD_GetDescriptor+0x108>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009171 	.word	0x08009171
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091d9 	.word	0x080091d9
 8009164:	0800920d 	.word	0x0800920d
 8009168:	08009241 	.word	0x08009241
 800916c:	08009275 	.word	0x08009275
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	7c12      	ldrb	r2, [r2, #16]
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009192:	e091      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fab2 	bl	8009700 <USBD_CtlError>
            err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
          break;
 80091a2:	e089      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7c12      	ldrb	r2, [r2, #16]
 80091bc:	f107 0108 	add.w	r1, r7, #8
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c6:	e077      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa98 	bl	8009700 <USBD_CtlError>
            err++;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	3301      	adds	r3, #1
 80091d4:	72fb      	strb	r3, [r7, #11]
          break;
 80091d6:	e06f      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091fa:	e05d      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa7e 	bl	8009700 <USBD_CtlError>
            err++;
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	3301      	adds	r3, #1
 8009208:	72fb      	strb	r3, [r7, #11]
          break;
 800920a:	e055      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922e:	e043      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa64 	bl	8009700 <USBD_CtlError>
            err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
          break;
 800923e:	e03b      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e029      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa4a 	bl	8009700 <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e021      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e00f      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa30 	bl	8009700 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e007      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa28 	bl	8009700 <USBD_CtlError>
          err++;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	3301      	adds	r3, #1
 80092b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80092b6:	bf00      	nop
      }
      break;
 80092b8:	e037      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7c1b      	ldrb	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	f107 0208 	add.w	r2, r7, #8
 80092ce:	4610      	mov	r0, r2
 80092d0:	4798      	blx	r3
 80092d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092d4:	e029      	b.n	800932a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa11 	bl	8009700 <USBD_CtlError>
        err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	e021      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7c1b      	ldrb	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f107 0208 	add.w	r2, r7, #8
 80092fa:	4610      	mov	r0, r2
 80092fc:	4798      	blx	r3
 80092fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	2207      	movs	r2, #7
 8009306:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009308:	e00f      	b.n	800932a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9f7 	bl	8009700 <USBD_CtlError>
        err++;
 8009312:	7afb      	ldrb	r3, [r7, #11]
 8009314:	3301      	adds	r3, #1
 8009316:	72fb      	strb	r3, [r7, #11]
      break;
 8009318:	e007      	b.n	800932a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f9ef 	bl	8009700 <USBD_CtlError>
      err++;
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	3301      	adds	r3, #1
 8009326:	72fb      	strb	r3, [r7, #11]
      break;
 8009328:	bf00      	nop
  }

  if (err != 0U)
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11e      	bne.n	800936e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	88db      	ldrh	r3, [r3, #6]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d016      	beq.n	8009366 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009338:	893b      	ldrh	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00e      	beq.n	800935c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88da      	ldrh	r2, [r3, #6]
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	4293      	cmp	r3, r2
 8009346:	bf28      	it	cs
 8009348:	4613      	movcs	r3, r2
 800934a:	b29b      	uxth	r3, r3
 800934c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800934e:	893b      	ldrh	r3, [r7, #8]
 8009350:	461a      	mov	r2, r3
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa44 	bl	80097e2 <USBD_CtlSendData>
 800935a:	e009      	b.n	8009370 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f9ce 	bl	8009700 <USBD_CtlError>
 8009364:	e004      	b.n	8009370 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa95 	bl	8009896 <USBD_CtlSendStatus>
 800936c:	e000      	b.n	8009370 <USBD_GetDescriptor+0x320>
    return;
 800936e:	bf00      	nop
  }
}
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop

08009378 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	889b      	ldrh	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d131      	bne.n	80093ee <USBD_SetAddress+0x76>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	88db      	ldrh	r3, [r3, #6]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d12d      	bne.n	80093ee <USBD_SetAddress+0x76>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	2b7f      	cmp	r3, #127	; 0x7f
 8009398:	d829      	bhi.n	80093ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	885b      	ldrh	r3, [r3, #2]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d104      	bne.n	80093bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f9a3 	bl	8009700 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ba:	e01d      	b.n	80093f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7bfa      	ldrb	r2, [r7, #15]
 80093c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fea6 	bl	800a11a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa61 	bl	8009896 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2202      	movs	r2, #2
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	e009      	b.n	80093f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ec:	e004      	b.n	80093f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f985 	bl	8009700 <USBD_CtlError>
  }
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	b2da      	uxtb	r2, r3
 8009414:	4b4c      	ldr	r3, [pc, #304]	; (8009548 <USBD_SetConfig+0x148>)
 8009416:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009418:	4b4b      	ldr	r3, [pc, #300]	; (8009548 <USBD_SetConfig+0x148>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d905      	bls.n	800942c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f96c 	bl	8009700 <USBD_CtlError>
    return USBD_FAIL;
 8009428:	2303      	movs	r3, #3
 800942a:	e088      	b.n	800953e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d002      	beq.n	800943e <USBD_SetConfig+0x3e>
 8009438:	2b03      	cmp	r3, #3
 800943a:	d025      	beq.n	8009488 <USBD_SetConfig+0x88>
 800943c:	e071      	b.n	8009522 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800943e:	4b42      	ldr	r3, [pc, #264]	; (8009548 <USBD_SetConfig+0x148>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01c      	beq.n	8009480 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009446:	4b40      	ldr	r3, [pc, #256]	; (8009548 <USBD_SetConfig+0x148>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009450:	4b3d      	ldr	r3, [pc, #244]	; (8009548 <USBD_SetConfig+0x148>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff f992 	bl	8008780 <USBD_SetClassConfig>
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d004      	beq.n	8009470 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f949 	bl	8009700 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800946e:	e065      	b.n	800953c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa10 	bl	8009896 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2203      	movs	r2, #3
 800947a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800947e:	e05d      	b.n	800953c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fa08 	bl	8009896 <USBD_CtlSendStatus>
      break;
 8009486:	e059      	b.n	800953c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009488:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <USBD_SetConfig+0x148>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d112      	bne.n	80094b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009498:	4b2b      	ldr	r3, [pc, #172]	; (8009548 <USBD_SetConfig+0x148>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094a2:	4b29      	ldr	r3, [pc, #164]	; (8009548 <USBD_SetConfig+0x148>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff f985 	bl	80087b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9f1 	bl	8009896 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094b4:	e042      	b.n	800953c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80094b6:	4b24      	ldr	r3, [pc, #144]	; (8009548 <USBD_SetConfig+0x148>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d02a      	beq.n	800951a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff f973 	bl	80087b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <USBD_SetConfig+0x148>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094dc:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <USBD_SetConfig+0x148>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff f94c 	bl	8008780 <USBD_SetClassConfig>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00f      	beq.n	8009512 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f903 	bl	8009700 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff f958 	bl	80087b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009510:	e014      	b.n	800953c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f9bf 	bl	8009896 <USBD_CtlSendStatus>
      break;
 8009518:	e010      	b.n	800953c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f9bb 	bl	8009896 <USBD_CtlSendStatus>
      break;
 8009520:	e00c      	b.n	800953c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8eb 	bl	8009700 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <USBD_SetConfig+0x148>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff f941 	bl	80087b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009536:	2303      	movs	r3, #3
 8009538:	73fb      	strb	r3, [r7, #15]
      break;
 800953a:	bf00      	nop
  }

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000490 	.word	0x20000490

0800954c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88db      	ldrh	r3, [r3, #6]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d004      	beq.n	8009568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8cd 	bl	8009700 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009566:	e023      	b.n	80095b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	dc02      	bgt.n	800957a <USBD_GetConfig+0x2e>
 8009574:	2b00      	cmp	r3, #0
 8009576:	dc03      	bgt.n	8009580 <USBD_GetConfig+0x34>
 8009578:	e015      	b.n	80095a6 <USBD_GetConfig+0x5a>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d00b      	beq.n	8009596 <USBD_GetConfig+0x4a>
 800957e:	e012      	b.n	80095a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3308      	adds	r3, #8
 800958a:	2201      	movs	r2, #1
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f927 	bl	80097e2 <USBD_CtlSendData>
        break;
 8009594:	e00c      	b.n	80095b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3304      	adds	r3, #4
 800959a:	2201      	movs	r2, #1
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f91f 	bl	80097e2 <USBD_CtlSendData>
        break;
 80095a4:	e004      	b.n	80095b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f8a9 	bl	8009700 <USBD_CtlError>
        break;
 80095ae:	bf00      	nop
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d81e      	bhi.n	800960e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	88db      	ldrh	r3, [r3, #6]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d004      	beq.n	80095e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f890 	bl	8009700 <USBD_CtlError>
        break;
 80095e0:	e01a      	b.n	8009618 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f043 0202 	orr.w	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	330c      	adds	r3, #12
 8009602:	2202      	movs	r2, #2
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8eb 	bl	80097e2 <USBD_CtlSendData>
      break;
 800960c:	e004      	b.n	8009618 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f875 	bl	8009700 <USBD_CtlError>
      break;
 8009616:	bf00      	nop
  }
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	885b      	ldrh	r3, [r3, #2]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d106      	bne.n	8009640 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f92b 	bl	8009896 <USBD_CtlSendStatus>
  }
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009658:	b2db      	uxtb	r3, r3
 800965a:	3b01      	subs	r3, #1
 800965c:	2b02      	cmp	r3, #2
 800965e:	d80b      	bhi.n	8009678 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	885b      	ldrh	r3, [r3, #2]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d10c      	bne.n	8009682 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f910 	bl	8009896 <USBD_CtlSendStatus>
      }
      break;
 8009676:	e004      	b.n	8009682 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f840 	bl	8009700 <USBD_CtlError>
      break;
 8009680:	e000      	b.n	8009684 <USBD_ClrFeature+0x3c>
      break;
 8009682:	bf00      	nop
  }
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff fa92 	bl	8008be0 <SWAPBYTE>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3301      	adds	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7ff fa85 	bl	8008be0 <SWAPBYTE>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3301      	adds	r3, #1
 80096e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff fa78 	bl	8008be0 <SWAPBYTE>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	80da      	strh	r2, [r3, #6]
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc99 	bl	800a044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc95 	bl	800a044 <USBD_LL_StallEP>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d036      	beq.n	80097a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800973c:	6938      	ldr	r0, [r7, #16]
 800973e:	f000 f836 	bl	80097ae <USBD_GetLen>
 8009742:	4603      	mov	r3, r0
 8009744:	3301      	adds	r3, #1
 8009746:	b29b      	uxth	r3, r3
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	4413      	add	r3, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	701a      	strb	r2, [r3, #0]
  idx++;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	3301      	adds	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	4413      	add	r3, r2
 8009768:	2203      	movs	r2, #3
 800976a:	701a      	strb	r2, [r3, #0]
  idx++;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	3301      	adds	r3, #1
 8009770:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009772:	e013      	b.n	800979c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	4413      	add	r3, r2
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	7812      	ldrb	r2, [r2, #0]
 800977e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3301      	adds	r3, #1
 8009784:	613b      	str	r3, [r7, #16]
    idx++;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	3301      	adds	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
    idx++;
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	3301      	adds	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e7      	bne.n	8009774 <USBD_GetString+0x52>
 80097a4:	e000      	b.n	80097a8 <USBD_GetString+0x86>
    return;
 80097a6:	bf00      	nop
  }
}
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097be:	e005      	b.n	80097cc <USBD_GetLen+0x1e>
  {
    len++;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	3301      	adds	r3, #1
 80097c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1f5      	bne.n	80097c0 <USBD_GetLen+0x12>
  }

  return len;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2202      	movs	r2, #2
 80097f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fca5 	bl	800a158 <USBD_LL_Transmit>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fc94 	bl	800a158 <USBD_LL_Transmit>

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2203      	movs	r2, #3
 800984a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	2100      	movs	r1, #0
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fc98 	bl	800a19a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	2100      	movs	r1, #0
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 fc87 	bl	800a19a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2204      	movs	r2, #4
 80098a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098a6:	2300      	movs	r3, #0
 80098a8:	2200      	movs	r2, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc53 	bl	800a158 <USBD_LL_Transmit>

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2205      	movs	r2, #5
 80098c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098cc:	2300      	movs	r3, #0
 80098ce:	2200      	movs	r2, #0
 80098d0:	2100      	movs	r1, #0
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fc61 	bl	800a19a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80098e8:	2200      	movs	r2, #0
 80098ea:	4912      	ldr	r1, [pc, #72]	; (8009934 <MX_USB_Device_Init+0x50>)
 80098ec:	4812      	ldr	r0, [pc, #72]	; (8009938 <MX_USB_Device_Init+0x54>)
 80098ee:	f7fe fed9 	bl	80086a4 <USBD_Init>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80098f8:	f7f7 fb0a 	bl	8000f10 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80098fc:	490f      	ldr	r1, [pc, #60]	; (800993c <MX_USB_Device_Init+0x58>)
 80098fe:	480e      	ldr	r0, [pc, #56]	; (8009938 <MX_USB_Device_Init+0x54>)
 8009900:	f7fe ff00 	bl	8008704 <USBD_RegisterClass>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800990a:	f7f7 fb01 	bl	8000f10 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800990e:	490c      	ldr	r1, [pc, #48]	; (8009940 <MX_USB_Device_Init+0x5c>)
 8009910:	4809      	ldr	r0, [pc, #36]	; (8009938 <MX_USB_Device_Init+0x54>)
 8009912:	f7fe fe21 	bl	8008558 <USBD_CDC_RegisterInterface>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800991c:	f7f7 faf8 	bl	8000f10 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <MX_USB_Device_Init+0x54>)
 8009922:	f7fe ff16 	bl	8008752 <USBD_Start>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800992c:	f7f7 faf0 	bl	8000f10 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009930:	bf00      	nop
 8009932:	bd80      	pop	{r7, pc}
 8009934:	20000160 	.word	0x20000160
 8009938:	20000494 	.word	0x20000494
 800993c:	20000048 	.word	0x20000048
 8009940:	2000014c 	.word	0x2000014c

08009944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009948:	2200      	movs	r2, #0
 800994a:	4905      	ldr	r1, [pc, #20]	; (8009960 <CDC_Init_FS+0x1c>)
 800994c:	4805      	ldr	r0, [pc, #20]	; (8009964 <CDC_Init_FS+0x20>)
 800994e:	f7fe fe18 	bl	8008582 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009952:	4905      	ldr	r1, [pc, #20]	; (8009968 <CDC_Init_FS+0x24>)
 8009954:	4803      	ldr	r0, [pc, #12]	; (8009964 <CDC_Init_FS+0x20>)
 8009956:	f7fe fe32 	bl	80085be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800995a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800995c:	4618      	mov	r0, r3
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000b64 	.word	0x20000b64
 8009964:	20000494 	.word	0x20000494
 8009968:	20000764 	.word	0x20000764

0800996c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009970:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009972:	4618      	mov	r0, r3
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	6039      	str	r1, [r7, #0]
 8009986:	71fb      	strb	r3, [r7, #7]
 8009988:	4613      	mov	r3, r2
 800998a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b23      	cmp	r3, #35	; 0x23
 8009990:	d84a      	bhi.n	8009a28 <CDC_Control_FS+0xac>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <CDC_Control_FS+0x1c>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	08009a29 	.word	0x08009a29
 800999c:	08009a29 	.word	0x08009a29
 80099a0:	08009a29 	.word	0x08009a29
 80099a4:	08009a29 	.word	0x08009a29
 80099a8:	08009a29 	.word	0x08009a29
 80099ac:	08009a29 	.word	0x08009a29
 80099b0:	08009a29 	.word	0x08009a29
 80099b4:	08009a29 	.word	0x08009a29
 80099b8:	08009a29 	.word	0x08009a29
 80099bc:	08009a29 	.word	0x08009a29
 80099c0:	08009a29 	.word	0x08009a29
 80099c4:	08009a29 	.word	0x08009a29
 80099c8:	08009a29 	.word	0x08009a29
 80099cc:	08009a29 	.word	0x08009a29
 80099d0:	08009a29 	.word	0x08009a29
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	08009a29 	.word	0x08009a29
 80099dc:	08009a29 	.word	0x08009a29
 80099e0:	08009a29 	.word	0x08009a29
 80099e4:	08009a29 	.word	0x08009a29
 80099e8:	08009a29 	.word	0x08009a29
 80099ec:	08009a29 	.word	0x08009a29
 80099f0:	08009a29 	.word	0x08009a29
 80099f4:	08009a29 	.word	0x08009a29
 80099f8:	08009a29 	.word	0x08009a29
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a29 	.word	0x08009a29
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a29 	.word	0x08009a29
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a29 	.word	0x08009a29
 8009a20:	08009a29 	.word	0x08009a29
 8009a24:	08009a29 	.word	0x08009a29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a28:	bf00      	nop
  }

  return (USBD_OK);
 8009a2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  CDC_On_Receive(Buf, Len);
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7f6 fbe7 	bl	8000218 <CDC_On_Receive>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <CDC_Receive_FS+0x2c>)
 8009a4e:	f7fe fdb6 	bl	80085be <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a52:	4804      	ldr	r0, [pc, #16]	; (8009a64 <CDC_Receive_FS+0x2c>)
 8009a54:	f7fe fdfc 	bl	8008650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009a58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000494 	.word	0x20000494

08009a68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <CDC_Transmit_FS+0x48>)
 8009a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e00b      	b.n	8009aa6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a8e:	887b      	ldrh	r3, [r7, #2]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4806      	ldr	r0, [pc, #24]	; (8009ab0 <CDC_Transmit_FS+0x48>)
 8009a96:	f7fe fd74 	bl	8008582 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a9a:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <CDC_Transmit_FS+0x48>)
 8009a9c:	f7fe fda8 	bl	80085f0 <USBD_CDC_TransmitPacket>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000494 	.word	0x20000494

08009ab4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	371c      	adds	r7, #28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2212      	movs	r2, #18
 8009ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009aea:	4b03      	ldr	r3, [pc, #12]	; (8009af8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	20000180 	.word	0x20000180

08009afc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b0e:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	20000194 	.word	0x20000194

08009b20 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d105      	bne.n	8009b3e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	4907      	ldr	r1, [pc, #28]	; (8009b54 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009b36:	4808      	ldr	r0, [pc, #32]	; (8009b58 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009b38:	f7ff fdf3 	bl	8009722 <USBD_GetString>
 8009b3c:	e004      	b.n	8009b48 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4904      	ldr	r1, [pc, #16]	; (8009b54 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009b42:	4805      	ldr	r0, [pc, #20]	; (8009b58 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009b44:	f7ff fded 	bl	8009722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b48:	4b02      	ldr	r3, [pc, #8]	; (8009b54 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000f64 	.word	0x20000f64
 8009b58:	0800a390 	.word	0x0800a390

08009b5c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	4904      	ldr	r1, [pc, #16]	; (8009b7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009b6c:	4804      	ldr	r0, [pc, #16]	; (8009b80 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009b6e:	f7ff fdd8 	bl	8009722 <USBD_GetString>
  return USBD_StrDesc;
 8009b72:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000f64 	.word	0x20000f64
 8009b80:	0800a3a8 	.word	0x0800a3a8

08009b84 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	221a      	movs	r2, #26
 8009b94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b96:	f000 f843 	bl	8009c20 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b9a:	4b02      	ldr	r3, [pc, #8]	; (8009ba4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	20000198 	.word	0x20000198

08009ba8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	4907      	ldr	r1, [pc, #28]	; (8009bdc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009bbe:	4808      	ldr	r0, [pc, #32]	; (8009be0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009bc0:	f7ff fdaf 	bl	8009722 <USBD_GetString>
 8009bc4:	e004      	b.n	8009bd0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	4904      	ldr	r1, [pc, #16]	; (8009bdc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009bca:	4805      	ldr	r0, [pc, #20]	; (8009be0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009bcc:	f7ff fda9 	bl	8009722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000f64 	.word	0x20000f64
 8009be0:	0800a3bc 	.word	0x0800a3bc

08009be4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4907      	ldr	r1, [pc, #28]	; (8009c18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009bfa:	4808      	ldr	r0, [pc, #32]	; (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009bfc:	f7ff fd91 	bl	8009722 <USBD_GetString>
 8009c00:	e004      	b.n	8009c0c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4904      	ldr	r1, [pc, #16]	; (8009c18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009c06:	4805      	ldr	r0, [pc, #20]	; (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009c08:	f7ff fd8b 	bl	8009722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000f64 	.word	0x20000f64
 8009c1c:	0800a3c8 	.word	0x0800a3c8

08009c20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <Get_SerialNum+0x44>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <Get_SerialNum+0x48>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <Get_SerialNum+0x4c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d009      	beq.n	8009c5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c46:	2208      	movs	r2, #8
 8009c48:	4909      	ldr	r1, [pc, #36]	; (8009c70 <Get_SerialNum+0x50>)
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f814 	bl	8009c78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c50:	2204      	movs	r2, #4
 8009c52:	4908      	ldr	r1, [pc, #32]	; (8009c74 <Get_SerialNum+0x54>)
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	f000 f80f 	bl	8009c78 <IntToUnicode>
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	1fff7590 	.word	0x1fff7590
 8009c68:	1fff7594 	.word	0x1fff7594
 8009c6c:	1fff7598 	.word	0x1fff7598
 8009c70:	2000019a 	.word	0x2000019a
 8009c74:	200001aa 	.word	0x200001aa

08009c78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
 8009c8e:	e027      	b.n	8009ce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	0f1b      	lsrs	r3, r3, #28
 8009c94:	2b09      	cmp	r3, #9
 8009c96:	d80b      	bhi.n	8009cb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	0f1b      	lsrs	r3, r3, #28
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	440b      	add	r3, r1
 8009ca8:	3230      	adds	r2, #48	; 0x30
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	e00a      	b.n	8009cc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	0f1b      	lsrs	r3, r3, #28
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3237      	adds	r2, #55	; 0x37
 8009cc2:	b2d2      	uxtb	r2, r2
 8009cc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	011b      	lsls	r3, r3, #4
 8009cca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
 8009ce0:	7dfa      	ldrb	r2, [r7, #23]
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d3d3      	bcc.n	8009c90 <IntToUnicode+0x18>
  }
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b094      	sub	sp, #80	; 0x50
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	2244      	movs	r2, #68	; 0x44
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fb2d 	bl	800a368 <memset>
  if(pcdHandle->Instance==USB)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <HAL_PCD_MspInit+0x70>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d123      	bne.n	8009d60 <HAL_PCD_MspInit+0x68>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8009d1e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009d22:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d24:	f107 030c 	add.w	r3, r7, #12
 8009d28:	4618      	mov	r0, r3
 8009d2a:	f7fa f9b5 	bl	8004098 <HAL_RCCEx_PeriphCLKConfig>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <HAL_PCD_MspInit+0x40>
    {
      Error_Handler();
 8009d34:	f7f7 f8ec 	bl	8000f10 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d38:	4b0c      	ldr	r3, [pc, #48]	; (8009d6c <HAL_PCD_MspInit+0x74>)
 8009d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3c:	4a0b      	ldr	r2, [pc, #44]	; (8009d6c <HAL_PCD_MspInit+0x74>)
 8009d3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d42:	6593      	str	r3, [r2, #88]	; 0x58
 8009d44:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <HAL_PCD_MspInit+0x74>)
 8009d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d4c:	60bb      	str	r3, [r7, #8]
 8009d4e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009d50:	2200      	movs	r2, #0
 8009d52:	2100      	movs	r1, #0
 8009d54:	2014      	movs	r0, #20
 8009d56:	f7f7 fcec 	bl	8001732 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009d5a:	2014      	movs	r0, #20
 8009d5c:	f7f7 fd03 	bl	8001766 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d60:	bf00      	nop
 8009d62:	3750      	adds	r7, #80	; 0x50
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}
 8009d68:	40005c00 	.word	0x40005c00
 8009d6c:	40021000 	.word	0x40021000

08009d70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe fd2e 	bl	80087e8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009da6:	78fa      	ldrb	r2, [r7, #3]
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	440b      	add	r3, r1
 8009db4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f7fe fd68 	bl	8008892 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	440b      	add	r3, r1
 8009dea:	333c      	adds	r3, #60	; 0x3c
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	4619      	mov	r1, r3
 8009df2:	f7fe fdb1 	bl	8008958 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fec5 	bl	8008b9c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e22:	2301      	movs	r3, #1
 8009e24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d001      	beq.n	8009e32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e2e:	f7f7 f86f 	bl	8000f10 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e38:	7bfa      	ldrb	r2, [r7, #15]
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fe6f 	bl	8008b20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fe1b 	bl	8008a84 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fe6a 	bl	8008b40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <HAL_PCD_SuspendCallback+0x30>)
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	4a03      	ldr	r2, [pc, #12]	; (8009e88 <HAL_PCD_SuspendCallback+0x30>)
 8009e7a:	f043 0306 	orr.w	r3, r3, #6
 8009e7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed00 	.word	0xe000ed00

08009e8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d007      	beq.n	8009eac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e9c:	4b08      	ldr	r3, [pc, #32]	; (8009ec0 <HAL_PCD_ResumeCallback+0x34>)
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	4a07      	ldr	r2, [pc, #28]	; (8009ec0 <HAL_PCD_ResumeCallback+0x34>)
 8009ea2:	f023 0306 	bic.w	r3, r3, #6
 8009ea6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ea8:	f000 f9fa 	bl	800a2a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fe5a 	bl	8008b6c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	e000ed00 	.word	0xe000ed00

08009ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ecc:	4a2b      	ldr	r2, [pc, #172]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a29      	ldr	r2, [pc, #164]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ed8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009edc:	4b27      	ldr	r3, [pc, #156]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ede:	4a28      	ldr	r2, [pc, #160]	; (8009f80 <USBD_LL_Init+0xbc>)
 8009ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ee2:	4b26      	ldr	r3, [pc, #152]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ee8:	4b24      	ldr	r3, [pc, #144]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009eea:	2202      	movs	r2, #2
 8009eec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009eee:	4b23      	ldr	r3, [pc, #140]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009ef4:	4b21      	ldr	r3, [pc, #132]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009efa:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f00:	4b1e      	ldr	r3, [pc, #120]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f06:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f0c:	481b      	ldr	r0, [pc, #108]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009f0e:	f7f7 fddf 	bl	8001ad0 <HAL_PCD_Init>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009f18:	f7f6 fffa 	bl	8000f10 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f22:	2318      	movs	r3, #24
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	f7f9 fa98 	bl	800345c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f32:	2358      	movs	r3, #88	; 0x58
 8009f34:	2200      	movs	r2, #0
 8009f36:	2180      	movs	r1, #128	; 0x80
 8009f38:	f7f9 fa90 	bl	800345c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f42:	23c0      	movs	r3, #192	; 0xc0
 8009f44:	2200      	movs	r2, #0
 8009f46:	2181      	movs	r1, #129	; 0x81
 8009f48:	f7f9 fa88 	bl	800345c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009f56:	2200      	movs	r2, #0
 8009f58:	2101      	movs	r1, #1
 8009f5a:	f7f9 fa7f 	bl	800345c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2182      	movs	r1, #130	; 0x82
 8009f6c:	f7f9 fa76 	bl	800345c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	20001164 	.word	0x20001164
 8009f80:	40005c00 	.word	0x40005c00

08009f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f7 fe7d 	bl	8001c9a <HAL_PCD_Start>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f980 	bl	800a2ac <USBD_Get_USB_Status>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4603      	mov	r3, r0
 8009fca:	70fb      	strb	r3, [r7, #3]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70bb      	strb	r3, [r7, #2]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fe2:	78bb      	ldrb	r3, [r7, #2]
 8009fe4:	883a      	ldrh	r2, [r7, #0]
 8009fe6:	78f9      	ldrb	r1, [r7, #3]
 8009fe8:	f7f7 ffc5 	bl	8001f76 <HAL_PCD_EP_Open>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f95a 	bl	800a2ac <USBD_Get_USB_Status>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	460b      	mov	r3, r1
 800a010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7f8 f80c 	bl	8002042 <HAL_PCD_EP_Close>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 f93b 	bl	800a2ac <USBD_Get_USB_Status>
 800a036:	4603      	mov	r3, r0
 800a038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f7f8 f8cd 	bl	8002202 <HAL_PCD_EP_SetStall>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f91c 	bl	800a2ac <USBD_Get_USB_Status>
 800a074:	4603      	mov	r3, r0
 800a076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a078:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f8 f900 	bl	80022a6 <HAL_PCD_EP_ClrStall>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 f8fd 	bl	800a2ac <USBD_Get_USB_Status>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	da0c      	bge.n	800a0f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e2:	68f9      	ldr	r1, [r7, #12]
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	440b      	add	r3, r1
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	e00b      	b.n	800a10e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	440b      	add	r3, r1
 800a108:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a10c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	4611      	mov	r1, r2
 800a138:	4618      	mov	r0, r3
 800a13a:	f7f7 fef7 	bl	8001f2c <HAL_PCD_SetAddress>
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 f8b1 	bl	800a2ac <USBD_Get_USB_Status>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	607a      	str	r2, [r7, #4]
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	460b      	mov	r3, r1
 800a166:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a176:	7af9      	ldrb	r1, [r7, #11]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	f7f7 fffe 	bl	800217c <HAL_PCD_EP_Transmit>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f890 	bl	800a2ac <USBD_Get_USB_Status>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a190:	7dbb      	ldrb	r3, [r7, #22]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b086      	sub	sp, #24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1b8:	7af9      	ldrb	r1, [r7, #11]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	f7f7 ff88 	bl	80020d2 <HAL_PCD_EP_Receive>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f86f 	bl	800a2ac <USBD_Get_USB_Status>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f7 ffaa 	bl	800214c <HAL_PCD_EP_GetRxCount>
 800a1f8:	4603      	mov	r3, r0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <HAL_PCDEx_LPM_Callback+0x18>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d013      	beq.n	800a242 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a21a:	e023      	b.n	800a264 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a224:	f000 f83c 	bl	800a2a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a228:	4b10      	ldr	r3, [pc, #64]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	4a0f      	ldr	r2, [pc, #60]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a22e:	f023 0306 	bic.w	r3, r3, #6
 800a232:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fc96 	bl	8008b6c <USBD_LL_Resume>
    break;
 800a240:	e010      	b.n	800a264 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fc79 	bl	8008b40 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	4a04      	ldr	r2, [pc, #16]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a25c:	f043 0306 	orr.w	r3, r3, #6
 800a260:	6113      	str	r3, [r2, #16]
    break;
 800a262:	bf00      	nop
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	e000ed00 	.word	0xe000ed00

0800a270 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a278:	4b03      	ldr	r3, [pc, #12]	; (800a288 <USBD_static_malloc+0x18>)
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20001458 	.word	0x20001458

0800a28c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]

}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a2a4:	f7f6 f9ca 	bl	800063c <SystemClock_Config>
}
 800a2a8:	bf00      	nop
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d817      	bhi.n	800a2f0 <USBD_Get_USB_Status+0x44>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <USBD_Get_USB_Status+0x1c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2df 	.word	0x0800a2df
 800a2d0:	0800a2e5 	.word	0x0800a2e5
 800a2d4:	0800a2eb 	.word	0x0800a2eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	e00b      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e2:	e008      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e8:	e005      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ee:	e002      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	bf00      	nop
  }
  return usb_status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <__libc_init_array>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4d0d      	ldr	r5, [pc, #52]	; (800a33c <__libc_init_array+0x38>)
 800a308:	4c0d      	ldr	r4, [pc, #52]	; (800a340 <__libc_init_array+0x3c>)
 800a30a:	1b64      	subs	r4, r4, r5
 800a30c:	10a4      	asrs	r4, r4, #2
 800a30e:	2600      	movs	r6, #0
 800a310:	42a6      	cmp	r6, r4
 800a312:	d109      	bne.n	800a328 <__libc_init_array+0x24>
 800a314:	4d0b      	ldr	r5, [pc, #44]	; (800a344 <__libc_init_array+0x40>)
 800a316:	4c0c      	ldr	r4, [pc, #48]	; (800a348 <__libc_init_array+0x44>)
 800a318:	f000 f82e 	bl	800a378 <_init>
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	2600      	movs	r6, #0
 800a322:	42a6      	cmp	r6, r4
 800a324:	d105      	bne.n	800a332 <__libc_init_array+0x2e>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32c:	4798      	blx	r3
 800a32e:	3601      	adds	r6, #1
 800a330:	e7ee      	b.n	800a310 <__libc_init_array+0xc>
 800a332:	f855 3b04 	ldr.w	r3, [r5], #4
 800a336:	4798      	blx	r3
 800a338:	3601      	adds	r6, #1
 800a33a:	e7f2      	b.n	800a322 <__libc_init_array+0x1e>
 800a33c:	0800a3e8 	.word	0x0800a3e8
 800a340:	0800a3e8 	.word	0x0800a3e8
 800a344:	0800a3e8 	.word	0x0800a3e8
 800a348:	0800a3ec 	.word	0x0800a3ec

0800a34c <memcpy>:
 800a34c:	440a      	add	r2, r1
 800a34e:	4291      	cmp	r1, r2
 800a350:	f100 33ff 	add.w	r3, r0, #4294967295
 800a354:	d100      	bne.n	800a358 <memcpy+0xc>
 800a356:	4770      	bx	lr
 800a358:	b510      	push	{r4, lr}
 800a35a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a35e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a362:	4291      	cmp	r1, r2
 800a364:	d1f9      	bne.n	800a35a <memcpy+0xe>
 800a366:	bd10      	pop	{r4, pc}

0800a368 <memset>:
 800a368:	4402      	add	r2, r0
 800a36a:	4603      	mov	r3, r0
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d100      	bne.n	800a372 <memset+0xa>
 800a370:	4770      	bx	lr
 800a372:	f803 1b01 	strb.w	r1, [r3], #1
 800a376:	e7f9      	b.n	800a36c <memset+0x4>

0800a378 <_init>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	bf00      	nop
 800a37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37e:	bc08      	pop	{r3}
 800a380:	469e      	mov	lr, r3
 800a382:	4770      	bx	lr

0800a384 <_fini>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr
